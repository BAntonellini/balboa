{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.0", "generated_at": "2022-11-23T20:37:12.619822Z", "invocation_id": "21dd6b78-3cff-4f3b-a78a-e1b0596dfac8", "env": {}, "project_id": "84e0991a380d2a451e9a7787e56e2b53", "user_id": "8b98ce82-40a8-414c-a41e-88cb49c00df5", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.balboa.base_cases": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.starschema_covid19.jhu_covid_19"]}, "config": {"enabled": true, "alias": null, "schema": "l2_covid_observations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_covid_observations", "fqn": ["balboa", "L2_bays", "covid_observations", "base_cases"], "unique_id": "model.balboa.base_cases", "raw_code": "with final as (\n\n    select\n        *,\n        difference as new_cases\n    from {{ source('starschema_covid19', 'jhu_covid_19') }}\n\n)\n\nselect * from final", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/covid_observations/base_cases.sql", "original_file_path": "models/L2_bays/covid_observations/base_cases.sql", "name": "base_cases", "alias": "base_cases", "checksum": {"name": "sha256", "checksum": "d38cdf877e19789663e295693d3659b2c44bd2d7a989a0065d61094e316e640b"}, "tags": [], "refs": [], "sources": [["starschema_covid19", "jhu_covid_19"]], "metrics": [], "description": "Covid information", "columns": {"cases": {"name": "cases", "description": "Reported Covid-19 cases", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Reporting date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fips": {"name": "fips", "description": "FIPS Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_region": {"name": "country_region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "province_state": {"name": "province_state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "county": {"name": "county", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_type": {"name": "case_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "long": {"name": "long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lat": {"name": "lat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iso3166_1": {"name": "iso3166_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iso3166_2": {"name": "iso3166_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "difference": {"name": "difference", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_date": {"name": "last_updated_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_reported_flag": {"name": "last_reported_flag", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_cases": {"name": "new_cases", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/covid_observations/base_cases.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/covid_observations/base_cases.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_covid_observations", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.778241, "compiled_code": "with final as (\n\n    select\n        *,\n        difference as new_cases\n    from starschema_covid19.public.JHU_COVID_19\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_covid_observations.base_cases"}, "model.balboa.total_covid_cases": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_utils.surrogate_key", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases"]}, "config": {"enabled": true, "alias": null, "schema": "l2_covid_observations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_covid_observations", "fqn": ["balboa", "L2_bays", "covid_observations", "total_covid_cases"], "unique_id": "model.balboa.total_covid_cases", "raw_code": "with raw_cases as (\n    select\n        country_region,\n        province_state,\n        county,\n        new_cases,\n        date,\n        case_type\n    from {{ ref('base_cases') }}\n),\n\ncreate_location_id as (\n    select\n        {{ dbt_utils.surrogate_key(['country_region', 'province_state', 'county']) }} as location_id,\n        new_cases,\n        date,\n        case_type\n    from raw_cases\n),\n\npivoted_model as (\n    select\n        location_id,\n        date,\n        sum(\"'Confirmed'\") as confirmed,\n        sum(\"'Deaths'\") as deaths,\n        sum(\"'Active'\") as active,\n        sum(\"'Recovered'\") as recovered\n    from create_location_id\n    pivot (sum(new_cases) for case_type in('Confirmed', 'Deaths', 'Active', 'Recovered')) as case_pivot\n    group by location_id, date\n)\n\nselect *\nfrom pivoted_model", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/covid_observations/total_covid_cases.sql", "original_file_path": "models/L2_bays/covid_observations/total_covid_cases.sql", "name": "total_covid_cases", "alias": "total_covid_cases", "checksum": {"name": "sha256", "checksum": "d898ddc605c2a08f80e5336e14334003f0def6b84209b49968e92906dab5d7d3"}, "tags": [], "refs": [["base_cases"], ["base_cases"], ["base_cases"]], "sources": [], "metrics": [], "description": "Cleaned up John Hopkins COVID19 cases", "columns": {"location_id": {"name": "location_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmed": {"name": "confirmed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deaths": {"name": "deaths", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recovered": {"name": "recovered", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/covid_observations/total_covid_cases.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/covid_observations/total_covid_cases.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_covid_observations", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.7642975, "compiled_code": "with raw_cases as (\n    select\n        country_region,\n        province_state,\n        county,\n        new_cases,\n        date,\n        case_type\n    from BALBOA.l2_covid_observations.base_cases\n),\n\ncreate_location_id as (\n    select\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        new_cases,\n        date,\n        case_type\n    from raw_cases\n),\n\npivoted_model as (\n    select\n        location_id,\n        date,\n        sum(\"'Confirmed'\") as confirmed,\n        sum(\"'Deaths'\") as deaths,\n        sum(\"'Active'\") as active,\n        sum(\"'Recovered'\") as recovered\n    from create_location_id\n    pivot (sum(new_cases) for case_type in('Confirmed', 'Deaths', 'Active', 'Recovered')) as case_pivot\n    group by location_id, date\n)\n\nselect *\nfrom pivoted_model", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_covid_observations.total_covid_cases"}, "model.balboa.covid_location": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_utils.surrogate_key", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.jhu_covid_19", "model.balboa.jhu_covid_19", "model.balboa.jhu_covid_19"]}, "config": {"enabled": true, "alias": null, "schema": "l2_covid_observations", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_covid_observations", "fqn": ["balboa", "L2_bays", "covid_observations", "covid_location"], "unique_id": "model.balboa.covid_location", "raw_code": "{{ config(materialized='ephemeral') }}\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from {{ ref('jhu_covid_19') }}\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        {{ dbt_utils.surrogate_key(['country_region', 'province_state', 'county']) }} as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/covid_observations/covid_location.sql", "original_file_path": "models/L2_bays/covid_observations/covid_location.sql", "name": "covid_location", "alias": "covid_location", "checksum": {"name": "sha256", "checksum": "5b2ec4028b1d3f07ab432349dbef12fe9e728e3a42c5a8394635793f3078c4d4"}, "tags": [], "refs": [["jhu_covid_19"], ["jhu_covid_19"], ["jhu_covid_19"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/balboa/models/L2_bays/covid_observations/covid_location.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "ephemeral", "schema": "l2_covid_observations", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.0245416, "compiled_code": "\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from BALBOA.l1_starschema_covid19.jhu_covid_19\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.balboa.dim_test__ng_test": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_utils.star", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases"]}, "config": {"enabled": true, "alias": null, "schema": "l2_covid_observations", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_covid_observations", "fqn": ["balboa", "L2_bays", "covid_observations", "dim_test__ng_test"], "unique_id": "model.balboa.dim_test__ng_test", "raw_code": "select\n    {{ dbt_utils.star(ref(\"base_cases\")) }}\nfrom {{ ref(\"base_cases\") }}", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/covid_observations/dim_test__ng_test.sql", "original_file_path": "models/L2_bays/covid_observations/dim_test__ng_test.sql", "name": "dim_test__ng_test", "alias": "dim_test", "checksum": {"name": "sha256", "checksum": "b88292a243f3c3950d5008224ebace43c57fa8cae9e07799f5ba030debc113a2"}, "tags": [], "refs": [["base_cases"], ["base_cases"], ["base_cases"], ["base_cases"], ["base_cases"], ["base_cases"]], "sources": [], "metrics": [], "description": "Test base_cases", "columns": {"country_region": {"name": "country_region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "province_state": {"name": "province_state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "county": {"name": "county", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fips": {"name": "fips", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_type": {"name": "case_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cases": {"name": "cases", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "long": {"name": "long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lat": {"name": "lat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iso3166_1": {"name": "iso3166_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iso3166_2": {"name": "iso3166_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "difference": {"name": "difference", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_date": {"name": "last_updated_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_reported_flag": {"name": "last_reported_flag", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_cases": {"name": "new_cases", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/covid_observations/dim_test__ng_test.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/covid_observations/dim_test__ng_test.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_covid_observations", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.7712197, "compiled_code": "select\n    \"COUNTRY_REGION\",\n  \"PROVINCE_STATE\",\n  \"COUNTY\",\n  \"FIPS\",\n  \"DATE\",\n  \"CASE_TYPE\",\n  \"CASES\",\n  \"LONG\",\n  \"LAT\",\n  \"ISO3166_1\",\n  \"ISO3166_2\",\n  \"DIFFERENCE\",\n  \"LAST_UPDATED_DATE\",\n  \"LAST_REPORTED_FLAG\",\n  \"NEW_CASES\"\nfrom BALBOA.l2_covid_observations.base_cases", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_covid_observations.dim_test"}, "model.balboa.credits_total": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "credits_total"], "unique_id": "model.balboa.credits_total", "raw_code": "select\n    credits_used,\n    start_time,\n    case\n        when dayname(start_time) like 'Mon' then 1\n        when dayname(start_time) like 'Tue' then 2\n        when dayname(start_time) like 'Wed' then 3\n        when dayname(start_time) like 'Thu' then 4\n        when dayname(start_time) like 'Fri' then 5\n        when dayname(start_time) like 'Sat' then 6\n        when dayname(start_time) like 'Sun' then 7\n    end as rank,\n    dayname(start_time) as day_name,\n    hour(start_time) as tod\nfrom\n    {{ ref('int_warehouse_metering_history') }}", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/credits_total.sql", "original_file_path": "models/L2_bays/snowflake_usage/credits_total.sql", "name": "credits_total", "alias": "credits_total", "checksum": {"name": "sha256", "checksum": "434f8fe366e173ccd12027d1f1b382d535375848e34c79ddcdf4db51763eb6ad"}, "tags": [], "refs": [["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"]], "sources": [], "metrics": [], "description": "Total number of credits used (last 12 months)", "columns": {"credits_used": {"name": "credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rank": {"name": "rank", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_name": {"name": "day_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tod": {"name": "tod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/credits_total.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/credits_total.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.803843, "compiled_code": "select\n    credits_used,\n    start_time,\n    case\n        when dayname(start_time) like 'Mon' then 1\n        when dayname(start_time) like 'Tue' then 2\n        when dayname(start_time) like 'Wed' then 3\n        when dayname(start_time) like 'Thu' then 4\n        when dayname(start_time) like 'Fri' then 5\n        when dayname(start_time) like 'Sat' then 6\n        when dayname(start_time) like 'Sun' then 7\n    end as rank,\n    dayname(start_time) as day_name,\n    hour(start_time) as tod\nfrom\n    BALBOA.l2_snowflake_usage.int_warehouse_metering_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.credits_total"}, "model.balboa.credits_by_warehouse": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "credits_by_warehouse"], "unique_id": "model.balboa.credits_by_warehouse", "raw_code": "select\n    start_time,\n    credits_used,\n    warehouse_name\nfrom\n    {{ ref('int_warehouse_metering_history') }}\nwhere\n    datediff(month, start_time, current_date) >= 1", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/credits_by_warehouse.sql", "original_file_path": "models/L2_bays/snowflake_usage/credits_by_warehouse.sql", "name": "credits_by_warehouse", "alias": "credits_by_warehouse", "checksum": {"name": "sha256", "checksum": "0e39b4a733ad428ce1e29bd1928b9d5438c89a03a1b91e69fd82e3f93507c998"}, "tags": [], "refs": [["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"]], "sources": [], "metrics": [], "description": "credits used by warehouse", "columns": {"start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/credits_by_warehouse.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/credits_by_warehouse.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.7949097, "compiled_code": "select\n    start_time,\n    credits_used,\n    warehouse_name\nfrom\n    BALBOA.l2_snowflake_usage.int_warehouse_metering_history\nwhere\n    datediff(month, start_time, current_date) >= 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.credits_by_warehouse"}, "model.balboa.storage_usage_m": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.int_storage_usage", "model.balboa.int_storage_usage", "model.balboa.int_storage_usage"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "storage_usage_m"], "unique_id": "model.balboa.storage_usage_m", "raw_code": "select\n    sum(total_billable_storage_tb) as storage,\n    usage_month\nfrom {{ ref('int_storage_usage') }}\nwhere\n    datediff(month, usage_month, current_date) <= 12 and datediff(month, usage_month, current_date) >= 1\ngroup by usage_month\norder by usage_month", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/storage_usage_m.sql", "original_file_path": "models/L2_bays/snowflake_usage/storage_usage_m.sql", "name": "storage_usage_m", "alias": "storage_usage_m", "checksum": {"name": "sha256", "checksum": "3b57ccf7b68a2d8e15ed4f46fa640bbb99872c7edb3452e9bf4df5b8759969db"}, "tags": [], "refs": [["int_storage_usage"], ["int_storage_usage"], ["int_storage_usage"]], "sources": [], "metrics": [], "description": "Storage usage by month (last 12 months)", "columns": {"usage_month": {"name": "usage_month", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "storage": {"name": "storage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/storage_usage_m.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/storage_usage_m.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.7929707, "compiled_code": "select\n    sum(total_billable_storage_tb) as storage,\n    usage_month\nfrom BALBOA.l2_snowflake_usage.int_storage_usage\nwhere\n    datediff(month, usage_month, current_date) <= 12 and datediff(month, usage_month, current_date) >= 1\ngroup by usage_month\norder by usage_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.storage_usage_m"}, "model.balboa.credits_variance": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "credits_variance"], "unique_id": "model.balboa.credits_variance", "raw_code": "with this_month as (\n    select\n        case\n            when timestampdiff(month, start_time, current_date) = 1 then 1\n            when timestampdiff(month, start_time, current_date) = 2 then 2\n            when timestampdiff(month, start_time, current_date) = 3 then 3\n            when timestampdiff(month, start_time, current_date) = 4 then 4\n            when timestampdiff(month, start_time, current_date) = 5 then 5\n            when timestampdiff(month, start_time, current_date) = 6 then 6\n            when timestampdiff(month, start_time, current_date) = 7 then 7\n            when timestampdiff(month, start_time, current_date) = 8 then 8\n            when timestampdiff(month, start_time, current_date) = 9 then 9\n            when timestampdiff(month, start_time, current_date) = 10 then 10\n            when timestampdiff(month, start_time, current_date) = 11 then 11\n            when timestampdiff(month, start_time, current_date) = 12 then 12\n            when timestampdiff(month, start_time, current_date) = 13 then 13\n        end as month_n,\n        date_trunc(month, start_time) as month_d,\n        sum(credits_used) as monthly_credits\n    from\n        {{ ref('int_warehouse_metering_history') }}\n    where\n        start_time >= dateadd(month, -13, date_trunc(month, current_date))\n        and start_time < date_trunc(month, current_date)\n    group by\n        month_d, month_n\n    order by\n        month_d asc\n),\n\nprev_month as (\n    select\n        case\n            when timestampdiff(month, start_time, current_date) = 1 then 0\n            when timestampdiff(month, start_time, current_date) = 2 then 1\n            when timestampdiff(month, start_time, current_date) = 3 then 2\n            when timestampdiff(month, start_time, current_date) = 4 then 3\n            when timestampdiff(month, start_time, current_date) = 5 then 4\n            when timestampdiff(month, start_time, current_date) = 6 then 5\n            when timestampdiff(month, start_time, current_date) = 7 then 6\n            when timestampdiff(month, start_time, current_date) = 8 then 7\n            when timestampdiff(month, start_time, current_date) = 9 then 8\n            when timestampdiff(month, start_time, current_date) = 10 then 9\n            when timestampdiff(month, start_time, current_date) = 11 then 10\n            when timestampdiff(month, start_time, current_date) = 12 then 11\n            when timestampdiff(month, start_time, current_date) = 13 then 12\n        end as prev_month,\n        date_trunc(month, start_time) as prev_month_d,\n        sum(credits_used) as prev_monthly_credits\n    from\n        {{ ref('int_warehouse_metering_history') }}\n    where\n        start_time >= dateadd(month, -13, date_trunc(month, current_date))\n        and start_time < date_trunc(month, current_date)\n    group by\n        prev_month_d, prev_month\n    order by\n        prev_month_d asc\n)\n\nselect\n    this_month.month_n,\n    this_month.month_d,\n    prev_month.prev_month,\n    this_month.monthly_credits,\n    prev_month.prev_monthly_credits,\n    this_month.monthly_credits - prev_month.prev_monthly_credits as difference,\n    sum(difference) over (order by this_month.month_n desc rows between unbounded preceding and current row) as variance\nfrom this_month\nleft join prev_month on this_month.month_n = prev_month.prev_month", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/credits_variance.sql", "original_file_path": "models/L2_bays/snowflake_usage/credits_variance.sql", "name": "credits_variance", "alias": "credits_variance", "checksum": {"name": "sha256", "checksum": "76c83b038bbc1e0601d64c0e5a0af58bd3ca4350bc5c49c27e51607c80b7b823"}, "tags": [], "refs": [["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"]], "sources": [], "metrics": [], "description": "Credits usage variance", "columns": {"month_n": {"name": "month_n", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_d": {"name": "month_d", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prev_monthly_credits": {"name": "prev_monthly_credits", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prev_month": {"name": "prev_month", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_credits": {"name": "monthly_credits", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "difference": {"name": "difference", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "variance": {"name": "variance", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/credits_variance.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/credits_variance.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.799576, "compiled_code": "with this_month as (\n    select\n        case\n            when timestampdiff(month, start_time, current_date) = 1 then 1\n            when timestampdiff(month, start_time, current_date) = 2 then 2\n            when timestampdiff(month, start_time, current_date) = 3 then 3\n            when timestampdiff(month, start_time, current_date) = 4 then 4\n            when timestampdiff(month, start_time, current_date) = 5 then 5\n            when timestampdiff(month, start_time, current_date) = 6 then 6\n            when timestampdiff(month, start_time, current_date) = 7 then 7\n            when timestampdiff(month, start_time, current_date) = 8 then 8\n            when timestampdiff(month, start_time, current_date) = 9 then 9\n            when timestampdiff(month, start_time, current_date) = 10 then 10\n            when timestampdiff(month, start_time, current_date) = 11 then 11\n            when timestampdiff(month, start_time, current_date) = 12 then 12\n            when timestampdiff(month, start_time, current_date) = 13 then 13\n        end as month_n,\n        date_trunc(month, start_time) as month_d,\n        sum(credits_used) as monthly_credits\n    from\n        BALBOA.l2_snowflake_usage.int_warehouse_metering_history\n    where\n        start_time >= dateadd(month, -13, date_trunc(month, current_date))\n        and start_time < date_trunc(month, current_date)\n    group by\n        month_d, month_n\n    order by\n        month_d asc\n),\n\nprev_month as (\n    select\n        case\n            when timestampdiff(month, start_time, current_date) = 1 then 0\n            when timestampdiff(month, start_time, current_date) = 2 then 1\n            when timestampdiff(month, start_time, current_date) = 3 then 2\n            when timestampdiff(month, start_time, current_date) = 4 then 3\n            when timestampdiff(month, start_time, current_date) = 5 then 4\n            when timestampdiff(month, start_time, current_date) = 6 then 5\n            when timestampdiff(month, start_time, current_date) = 7 then 6\n            when timestampdiff(month, start_time, current_date) = 8 then 7\n            when timestampdiff(month, start_time, current_date) = 9 then 8\n            when timestampdiff(month, start_time, current_date) = 10 then 9\n            when timestampdiff(month, start_time, current_date) = 11 then 10\n            when timestampdiff(month, start_time, current_date) = 12 then 11\n            when timestampdiff(month, start_time, current_date) = 13 then 12\n        end as prev_month,\n        date_trunc(month, start_time) as prev_month_d,\n        sum(credits_used) as prev_monthly_credits\n    from\n        BALBOA.l2_snowflake_usage.int_warehouse_metering_history\n    where\n        start_time >= dateadd(month, -13, date_trunc(month, current_date))\n        and start_time < date_trunc(month, current_date)\n    group by\n        prev_month_d, prev_month\n    order by\n        prev_month_d asc\n)\n\nselect\n    this_month.month_n,\n    this_month.month_d,\n    prev_month.prev_month,\n    this_month.monthly_credits,\n    prev_month.prev_monthly_credits,\n    this_month.monthly_credits - prev_month.prev_monthly_credits as difference,\n    sum(difference) over (order by this_month.month_n desc rows between unbounded preceding and current row) as variance\nfrom this_month\nleft join prev_month on this_month.month_n = prev_month.prev_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.credits_variance"}, "model.balboa.query_utilization": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "query_utilization"], "unique_id": "model.balboa.query_utilization", "raw_code": "with query_fail as (\n    select count_if(query_status like 'FAIL') / count(query_status) * 100 as query_fail_percentage\n    from {{ ref('int_query_history') }}\n),\n\nqueries_per_user as (\n    select count(query_id) / count(distinct user_name) as queries\n    from {{ ref('int_query_history') }}\n)\nselect\n    query_id,\n    database_name,\n    schema_name,\n    warehouse_name,\n    query_time,\n    role,\n    user_name,\n    query_status,\n    start_time,\n    (select * from query_fail) as query_fail_percentage,\n    (select * from queries_per_user) as avg_queries_per_user\nfrom {{ ref('int_query_history') }}", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/query_utilization.sql", "original_file_path": "models/L2_bays/snowflake_usage/query_utilization.sql", "name": "query_utilization", "alias": "query_utilization", "checksum": {"name": "sha256", "checksum": "5a5e2d9381fbe68df4867bb0d662f55d1a2df292043e530f35133be16fb1f7d5"}, "tags": [], "refs": [["int_query_history"], ["int_query_history"], ["int_query_history"], ["int_query_history"], ["int_query_history"], ["int_query_history"], ["int_query_history"], ["int_query_history"], ["int_query_history"]], "sources": [], "metrics": [], "description": "query utilization final model", "columns": {"query_id": {"name": "query_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_time": {"name": "query_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_status": {"name": "query_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_fail_percentage": {"name": "query_fail_percentage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_queries_per_user": {"name": "avg_queries_per_user", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/query_utilization.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/query_utilization.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.8091488, "compiled_code": "with query_fail as (\n    select count_if(query_status like 'FAIL') / count(query_status) * 100 as query_fail_percentage\n    from BALBOA.l2_snowflake_usage.int_query_history\n),\n\nqueries_per_user as (\n    select count(query_id) / count(distinct user_name) as queries\n    from BALBOA.l2_snowflake_usage.int_query_history\n)\nselect\n    query_id,\n    database_name,\n    schema_name,\n    warehouse_name,\n    query_time,\n    role,\n    user_name,\n    query_status,\n    start_time,\n    (select * from query_fail) as query_fail_percentage,\n    (select * from queries_per_user) as avg_queries_per_user\nfrom BALBOA.l2_snowflake_usage.int_query_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.query_utilization"}, "model.balboa.credits_mtd": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "credits_mtd"], "unique_id": "model.balboa.credits_mtd", "raw_code": "select\n    credits_used as mtd_credits_used,\n    (\n        select sum(credits_used) as credits_used_sum\n        from\n            {{ ref('int_warehouse_metering_history') }}\n        where\n            timestampdiff(month, start_time, current_date) = 1\n            and day(current_date) >= day(start_time)\n    ) as previous_mtd_credits_used\nfrom\n    {{ ref('int_warehouse_metering_history') }}\nwhere\n    timestampdiff(month, start_time, current_date) = 0", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/credits_mtd.sql", "original_file_path": "models/L2_bays/snowflake_usage/credits_mtd.sql", "name": "credits_mtd", "alias": "credits_mtd", "checksum": {"name": "sha256", "checksum": "3018616905c6da15f2c3954bc3599ff93dbc6859bda812cb2e81d9bfaf5b1b05"}, "tags": [], "refs": [["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"]], "sources": [], "metrics": [], "description": "Credits used month to date", "columns": {"mtd_credits_used": {"name": "mtd_credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previous_mtd_credits_used": {"name": "previous_mtd_credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/credits_mtd.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/credits_mtd.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.7913973, "compiled_code": "select\n    credits_used as mtd_credits_used,\n    (\n        select sum(credits_used) as credits_used_sum\n        from\n            BALBOA.l2_snowflake_usage.int_warehouse_metering_history\n        where\n            timestampdiff(month, start_time, current_date) = 1\n            and day(current_date) >= day(start_time)\n    ) as previous_mtd_credits_used\nfrom\n    BALBOA.l2_snowflake_usage.int_warehouse_metering_history\nwhere\n    timestampdiff(month, start_time, current_date) = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.credits_mtd"}, "model.balboa.credits_by_month": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "credits_by_month"], "unique_id": "model.balboa.credits_by_month", "raw_code": "with credits_by_month as (\n    select\n        date_trunc(month, start_time) as month_n,\n        sum(credits_used) as monthly_credits\n    from {{ ref('int_warehouse_metering_history') }}\n    where\n        datediff(month, start_time, current_date) >= 1\n    group by month_n\n    order by month_n asc\n)\n\nselect\n    month_n,\n    sum(monthly_credits) over(order by month_n asc rows between unbounded preceding and current row) as cumulative_sum\nfrom\n    credits_by_month\norder by month_n asc", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/credits_by_month.sql", "original_file_path": "models/L2_bays/snowflake_usage/credits_by_month.sql", "name": "credits_by_month", "alias": "credits_by_month", "checksum": {"name": "sha256", "checksum": "927534d3297d13e5f2cedeef2acd36daf68029605c51bcf54a96a67f2e088061"}, "tags": [], "refs": [["int_warehouse_metering_history"], ["int_warehouse_metering_history"], ["int_warehouse_metering_history"]], "sources": [], "metrics": [], "description": "Credit usage by month (last 12 months)", "columns": {"month_n": {"name": "month_n", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cumulative_sum": {"name": "cumulative_sum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/credits_by_month.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/credits_by_month.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.8011513, "compiled_code": "with credits_by_month as (\n    select\n        date_trunc(month, start_time) as month_n,\n        sum(credits_used) as monthly_credits\n    from BALBOA.l2_snowflake_usage.int_warehouse_metering_history\n    where\n        datediff(month, start_time, current_date) >= 1\n    group by month_n\n    order by month_n asc\n)\n\nselect\n    month_n,\n    sum(monthly_credits) over(order by month_n asc rows between unbounded preceding and current row) as cumulative_sum\nfrom\n    credits_by_month\norder by month_n asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.credits_by_month"}, "model.balboa.int_query_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.query_history", "model.balboa.query_history", "model.balboa.query_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "intermediate", "int_query_history"], "unique_id": "model.balboa.int_query_history", "raw_code": "select\n    query_id,\n    database_name,\n    schema_name,\n    warehouse_name,\n    total_elapsed_time as query_time,\n    role_name as role,\n    user_name,\n    execution_status as query_status,\n    start_time\nfrom {{ ref('query_history') }}", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/intermediate/int_query_history.sql", "original_file_path": "models/L2_bays/snowflake_usage/intermediate/int_query_history.sql", "name": "int_query_history", "alias": "int_query_history", "checksum": {"name": "sha256", "checksum": "20908baf5f80dd6c3d6695a5c66e7ebacb3896417a8c2edd8683b1f7bc11be53"}, "tags": [], "refs": [["query_history"], ["query_history"], ["query_history"]], "sources": [], "metrics": [], "description": "staging model for query history", "columns": {"query_id": {"name": "query_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_time": {"name": "query_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_status": {"name": "query_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/intermediate/int_query_history.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/intermediate/int_query_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.825223, "compiled_code": "select\n    query_id,\n    database_name,\n    schema_name,\n    warehouse_name,\n    total_elapsed_time as query_time,\n    role_name as role,\n    user_name,\n    execution_status as query_status,\n    start_time\nfrom BALBOA.l1_account_usage.query_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.int_query_history"}, "model.balboa.int_storage_usage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.storage_usage", "model.balboa.storage_usage", "model.balboa.storage_usage"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "intermediate", "int_storage_usage"], "unique_id": "model.balboa.int_storage_usage", "raw_code": "select\n    date_trunc(month, usage_date) as usage_month,\n    avg(storage_bytes + stage_bytes + failsafe_bytes) / power(1024, 4) as total_billable_storage_tb,\n    avg(storage_bytes) / power(1024, 4) as storage_billable_storage_tb,\n    avg(stage_bytes) / power(1024, 4) as stage_billable_storage_tb,\n    avg(failsafe_bytes) / power(1024, 4) as failsafe_billable_storage_tb\nfrom {{ ref('storage_usage') }}\ngroup by date_trunc(month, usage_date)\norder by date_trunc(month, usage_date)", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/intermediate/int_storage_usage.sql", "original_file_path": "models/L2_bays/snowflake_usage/intermediate/int_storage_usage.sql", "name": "int_storage_usage", "alias": "int_storage_usage", "checksum": {"name": "sha256", "checksum": "534dc92548076b91fda824aa074ebdd6a7744f0ce3cae4cc1fe7ffecaeb582cd"}, "tags": [], "refs": [["storage_usage"], ["storage_usage"], ["storage_usage"]], "sources": [], "metrics": [], "description": "storage usage staging model", "columns": {"usage_month": {"name": "usage_month", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_billable_storage_tb": {"name": "total_billable_storage_tb", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "storage_billable_storage_tb": {"name": "storage_billable_storage_tb", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_billable_storage_tb": {"name": "stage_billable_storage_tb", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failsafe_billable_storage_tb": {"name": "failsafe_billable_storage_tb", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/intermediate/int_storage_usage.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/intermediate/int_storage_usage.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.8118706, "compiled_code": "select\n    date_trunc(month, usage_date) as usage_month,\n    avg(storage_bytes + stage_bytes + failsafe_bytes) / power(1024, 4) as total_billable_storage_tb,\n    avg(storage_bytes) / power(1024, 4) as storage_billable_storage_tb,\n    avg(stage_bytes) / power(1024, 4) as stage_billable_storage_tb,\n    avg(failsafe_bytes) / power(1024, 4) as failsafe_billable_storage_tb\nfrom BALBOA.l1_account_usage.storage_usage\ngroup by date_trunc(month, usage_date)\norder by date_trunc(month, usage_date)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.int_storage_usage"}, "model.balboa.int_pipe_usage_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.pipe_usage_history", "model.balboa.pipe_usage_history", "model.balboa.pipe_usage_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "intermediate", "int_pipe_usage_history"], "unique_id": "model.balboa.int_pipe_usage_history", "raw_code": "select\n    pipe_id,\n    pipe_name,\n    start_time,\n    end_time,\n    credits_used,\n    bytes_inserted,\n    files_inserted,\n    to_date(start_time) as start_date,\n    datediff(hour, start_time, end_time) as pipeline_operation_hours,\n    hour(start_time) as time_of_day\nfrom {{ ref('pipe_usage_history') }}\norder by to_date(start_time) desc", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/intermediate/int_pipe_usage_history.sql", "original_file_path": "models/L2_bays/snowflake_usage/intermediate/int_pipe_usage_history.sql", "name": "int_pipe_usage_history", "alias": "int_pipe_usage_history", "checksum": {"name": "sha256", "checksum": "a0285514b931702d8b57d532636c247049cec5d73cbb82c3af50c7ed49546250"}, "tags": [], "refs": [["pipe_usage_history"], ["pipe_usage_history"], ["pipe_usage_history"]], "sources": [], "metrics": [], "description": "pipe usage history staging model", "columns": {"pipe_id": {"name": "pipe_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipe_name": {"name": "pipe_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_inserted": {"name": "bytes_inserted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "files_inserted": {"name": "files_inserted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_operation_hours": {"name": "pipeline_operation_hours", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/intermediate/int_pipe_usage_history.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/intermediate/int_pipe_usage_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.82072, "compiled_code": "select\n    pipe_id,\n    pipe_name,\n    start_time,\n    end_time,\n    credits_used,\n    bytes_inserted,\n    files_inserted,\n    to_date(start_time) as start_date,\n    datediff(hour, start_time, end_time) as pipeline_operation_hours,\n    hour(start_time) as time_of_day\nfrom BALBOA.l1_account_usage.pipe_usage_history\norder by to_date(start_time) desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.int_pipe_usage_history"}, "model.balboa.int_warehouse_metering_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.warehouse_metering_history", "model.balboa.warehouse_metering_history", "model.balboa.warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "l2_snowflake_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_snowflake_usage", "fqn": ["balboa", "L2_bays", "snowflake_usage", "intermediate", "int_warehouse_metering_history"], "unique_id": "model.balboa.int_warehouse_metering_history", "raw_code": "select\n    start_time,\n    end_time,\n    warehouse_id,\n    warehouse_name,\n    credits_used,\n    month(start_time) as start_date,\n    datediff(hour, start_time, end_time) as warehouse_operation_hours,\n    hour(start_time) as time_of_day\nfrom {{ ref('warehouse_metering_history') }}", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/snowflake_usage/intermediate/int_warehouse_metering_history.sql", "original_file_path": "models/L2_bays/snowflake_usage/intermediate/int_warehouse_metering_history.sql", "name": "int_warehouse_metering_history", "alias": "int_warehouse_metering_history", "checksum": {"name": "sha256", "checksum": "2e7c8ffd3c52c7daf3be22a3b7beaae0abe39747cce87189299bdfda85e3c65a"}, "tags": [], "refs": [["warehouse_metering_history"], ["warehouse_metering_history"], ["warehouse_metering_history"]], "sources": [], "metrics": [], "description": "warehouse metering history staging model", "columns": {"start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_id": {"name": "warehouse_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_operation_hours": {"name": "warehouse_operation_hours", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/snowflake_usage/intermediate/int_warehouse_metering_history.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/snowflake_usage/intermediate/int_warehouse_metering_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_snowflake_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.8160043, "compiled_code": "select\n    start_time,\n    end_time,\n    warehouse_id,\n    warehouse_name,\n    credits_used,\n    month(start_time) as start_date,\n    datediff(hour, start_time, end_time) as warehouse_operation_hours,\n    hour(start_time) as time_of_day\nfrom BALBOA.l1_account_usage.warehouse_metering_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_snowflake_usage.int_warehouse_metering_history"}, "model.balboa.current_population": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa._airbyte_raw_country_populations", "model.balboa._airbyte_raw_country_populations", "model.balboa._airbyte_raw_country_populations"]}, "config": {"enabled": true, "alias": null, "schema": "l2_country_demographics", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l2_country_demographics", "fqn": ["balboa", "L2_bays", "country_demographics", "current_population"], "unique_id": "model.balboa.current_population", "raw_code": "select\n    country_code,\n    country_name,\n    value,\n    year\nfrom (\n        select\n            country_code,\n            country_name,\n            value,\n            year,\n            rank() over (\n                partition by country_code, country_name order by year desc\n            ) as rank_years\n        from {{ ref('_airbyte_raw_country_populations') }}\n    )\nwhere\n    rank_years = 1\n    and year > 2017", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L2_bays/country_demographics/current_population.sql", "original_file_path": "models/L2_bays/country_demographics/current_population.sql", "name": "current_population", "alias": "current_population", "checksum": {"name": "sha256", "checksum": "1301814cb1c915d589000998d35978437034be62c0b97de0ae2d9497f680c77f"}, "tags": [], "refs": [["_airbyte_raw_country_populations"], ["_airbyte_raw_country_populations"], ["_airbyte_raw_country_populations"]], "sources": [], "metrics": [], "description": "Current Population by Country", "columns": {"country_code": {"name": "country_code", "description": "3 Letter Country Code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_name": {"name": "country_name", "description": "Name of the country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "Total population for the country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "Year population was collected", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L2_bays/country_demographics/current_population.yml", "compiled_path": "target/compiled/balboa/models/L2_bays/country_demographics/current_population.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l2_country_demographics", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.8275836, "compiled_code": "select\n    country_code,\n    country_name,\n    value,\n    year\nfrom (\n        select\n            country_code,\n            country_name,\n            value,\n            year,\n            rank() over (\n                partition by country_code, country_name order by year desc\n            ) as rank_years\n        from BALBOA.l1_country_data._airbyte_raw_country_populations\n    )\nwhere\n    rank_years = 1\n    and year > 2017", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l2_country_demographics.current_population"}, "model.balboa.covid_cases_country": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.covid_location"]}, "config": {"enabled": true, "alias": null, "schema": "l3_covid_analytics", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#928570"}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l3_covid_analytics", "fqn": ["balboa", "L3_coves", "covid_analytics", "covid_cases_country"], "unique_id": "model.balboa.covid_cases_country", "raw_code": "with covid_cases as (\n    select\n        location_id,\n        date,\n        confirmed,\n        deaths,\n        active,\n        recovered\n    from {{ ref('total_covid_cases') }}\n),\n\nlocation as (\n    select\n        location_id,\n        state,\n        country,\n        lat,\n        long\n    from {{ ref('covid_location') }}\n)\n\nselect\n    location.country,\n    location.lat,\n    location.long,\n    covid_cases.date,\n    covid_cases.confirmed,\n    covid_cases.deaths,\n    covid_cases.active,\n    covid_cases.recovered\nfrom covid_cases\nleft join location\n    on location.location_id = covid_cases.location_id\nwhere location.country is not null\n    and location.state is null", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/covid_cases_country.sql", "original_file_path": "models/L3_coves/covid_analytics/covid_cases_country.sql", "name": "covid_cases_country", "alias": "covid_cases_country", "checksum": {"name": "sha256", "checksum": "ff2f0ad824ab1ae4edb685c820ac0b1a783b47e009e4db7ee0a6a0318e3166e9"}, "tags": [], "refs": [["total_covid_cases"], ["total_covid_cases"], ["total_covid_cases"], ["covid_location"], ["covid_location"], ["covid_location"]], "sources": [], "metrics": [], "description": "Cleaned up John Hopkins COVID19 cases", "columns": {"country": {"name": "country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lat": {"name": "lat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "long": {"name": "long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmed": {"name": "confirmed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deaths": {"name": "deaths", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recovered": {"name": "recovered", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#928570"}, "patch_path": "balboa://models/L3_coves/covid_analytics/covid_cases_country.yml", "compiled_path": "target/compiled/balboa/models/L3_coves/covid_analytics/covid_cases_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "table", "schema": "l3_covid_analytics", "persist_docs": {"relation": true, "columns": true}, "docs": {"node_color": "#928570"}}, "created_at": 1669235798.8403318, "compiled_code": "with  __dbt__cte__covid_location as (\n\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from BALBOA.l1_starschema_covid19.jhu_covid_19\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1\n),covid_cases as (\n    select\n        location_id,\n        date,\n        confirmed,\n        deaths,\n        active,\n        recovered\n    from BALBOA.l2_covid_observations.total_covid_cases\n),\n\nlocation as (\n    select\n        location_id,\n        state,\n        country,\n        lat,\n        long\n    from __dbt__cte__covid_location\n)\n\nselect\n    location.country,\n    location.lat,\n    location.long,\n    covid_cases.date,\n    covid_cases.confirmed,\n    covid_cases.deaths,\n    covid_cases.active,\n    covid_cases.recovered\nfrom covid_cases\nleft join location\n    on location.location_id = covid_cases.location_id\nwhere location.country is not null\n    and location.state is null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.balboa.covid_location", "sql": " __dbt__cte__covid_location as (\n\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from BALBOA.l1_starschema_covid19.jhu_covid_19\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1\n)"}], "relation_name": "BALBOA.l3_covid_analytics.covid_cases_country"}, "model.balboa.covid_cases_county": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.covid_location"]}, "config": {"enabled": true, "alias": null, "schema": "l3_covid_analytics", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#928570"}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l3_covid_analytics", "fqn": ["balboa", "L3_coves", "covid_analytics", "covid_cases_county"], "unique_id": "model.balboa.covid_cases_county", "raw_code": "with covid_cases as (\n    select * from {{ ref('total_covid_cases') }}\n),\n\nlocation as (\n    select * from {{ ref('covid_location') }}\n)\n\nselect\n    location.country,\n    location.state,\n    location.county,\n    location.lat,\n    location.long,\n    cases.date,\n    cases.confirmed,\n    cases.deaths,\n    cases.active,\n    cases.recovered\nfrom covid_cases as cases\nleft join location as location\n    on location.location_id = cases.location_id\nwhere location.county is not null", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/covid_cases_county.sql", "original_file_path": "models/L3_coves/covid_analytics/covid_cases_county.sql", "name": "covid_cases_county", "alias": "covid_cases_county", "checksum": {"name": "sha256", "checksum": "18921b63f5bd5373da6e6355b8c2bb08207ec67bb354962b6ee0ed280f430a8f"}, "tags": [], "refs": [["total_covid_cases"], ["total_covid_cases"], ["total_covid_cases"], ["covid_location"], ["covid_location"], ["covid_location"]], "sources": [], "metrics": [], "description": "Cleaned up John Hopkins COVID19 cases", "columns": {"country": {"name": "country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "county": {"name": "county", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lat": {"name": "lat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "long": {"name": "long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmed": {"name": "confirmed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deaths": {"name": "deaths", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recovered": {"name": "recovered", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#928570"}, "patch_path": "balboa://models/L3_coves/covid_analytics/covid_cases_county.yml", "compiled_path": "target/compiled/balboa/models/L3_coves/covid_analytics/covid_cases_county.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "table", "schema": "l3_covid_analytics", "persist_docs": {"relation": true, "columns": true}, "docs": {"node_color": "#928570"}}, "created_at": 1669235798.8758247, "compiled_code": "with  __dbt__cte__covid_location as (\n\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from BALBOA.l1_starschema_covid19.jhu_covid_19\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1\n),covid_cases as (\n    select * from BALBOA.l2_covid_observations.total_covid_cases\n),\n\nlocation as (\n    select * from __dbt__cte__covid_location\n)\n\nselect\n    location.country,\n    location.state,\n    location.county,\n    location.lat,\n    location.long,\n    cases.date,\n    cases.confirmed,\n    cases.deaths,\n    cases.active,\n    cases.recovered\nfrom covid_cases as cases\nleft join location as location\n    on location.location_id = cases.location_id\nwhere location.county is not null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.balboa.covid_location", "sql": " __dbt__cte__covid_location as (\n\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from BALBOA.l1_starschema_covid19.jhu_covid_19\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1\n)"}], "relation_name": "BALBOA.l3_covid_analytics.covid_cases_county"}, "model.balboa.agg_cases_by_month": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.calculate", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.metrics.dbt_metrics_default_calendar", "model.metrics.dbt_metrics_default_calendar", "model.metrics.dbt_metrics_default_calendar", "metric.balboa.sum_cases"]}, "config": {"enabled": true, "alias": null, "schema": "l3_covid_analytics", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#928570"}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l3_covid_analytics", "fqn": ["balboa", "L3_coves", "covid_analytics", "agg_cases_by_month"], "unique_id": "model.balboa.agg_cases_by_month", "raw_code": "select *\nfrom {{ metrics.calculate(\n    [\n        metric('sum_cases')\n    ],\n    grain='month',\n    dimensions=['country','state'],\n\n    start_date='2020-01-01'\n) }}\norder by 1 desc\n\n\n{#\n        metric('sum_deaths'),\n        metric('average_cases'),\n        metric('average_deaths') #}", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/agg_cases_by_month.sql", "original_file_path": "models/L3_coves/covid_analytics/agg_cases_by_month.sql", "name": "agg_cases_by_month", "alias": "agg_cases_by_month", "checksum": {"name": "sha256", "checksum": "384ff6a4d1773f873f4f6c95091ae4686157e8aca9d0340b828de947762f07c0"}, "tags": [], "refs": [["dbt_metrics_default_calendar"], ["dbt_metrics_default_calendar"], ["dbt_metrics_default_calendar"]], "sources": [], "metrics": [["sum_cases"]], "description": "Aggregated Covid data by month", "columns": {"date_month": {"name": "date_month", "description": "metrics month", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "Reporting State", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Total Cummolative deaths due to covid-19", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_cases": {"name": "sum_cases", "description": "Total Cummolative deaths due to covid-19", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#928570"}, "patch_path": "balboa://models/L3_coves/covid_analytics/agg_cases_by_month.yml", "compiled_path": "target/compiled/balboa/models/L3_coves/covid_analytics/agg_cases_by_month.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "table", "schema": "l3_covid_analytics", "persist_docs": {"relation": true, "columns": true}, "docs": {"node_color": "#928570"}}, "created_at": 1669235798.8475816, "compiled_code": "select *\nfrom -- depends on: BALBOA.dbt_metrics.dbt_metrics_default_calendar\n    \n\n(\n\nwith calendar as (\n\n    select \n        * \n    from BALBOA.dbt_metrics.dbt_metrics_default_calendar\n    where date_day >= cast('2020-01-01' as date) \n)\n\n\n\n, sum_cases__aggregate as (\n    select\n        date_month,\n        country,\n        state,\n        sum(property_to_aggregate) as sum_cases,\n        boolor_agg(metric_date_day is not null) as has_data\n        \n\n    from (\n\n    \n        select \n        \n            cast(base_model.date as date) as metric_date_day, -- timestamp field\n            calendar_table.date_month as date_month,\n            calendar_table.date_day as window_filter_date,\n\n            \n                base_model.country,\n                base_model.state,\n                (cases) as property_to_aggregate\n\n        from BALBOA.l3_covid_analytics.covid_cases_state base_model \n        left join BALBOA.dbt_metrics.dbt_metrics_default_calendar calendar_table\n\n        \n            on cast(base_model.date as date) = calendar_table.date_day\n        \n\n        where 1=1\n            and (\n            cast(date as date) >= cast('2020-01-01' as date) \n            )\n        \n    ) as base_query\n\n    where 1=1\n\n    \n\n    \n        group by\n        1, 2, 3\n\n\n\n)\n\n, sum_cases__dims as (\n    select distinct\n        \n        country,\n        state\n        \n    from sum_cases__aggregate\n)\n\n, sum_cases__spine_time as (\n\n    select\n        calendar.date_month\n        , sum_cases__dims.country\n        , sum_cases__dims.state\n\n    from calendar\n    cross join sum_cases__dims\n    \n        group by\n        1, 2, 3\n\n\n\n)\n\n, sum_cases__final as (\n    \n    select\n        \n        parent_metric_cte.date_month,\n        parent_metric_cte.country,\n        parent_metric_cte.state,\n        coalesce(sum_cases, 0) as sum_cases\n\n    from sum_cases__spine_time as parent_metric_cte\n    left outer join sum_cases__aggregate\n        using (\n            date_month\n            , country\n            , state\n        )\n\n        where (\n            parent_metric_cte.date_month <= (\n                select \n                    max(case when has_data then date_month end) \n                from sum_cases__aggregate\n            ) \n        )      \n         \n    )\n\n\n\n, secondary_calculations as (\n\n    select \n        *\n\n\n    from sum_cases__final\n)\n\n\n\n\n\n    select * from sum_cases__final\n        order by\n        1 desc, 2 desc, 3 desc\n\n\n\n) metric_subq\norder by 1 desc\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l3_covid_analytics.agg_cases_by_month"}, "model.balboa.covid_cases_state": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.covid_location"]}, "config": {"enabled": true, "alias": null, "schema": "l3_covid_analytics", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#928570"}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l3_covid_analytics", "fqn": ["balboa", "L3_coves", "covid_analytics", "covid_cases_state"], "unique_id": "model.balboa.covid_cases_state", "raw_code": "with covid_cases as (\n    select * from {{ ref('total_covid_cases') }}\n),\n\nlocation as (\n    select * from {{ ref('covid_location') }}\n)\n\nselect\n    location.location_id,\n    location.country,\n    location.state,\n    location.lat,\n    location.long,\n    covid_cases.date,\n    covid_cases.confirmed as cases,\n    covid_cases.deaths,\n    covid_cases.active,\n    covid_cases.recovered\nfrom covid_cases\nleft join location\n    on location.location_id = covid_cases.location_id\nwhere location.state is not null\n    and location.county is not null", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/covid_cases_state.sql", "original_file_path": "models/L3_coves/covid_analytics/covid_cases_state.sql", "name": "covid_cases_state", "alias": "covid_cases_state", "checksum": {"name": "sha256", "checksum": "44a3ec893dd526fa9ef4df175656b243645462fe733f6834624696c26a0ce902"}, "tags": [], "refs": [["total_covid_cases"], ["total_covid_cases"], ["total_covid_cases"], ["covid_location"], ["covid_location"], ["covid_location"]], "sources": [], "metrics": [], "description": "covid cases by state", "columns": {"location_id": {"name": "location_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lat": {"name": "lat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "long": {"name": "long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cases": {"name": "cases", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deaths": {"name": "deaths", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recovered": {"name": "recovered", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#928570"}, "patch_path": "balboa://models/L3_coves/covid_analytics/covid_cases_state.yml", "compiled_path": "target/compiled/balboa/models/L3_coves/covid_analytics/covid_cases_state.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "table", "schema": "l3_covid_analytics", "persist_docs": {"relation": true, "columns": true}, "docs": {"node_color": "#928570"}}, "created_at": 1669235798.8452232, "compiled_code": "with  __dbt__cte__covid_location as (\n\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from BALBOA.l1_starschema_covid19.jhu_covid_19\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1\n),covid_cases as (\n    select * from BALBOA.l2_covid_observations.total_covid_cases\n),\n\nlocation as (\n    select * from __dbt__cte__covid_location\n)\n\nselect\n    location.location_id,\n    location.country,\n    location.state,\n    location.lat,\n    location.long,\n    covid_cases.date,\n    covid_cases.confirmed as cases,\n    covid_cases.deaths,\n    covid_cases.active,\n    covid_cases.recovered\nfrom covid_cases\nleft join location\n    on location.location_id = covid_cases.location_id\nwhere location.state is not null\n    and location.county is not null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.balboa.covid_location", "sql": " __dbt__cte__covid_location as (\n\n\nwith jhu_covid_19 as (\n    select distinct\n        country_region,\n        COALESCE(province_state, 'UNDEFINED') as province_state,\n        COALESCE(county, 'UNDEFINED') as county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        date\n    from BALBOA.l1_starschema_covid19.jhu_covid_19\n),\n\nrank_locations as (\n    select\n        HASH(country_region || '|' || province_state || '|' || county) as snowflake_location_id,\n        md5(cast(coalesce(cast(country_region as TEXT), '') || '-' || coalesce(cast(province_state as TEXT), '') || '-' || coalesce(cast(county as TEXT), '') as TEXT)) as location_id,\n        country_region as country,\n        province_state as state,\n        county,\n        lat,\n        long,\n        iso3166_1,\n        iso3166_2,\n        RANK() over (partition by location_id order by date desc) as rowrank\n    from jhu_covid_19\n)\n\nselect\n    location_id,\n    country,\n    state,\n    county,\n    lat,\n    long,\n    iso3166_1,\n    iso3166_2\nfrom rank_locations\nwhere rowrank = 1\n)"}], "relation_name": "BALBOA.l3_covid_analytics.covid_cases_state"}, "model.balboa.jhu_covid_19": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.starschema_covid19.jhu_covid_19"]}, "config": {"enabled": true, "alias": null, "schema": "l1_starschema_covid19", "database": null, "tags": [], "meta": {"business_owner": "John Doe", "business_analyst": "Jane Doe", "data_steward": "Jake Doe"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l1_starschema_covid19", "fqn": ["balboa", "L1_inlets", "starschema_covid19", "jhu_covid_19"], "unique_id": "model.balboa.jhu_covid_19", "raw_code": "with raw_source as (\n\n    select *\n    from {{ source('starschema_covid19', 'jhu_covid_19') }}\n\n),\n\nfinal as (\n\n    select\n        \"COUNTRY_REGION\" as country_region,\n        \"PROVINCE_STATE\" as province_state,\n        \"COUNTY\" as county,\n        \"FIPS\" as fips,\n        \"DATE\" as date,\n        \"CASE_TYPE\" as case_type,\n        \"CASES\" as cases,\n        \"LONG\" as long,\n        \"LAT\" as lat,\n        \"ISO3166_1\" as iso3166_1,\n        \"ISO3166_2\" as iso3166_2,\n        \"DIFFERENCE\" as difference,\n        \"LAST_UPDATED_DATE\" as last_updated_date,\n        \"LAST_REPORTED_FLAG\" as last_reported_flag\n\n    from raw_source\n\n)\n\nselect * from final", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L1_inlets/starschema_covid19/jhu_covid_19.sql", "original_file_path": "models/L1_inlets/starschema_covid19/jhu_covid_19.sql", "name": "jhu_covid_19", "alias": "jhu_covid_19", "checksum": {"name": "sha256", "checksum": "ce1160eed75d2b2ad5ae31ee6c28e8c74029dfb32f2f8ac04e9265598b9b1ef2"}, "tags": [], "refs": [], "sources": [["starschema_covid19", "jhu_covid_19"]], "metrics": [], "description": "Raw John Hopkins COVID19 data", "columns": {"country_region": {"name": "country_region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "province_state": {"name": "province_state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "county": {"name": "county", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fips": {"name": "fips", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_type": {"name": "case_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cases": {"name": "cases", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "long": {"name": "long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lat": {"name": "lat", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iso3166_1": {"name": "iso3166_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iso3166_2": {"name": "iso3166_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "difference": {"name": "difference", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_date": {"name": "last_updated_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_reported_flag": {"name": "last_reported_flag", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"business_owner": "John Doe", "business_analyst": "Jane Doe", "data_steward": "Jake Doe"}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L1_inlets/starschema_covid19/jhu_covid_19.yml", "compiled_path": "target/compiled/balboa/models/L1_inlets/starschema_covid19/jhu_covid_19.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l1_starschema_covid19", "persist_docs": {"relation": true, "columns": true}, "meta": {"business_owner": "John Doe", "business_analyst": "Jane Doe", "data_steward": "Jake Doe"}}, "created_at": 1669235798.9007246, "compiled_code": "with raw_source as (\n\n    select *\n    from starschema_covid19.public.JHU_COVID_19\n\n),\n\nfinal as (\n\n    select\n        \"COUNTRY_REGION\" as country_region,\n        \"PROVINCE_STATE\" as province_state,\n        \"COUNTY\" as county,\n        \"FIPS\" as fips,\n        \"DATE\" as date,\n        \"CASE_TYPE\" as case_type,\n        \"CASES\" as cases,\n        \"LONG\" as long,\n        \"LAT\" as lat,\n        \"ISO3166_1\" as iso3166_1,\n        \"ISO3166_2\" as iso3166_2,\n        \"DIFFERENCE\" as difference,\n        \"LAST_UPDATED_DATE\" as last_updated_date,\n        \"LAST_REPORTED_FLAG\" as last_reported_flag\n\n    from raw_source\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l1_starschema_covid19.jhu_covid_19"}, "model.balboa._airbyte_raw_personal_loans": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.loans._airbyte_raw_personal_loans"]}, "config": {"enabled": true, "alias": null, "schema": "l1_loans", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l1_loans", "fqn": ["balboa", "L1_inlets", "loans", "_airbyte_raw_personal_loans"], "unique_id": "model.balboa._airbyte_raw_personal_loans", "raw_code": "with raw_source as (\n\n    select *\n    from {{ source('loans', '_airbyte_raw_personal_loans') }}\n\n),\n\nfinal as (\n\n    select\n        _airbyte_data:\"ADDR_STATE\"::varchar as addr_state,\n        _airbyte_data:\"ANNUAL_INC\"::numeric as annual_inc,\n        _airbyte_data:\"COLLECTIONS_12_MTHS_EX_MED\"::varchar as collections_12_mths_ex_med,\n        _airbyte_data:\"COLLECTION_RECOVERY_FEE\"::varchar as collection_recovery_fee,\n        _airbyte_data:\"DELINQ_2YRS\"::varchar as delinq_2yrs,\n        _airbyte_data:\"DESC\"::varchar as desc,\n        _airbyte_data:\"DTI\"::varchar as dti,\n        _airbyte_data:\"EARLIEST_CR_LINE\"::varchar as earliest_cr_line,\n        _airbyte_data:\"EMP_LENGTH\"::varchar as emp_length,\n        _airbyte_data:\"EMP_TITLE\"::varchar as emp_title,\n        _airbyte_data:\"FUNDED_AMNT\"::varchar as funded_amnt,\n        _airbyte_data:\"FUNDED_AMNT_INV\"::varchar as funded_amnt_inv,\n        _airbyte_data:\"GRADE\"::varchar as grade,\n        _airbyte_data:\"HOME_OWNERSHIP\"::varchar as home_ownership,\n        _airbyte_data:\"INITIAL_LIST_STATUS\"::varchar as initial_list_status,\n        _airbyte_data:\"INQ_LAST_6MTHS\"::varchar as inq_last_6mths,\n        _airbyte_data:\"INSTALLMENT\"::varchar as installment,\n        _airbyte_data:\"INT_RATE\"::float as int_rate,\n        _airbyte_data:\"ISSUE_D\"::varchar as issue_d,\n        _airbyte_data:\"LAST_CREDIT_PULL_D\"::varchar as last_credit_pull_d,\n        _airbyte_data:\"LAST_PYMNT_AMNT\"::varchar as last_pymnt_amnt,\n        _airbyte_data:\"LAST_PYMNT_D\"::varchar as last_pymnt_d,\n        _airbyte_data:\"LOAN_AMNT\"::varchar as loan_amnt,\n        _airbyte_data:\"LOAN_ID\"::varchar as loan_id,\n        _airbyte_data:\"LOAN_STATUS\"::varchar as loan_status,\n        _airbyte_data:\"MEMBER_ID\"::varchar as member_id,\n        _airbyte_data:\"MTHS_SINCE_LAST_DELINQ\"::varchar as mths_since_last_delinq,\n        _airbyte_data:\"MTHS_SINCE_LAST_MAJOR_DEROG\"::varchar as mths_since_last_major_derog,\n        _airbyte_data:\"MTHS_SINCE_LAST_RECORD\"::varchar as mths_since_last_record,\n        _airbyte_data:\"NEXT_PYMNT_D\"::varchar as next_pymnt_d,\n        _airbyte_data:\"OPEN_ACC\"::varchar as open_acc,\n        _airbyte_data:\"OUT_PRNCP\"::varchar as out_prncp,\n        _airbyte_data:\"OUT_PRNCP_INV\"::varchar as out_prncp_inv,\n        _airbyte_data:\"POLICY_CODE\"::varchar as policy_code,\n        _airbyte_data:\"PUB_REC\"::varchar as pub_rec,\n        _airbyte_data:\"PURPOSE\"::varchar as purpose,\n        _airbyte_data:\"PYMNT_PLAN\"::varchar as pymnt_plan,\n        _airbyte_data:\"RECOVERIES\"::varchar as recoveries,\n        _airbyte_data:\"REVOL_BAL\"::varchar as revol_bal,\n        _airbyte_data:\"REVOL_UTIL\"::varchar as revol_util,\n        _airbyte_data:\"SUB_GRADE\"::varchar as sub_grade,\n        _airbyte_data:\"TERM\"::varchar as term,\n        _airbyte_data:\"TITLE\"::varchar as title,\n        _airbyte_data:\"TOTAL_ACC\"::varchar as total_acc,\n        _airbyte_data:\"TOTAL_PYMNT\"::varchar as total_pymnt,\n        _airbyte_data:\"TOTAL_PYMNT_INV\"::varchar as total_pymnt_inv,\n        _airbyte_data:\"TOTAL_REC_INT\"::varchar as total_rec_int,\n        _airbyte_data:\"TOTAL_REC_LATE_FEE\"::varchar as total_rec_late_fee,\n        _airbyte_data:\"TOTAL_REC_PRNCP\"::varchar as total_rec_prncp,\n        _airbyte_data:\"URL\"::varchar as url,\n        _airbyte_data:\"VERIFICATION_STATUS\"::varchar as verification_status,\n        _airbyte_data:\"ZIP_CODE\"::varchar as zip_code,\n        \"_AIRBYTE_AB_ID\"::varchar as airbyte_ab_id,\n        \"_AIRBYTE_DATA\"::variant as airbyte_data,\n        \"_AIRBYTE_EMITTED_AT\"::timestamp_tz as airbyte_emitted_at\n\n    from raw_source\n\n)\n\nselect * from final", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L1_inlets/loans/_airbyte_raw_personal_loans.sql", "original_file_path": "models/L1_inlets/loans/_airbyte_raw_personal_loans.sql", "name": "_airbyte_raw_personal_loans", "alias": "_airbyte_raw_personal_loans", "checksum": {"name": "sha256", "checksum": "aa88784c74512bfc40a43f43a53cce53e562d1103903ecced465ae47880ec5af"}, "tags": [], "refs": [], "sources": [["loans", "_airbyte_raw_personal_loans"]], "metrics": [], "description": "Raw data on personal loans", "columns": {"addr_state": {"name": "addr_state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "annual_inc": {"name": "annual_inc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "collections_12_mths_ex_med": {"name": "collections_12_mths_ex_med", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "collection_recovery_fee": {"name": "collection_recovery_fee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delinq_2yrs": {"name": "delinq_2yrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc": {"name": "desc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dti": {"name": "dti", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "earliest_cr_line": {"name": "earliest_cr_line", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emp_length": {"name": "emp_length", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "emp_title": {"name": "emp_title", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funded_amnt": {"name": "funded_amnt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funded_amnt_inv": {"name": "funded_amnt_inv", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grade": {"name": "grade", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_ownership": {"name": "home_ownership", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "initial_list_status": {"name": "initial_list_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inq_last_6mths": {"name": "inq_last_6mths", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "installment": {"name": "installment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "int_rate": {"name": "int_rate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_d": {"name": "issue_d", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_credit_pull_d": {"name": "last_credit_pull_d", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_pymnt_amnt": {"name": "last_pymnt_amnt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_pymnt_d": {"name": "last_pymnt_d", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loan_amnt": {"name": "loan_amnt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loan_id": {"name": "loan_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loan_status": {"name": "loan_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mths_since_last_delinq": {"name": "mths_since_last_delinq", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mths_since_last_major_derog": {"name": "mths_since_last_major_derog", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mths_since_last_record": {"name": "mths_since_last_record", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "next_pymnt_d": {"name": "next_pymnt_d", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "open_acc": {"name": "open_acc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "out_prncp": {"name": "out_prncp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "out_prncp_inv": {"name": "out_prncp_inv", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "policy_code": {"name": "policy_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pub_rec": {"name": "pub_rec", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purpose": {"name": "purpose", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pymnt_plan": {"name": "pymnt_plan", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recoveries": {"name": "recoveries", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revol_bal": {"name": "revol_bal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revol_util": {"name": "revol_util", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_grade": {"name": "sub_grade", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term": {"name": "term", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_acc": {"name": "total_acc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pymnt": {"name": "total_pymnt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pymnt_inv": {"name": "total_pymnt_inv", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_rec_int": {"name": "total_rec_int", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_rec_late_fee": {"name": "total_rec_late_fee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_rec_prncp": {"name": "total_rec_prncp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "verification_status": {"name": "verification_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "airbyte_ab_id": {"name": "airbyte_ab_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "airbyte_data": {"name": "airbyte_data", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "airbyte_emitted_at": {"name": "airbyte_emitted_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L1_inlets/loans/_airbyte_raw_personal_loans.yml", "compiled_path": "target/compiled/balboa/models/L1_inlets/loans/_airbyte_raw_personal_loans.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l1_loans", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.9261327, "compiled_code": "with raw_source as (\n\n    select *\n    from RAW.loans._airbyte_raw_personal_loans\n\n),\n\nfinal as (\n\n    select\n        _airbyte_data:\"ADDR_STATE\"::varchar as addr_state,\n        _airbyte_data:\"ANNUAL_INC\"::numeric as annual_inc,\n        _airbyte_data:\"COLLECTIONS_12_MTHS_EX_MED\"::varchar as collections_12_mths_ex_med,\n        _airbyte_data:\"COLLECTION_RECOVERY_FEE\"::varchar as collection_recovery_fee,\n        _airbyte_data:\"DELINQ_2YRS\"::varchar as delinq_2yrs,\n        _airbyte_data:\"DESC\"::varchar as desc,\n        _airbyte_data:\"DTI\"::varchar as dti,\n        _airbyte_data:\"EARLIEST_CR_LINE\"::varchar as earliest_cr_line,\n        _airbyte_data:\"EMP_LENGTH\"::varchar as emp_length,\n        _airbyte_data:\"EMP_TITLE\"::varchar as emp_title,\n        _airbyte_data:\"FUNDED_AMNT\"::varchar as funded_amnt,\n        _airbyte_data:\"FUNDED_AMNT_INV\"::varchar as funded_amnt_inv,\n        _airbyte_data:\"GRADE\"::varchar as grade,\n        _airbyte_data:\"HOME_OWNERSHIP\"::varchar as home_ownership,\n        _airbyte_data:\"INITIAL_LIST_STATUS\"::varchar as initial_list_status,\n        _airbyte_data:\"INQ_LAST_6MTHS\"::varchar as inq_last_6mths,\n        _airbyte_data:\"INSTALLMENT\"::varchar as installment,\n        _airbyte_data:\"INT_RATE\"::float as int_rate,\n        _airbyte_data:\"ISSUE_D\"::varchar as issue_d,\n        _airbyte_data:\"LAST_CREDIT_PULL_D\"::varchar as last_credit_pull_d,\n        _airbyte_data:\"LAST_PYMNT_AMNT\"::varchar as last_pymnt_amnt,\n        _airbyte_data:\"LAST_PYMNT_D\"::varchar as last_pymnt_d,\n        _airbyte_data:\"LOAN_AMNT\"::varchar as loan_amnt,\n        _airbyte_data:\"LOAN_ID\"::varchar as loan_id,\n        _airbyte_data:\"LOAN_STATUS\"::varchar as loan_status,\n        _airbyte_data:\"MEMBER_ID\"::varchar as member_id,\n        _airbyte_data:\"MTHS_SINCE_LAST_DELINQ\"::varchar as mths_since_last_delinq,\n        _airbyte_data:\"MTHS_SINCE_LAST_MAJOR_DEROG\"::varchar as mths_since_last_major_derog,\n        _airbyte_data:\"MTHS_SINCE_LAST_RECORD\"::varchar as mths_since_last_record,\n        _airbyte_data:\"NEXT_PYMNT_D\"::varchar as next_pymnt_d,\n        _airbyte_data:\"OPEN_ACC\"::varchar as open_acc,\n        _airbyte_data:\"OUT_PRNCP\"::varchar as out_prncp,\n        _airbyte_data:\"OUT_PRNCP_INV\"::varchar as out_prncp_inv,\n        _airbyte_data:\"POLICY_CODE\"::varchar as policy_code,\n        _airbyte_data:\"PUB_REC\"::varchar as pub_rec,\n        _airbyte_data:\"PURPOSE\"::varchar as purpose,\n        _airbyte_data:\"PYMNT_PLAN\"::varchar as pymnt_plan,\n        _airbyte_data:\"RECOVERIES\"::varchar as recoveries,\n        _airbyte_data:\"REVOL_BAL\"::varchar as revol_bal,\n        _airbyte_data:\"REVOL_UTIL\"::varchar as revol_util,\n        _airbyte_data:\"SUB_GRADE\"::varchar as sub_grade,\n        _airbyte_data:\"TERM\"::varchar as term,\n        _airbyte_data:\"TITLE\"::varchar as title,\n        _airbyte_data:\"TOTAL_ACC\"::varchar as total_acc,\n        _airbyte_data:\"TOTAL_PYMNT\"::varchar as total_pymnt,\n        _airbyte_data:\"TOTAL_PYMNT_INV\"::varchar as total_pymnt_inv,\n        _airbyte_data:\"TOTAL_REC_INT\"::varchar as total_rec_int,\n        _airbyte_data:\"TOTAL_REC_LATE_FEE\"::varchar as total_rec_late_fee,\n        _airbyte_data:\"TOTAL_REC_PRNCP\"::varchar as total_rec_prncp,\n        _airbyte_data:\"URL\"::varchar as url,\n        _airbyte_data:\"VERIFICATION_STATUS\"::varchar as verification_status,\n        _airbyte_data:\"ZIP_CODE\"::varchar as zip_code,\n        \"_AIRBYTE_AB_ID\"::varchar as airbyte_ab_id,\n        \"_AIRBYTE_DATA\"::variant as airbyte_data,\n        \"_AIRBYTE_EMITTED_AT\"::timestamp_tz as airbyte_emitted_at\n\n    from raw_source\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l1_loans._airbyte_raw_personal_loans"}, "model.balboa.warehouse_metering_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.account_usage.warehouse_metering_history"]}, "config": {"enabled": true, "alias": null, "schema": "l1_account_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l1_account_usage", "fqn": ["balboa", "L1_inlets", "account_usage", "warehouse_metering_history"], "unique_id": "model.balboa.warehouse_metering_history", "raw_code": "with raw_source as (\n\n    select *\n    from {{ source('account_usage', 'warehouse_metering_history') }}\n\n),\n\nfinal as (\n\n    select\n        \"START_TIME\" as start_time,\n        \"END_TIME\" as end_time,\n        \"WAREHOUSE_ID\" as warehouse_id,\n        \"WAREHOUSE_NAME\" as warehouse_name,\n        \"CREDITS_USED\" as credits_used,\n        \"CREDITS_USED_COMPUTE\" as credits_used_compute,\n        \"CREDITS_USED_CLOUD_SERVICES\" as credits_used_cloud_services\n\n    from raw_source\n\n)\n\n\nselect * from final", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L1_inlets/account_usage/warehouse_metering_history.sql", "original_file_path": "models/L1_inlets/account_usage/warehouse_metering_history.sql", "name": "warehouse_metering_history", "alias": "warehouse_metering_history", "checksum": {"name": "sha256", "checksum": "c08437e7c3e1509b7cd902d54ad31a760501cdc2ff06a472ff953c0b4753ca07"}, "tags": [], "refs": [], "sources": [["account_usage", "warehouse_metering_history"]], "metrics": [], "description": "Warehouse metering history raw data", "columns": {"start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_id": {"name": "warehouse_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_compute": {"name": "credits_used_compute", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L1_inlets/account_usage/warehouse_metering_history.yml", "compiled_path": "target/compiled/balboa/models/L1_inlets/account_usage/warehouse_metering_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l1_account_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.976504, "compiled_code": "with raw_source as (\n\n    select *\n    from snowflake.account_usage.WAREHOUSE_METERING_HISTORY\n\n),\n\nfinal as (\n\n    select\n        \"START_TIME\" as start_time,\n        \"END_TIME\" as end_time,\n        \"WAREHOUSE_ID\" as warehouse_id,\n        \"WAREHOUSE_NAME\" as warehouse_name,\n        \"CREDITS_USED\" as credits_used,\n        \"CREDITS_USED_COMPUTE\" as credits_used_compute,\n        \"CREDITS_USED_CLOUD_SERVICES\" as credits_used_cloud_services\n\n    from raw_source\n\n)\n\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l1_account_usage.warehouse_metering_history"}, "model.balboa.query_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.account_usage.query_history"]}, "config": {"enabled": true, "alias": null, "schema": "l1_account_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l1_account_usage", "fqn": ["balboa", "L1_inlets", "account_usage", "query_history"], "unique_id": "model.balboa.query_history", "raw_code": "with raw_source as (\n\n    select *\n    from {{ source('account_usage', 'query_history') }}\n\n),\n\nfinal as (\n\n    select\n        \"QUERY_ID\" as query_id,\n        \"QUERY_TEXT\" as query_text,\n        \"DATABASE_ID\" as database_id,\n        \"DATABASE_NAME\" as database_name,\n        \"SCHEMA_ID\" as schema_id,\n        \"SCHEMA_NAME\" as schema_name,\n        \"QUERY_TYPE\" as query_type,\n        \"SESSION_ID\" as session_id,\n        \"USER_NAME\" as user_name,\n        \"ROLE_NAME\" as role_name,\n        \"WAREHOUSE_ID\" as warehouse_id,\n        \"WAREHOUSE_NAME\" as warehouse_name,\n        \"WAREHOUSE_SIZE\" as warehouse_size,\n        \"WAREHOUSE_TYPE\" as warehouse_type,\n        \"CLUSTER_NUMBER\" as cluster_number,\n        \"QUERY_TAG\" as query_tag,\n        \"EXECUTION_STATUS\" as execution_status,\n        \"ERROR_CODE\" as error_code,\n        \"ERROR_MESSAGE\" as error_message,\n        \"START_TIME\" as start_time,\n        \"END_TIME\" as end_time,\n        \"TOTAL_ELAPSED_TIME\" as total_elapsed_time,\n        \"BYTES_SCANNED\" as bytes_scanned,\n        \"PERCENTAGE_SCANNED_FROM_CACHE\" as percentage_scanned_from_cache,\n        \"BYTES_WRITTEN\" as bytes_written,\n        \"BYTES_WRITTEN_TO_RESULT\" as bytes_written_to_result,\n        \"BYTES_READ_FROM_RESULT\" as bytes_read_from_result,\n        \"ROWS_PRODUCED\" as rows_produced,\n        \"ROWS_INSERTED\" as rows_inserted,\n        \"ROWS_UPDATED\" as rows_updated,\n        \"ROWS_DELETED\" as rows_deleted,\n        \"ROWS_UNLOADED\" as rows_unloaded,\n        \"BYTES_DELETED\" as bytes_deleted,\n        \"PARTITIONS_SCANNED\" as partitions_scanned,\n        \"PARTITIONS_TOTAL\" as partitions_total,\n        \"BYTES_SPILLED_TO_LOCAL_STORAGE\" as bytes_spilled_to_local_storage,\n        \"BYTES_SPILLED_TO_REMOTE_STORAGE\" as bytes_spilled_to_remote_storage,\n        \"BYTES_SENT_OVER_THE_NETWORK\" as bytes_sent_over_the_network,\n        \"COMPILATION_TIME\" as compilation_time,\n        \"EXECUTION_TIME\" as execution_time,\n        \"QUEUED_PROVISIONING_TIME\" as queued_provisioning_time,\n        \"QUEUED_REPAIR_TIME\" as queued_repair_time,\n        \"QUEUED_OVERLOAD_TIME\" as queued_overload_time,\n        \"TRANSACTION_BLOCKED_TIME\" as transaction_blocked_time,\n        \"OUTBOUND_DATA_TRANSFER_CLOUD\" as outbound_data_transfer_cloud,\n        \"OUTBOUND_DATA_TRANSFER_REGION\" as outbound_data_transfer_region,\n        \"OUTBOUND_DATA_TRANSFER_BYTES\" as outbound_data_transfer_bytes,\n        \"INBOUND_DATA_TRANSFER_CLOUD\" as inbound_data_transfer_cloud,\n        \"INBOUND_DATA_TRANSFER_REGION\" as inbound_data_transfer_region,\n        \"INBOUND_DATA_TRANSFER_BYTES\" as inbound_data_transfer_bytes,\n        \"LIST_EXTERNAL_FILES_TIME\" as list_external_files_time,\n        \"CREDITS_USED_CLOUD_SERVICES\" as credits_used_cloud_services,\n        \"RELEASE_VERSION\" as release_version,\n        \"EXTERNAL_FUNCTION_TOTAL_INVOCATIONS\" as external_function_total_invocations,\n        \"EXTERNAL_FUNCTION_TOTAL_SENT_ROWS\" as external_function_total_sent_rows,\n        \"EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS\" as external_function_total_received_rows,\n        \"EXTERNAL_FUNCTION_TOTAL_SENT_BYTES\" as external_function_total_sent_bytes,\n        \"EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES\" as external_function_total_received_bytes,\n        \"QUERY_LOAD_PERCENT\" as query_load_percent,\n        \"IS_CLIENT_GENERATED_STATEMENT\" as is_client_generated_statement\n\n    from raw_source\n\n)\n\nselect * from final", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L1_inlets/account_usage/query_history.sql", "original_file_path": "models/L1_inlets/account_usage/query_history.sql", "name": "query_history", "alias": "query_history", "checksum": {"name": "sha256", "checksum": "125ba3c046fe55eb3ef41cad677c5420b9a69e9f56bb65b2691f77d760939577"}, "tags": [], "refs": [], "sources": [["account_usage", "query_history"]], "metrics": [], "description": "Query history raw data", "columns": {"query_id": {"name": "query_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_text": {"name": "query_text", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_id": {"name": "database_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_id": {"name": "schema_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_type": {"name": "query_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role_name": {"name": "role_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_id": {"name": "warehouse_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_size": {"name": "warehouse_size", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_type": {"name": "warehouse_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cluster_number": {"name": "cluster_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_tag": {"name": "query_tag", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_status": {"name": "execution_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_elapsed_time": {"name": "total_elapsed_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_scanned": {"name": "bytes_scanned", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "percentage_scanned_from_cache": {"name": "percentage_scanned_from_cache", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_written": {"name": "bytes_written", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_written_to_result": {"name": "bytes_written_to_result", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_read_from_result": {"name": "bytes_read_from_result", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_produced": {"name": "rows_produced", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_inserted": {"name": "rows_inserted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_updated": {"name": "rows_updated", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_deleted": {"name": "rows_deleted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_unloaded": {"name": "rows_unloaded", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_deleted": {"name": "bytes_deleted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partitions_scanned": {"name": "partitions_scanned", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partitions_total": {"name": "partitions_total", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_spilled_to_local_storage": {"name": "bytes_spilled_to_local_storage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_spilled_to_remote_storage": {"name": "bytes_spilled_to_remote_storage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_sent_over_the_network": {"name": "bytes_sent_over_the_network", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compilation_time": {"name": "compilation_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_time": {"name": "execution_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_provisioning_time": {"name": "queued_provisioning_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_repair_time": {"name": "queued_repair_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_overload_time": {"name": "queued_overload_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_blocked_time": {"name": "transaction_blocked_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_cloud": {"name": "outbound_data_transfer_cloud", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_region": {"name": "outbound_data_transfer_region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_bytes": {"name": "outbound_data_transfer_bytes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_cloud": {"name": "inbound_data_transfer_cloud", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_region": {"name": "inbound_data_transfer_region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_bytes": {"name": "inbound_data_transfer_bytes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_external_files_time": {"name": "list_external_files_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "release_version": {"name": "release_version", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_invocations": {"name": "external_function_total_invocations", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_sent_rows": {"name": "external_function_total_sent_rows", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_received_rows": {"name": "external_function_total_received_rows", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_sent_bytes": {"name": "external_function_total_sent_bytes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_received_bytes": {"name": "external_function_total_received_bytes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_load_percent": {"name": "query_load_percent", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_client_generated_statement": {"name": "is_client_generated_statement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L1_inlets/account_usage/query_history.yml", "compiled_path": "target/compiled/balboa/models/L1_inlets/account_usage/query_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l1_account_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.9531527, "compiled_code": "with raw_source as (\n\n    select *\n    from snowflake.account_usage.QUERY_HISTORY\n\n),\n\nfinal as (\n\n    select\n        \"QUERY_ID\" as query_id,\n        \"QUERY_TEXT\" as query_text,\n        \"DATABASE_ID\" as database_id,\n        \"DATABASE_NAME\" as database_name,\n        \"SCHEMA_ID\" as schema_id,\n        \"SCHEMA_NAME\" as schema_name,\n        \"QUERY_TYPE\" as query_type,\n        \"SESSION_ID\" as session_id,\n        \"USER_NAME\" as user_name,\n        \"ROLE_NAME\" as role_name,\n        \"WAREHOUSE_ID\" as warehouse_id,\n        \"WAREHOUSE_NAME\" as warehouse_name,\n        \"WAREHOUSE_SIZE\" as warehouse_size,\n        \"WAREHOUSE_TYPE\" as warehouse_type,\n        \"CLUSTER_NUMBER\" as cluster_number,\n        \"QUERY_TAG\" as query_tag,\n        \"EXECUTION_STATUS\" as execution_status,\n        \"ERROR_CODE\" as error_code,\n        \"ERROR_MESSAGE\" as error_message,\n        \"START_TIME\" as start_time,\n        \"END_TIME\" as end_time,\n        \"TOTAL_ELAPSED_TIME\" as total_elapsed_time,\n        \"BYTES_SCANNED\" as bytes_scanned,\n        \"PERCENTAGE_SCANNED_FROM_CACHE\" as percentage_scanned_from_cache,\n        \"BYTES_WRITTEN\" as bytes_written,\n        \"BYTES_WRITTEN_TO_RESULT\" as bytes_written_to_result,\n        \"BYTES_READ_FROM_RESULT\" as bytes_read_from_result,\n        \"ROWS_PRODUCED\" as rows_produced,\n        \"ROWS_INSERTED\" as rows_inserted,\n        \"ROWS_UPDATED\" as rows_updated,\n        \"ROWS_DELETED\" as rows_deleted,\n        \"ROWS_UNLOADED\" as rows_unloaded,\n        \"BYTES_DELETED\" as bytes_deleted,\n        \"PARTITIONS_SCANNED\" as partitions_scanned,\n        \"PARTITIONS_TOTAL\" as partitions_total,\n        \"BYTES_SPILLED_TO_LOCAL_STORAGE\" as bytes_spilled_to_local_storage,\n        \"BYTES_SPILLED_TO_REMOTE_STORAGE\" as bytes_spilled_to_remote_storage,\n        \"BYTES_SENT_OVER_THE_NETWORK\" as bytes_sent_over_the_network,\n        \"COMPILATION_TIME\" as compilation_time,\n        \"EXECUTION_TIME\" as execution_time,\n        \"QUEUED_PROVISIONING_TIME\" as queued_provisioning_time,\n        \"QUEUED_REPAIR_TIME\" as queued_repair_time,\n        \"QUEUED_OVERLOAD_TIME\" as queued_overload_time,\n        \"TRANSACTION_BLOCKED_TIME\" as transaction_blocked_time,\n        \"OUTBOUND_DATA_TRANSFER_CLOUD\" as outbound_data_transfer_cloud,\n        \"OUTBOUND_DATA_TRANSFER_REGION\" as outbound_data_transfer_region,\n        \"OUTBOUND_DATA_TRANSFER_BYTES\" as outbound_data_transfer_bytes,\n        \"INBOUND_DATA_TRANSFER_CLOUD\" as inbound_data_transfer_cloud,\n        \"INBOUND_DATA_TRANSFER_REGION\" as inbound_data_transfer_region,\n        \"INBOUND_DATA_TRANSFER_BYTES\" as inbound_data_transfer_bytes,\n        \"LIST_EXTERNAL_FILES_TIME\" as list_external_files_time,\n        \"CREDITS_USED_CLOUD_SERVICES\" as credits_used_cloud_services,\n        \"RELEASE_VERSION\" as release_version,\n        \"EXTERNAL_FUNCTION_TOTAL_INVOCATIONS\" as external_function_total_invocations,\n        \"EXTERNAL_FUNCTION_TOTAL_SENT_ROWS\" as external_function_total_sent_rows,\n        \"EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS\" as external_function_total_received_rows,\n        \"EXTERNAL_FUNCTION_TOTAL_SENT_BYTES\" as external_function_total_sent_bytes,\n        \"EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES\" as external_function_total_received_bytes,\n        \"QUERY_LOAD_PERCENT\" as query_load_percent,\n        \"IS_CLIENT_GENERATED_STATEMENT\" as is_client_generated_statement\n\n    from raw_source\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l1_account_usage.query_history"}, "model.balboa.pipe_usage_history": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.account_usage.pipe_usage_history"]}, "config": {"enabled": true, "alias": null, "schema": "l1_account_usage", "database": null, "tags": [], "meta": {"owner": "@alice", "model_maturity": "in dev"}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l1_account_usage", "fqn": ["balboa", "L1_inlets", "account_usage", "pipe_usage_history"], "unique_id": "model.balboa.pipe_usage_history", "raw_code": "with raw_source as (\n\n    select * from {{ source('account_usage', 'pipe_usage_history') }}\n\n),\n\nfinal as (\n\n    select\n        \"PIPE_ID\" as pipe_id,\n        \"PIPE_NAME\" as pipe_name,\n        \"START_TIME\" as start_time,\n        \"END_TIME\" as end_time,\n        \"CREDITS_USED\" as credits_used,\n        \"BYTES_INSERTED\" as bytes_inserted,\n        \"FILES_INSERTED\" as files_inserted\n\n    from raw_source\n\n)\n\nselect * from final", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L1_inlets/account_usage/pipe_usage_history.sql", "original_file_path": "models/L1_inlets/account_usage/pipe_usage_history.sql", "name": "pipe_usage_history", "alias": "pipe_usage_history", "checksum": {"name": "sha256", "checksum": "bb4de350b5ba88cb080a0188c2d754c3b066c699356ddea8615afd7b1611b80f"}, "tags": [], "refs": [], "sources": [["account_usage", "pipe_usage_history"]], "metrics": [], "description": "Pipe usage history raw data", "columns": {"pipe_id": {"name": "pipe_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipe_name": {"name": "pipe_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_inserted": {"name": "bytes_inserted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "files_inserted": {"name": "files_inserted", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@alice", "model_maturity": "in dev"}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L1_inlets/account_usage/pipe_usage_history.yml", "compiled_path": "target/compiled/balboa/models/L1_inlets/account_usage/pipe_usage_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l1_account_usage", "persist_docs": {"relation": true, "columns": true}, "meta": {"owner": "@alice", "model_maturity": "in dev"}}, "created_at": 1669235798.9698822, "compiled_code": "with raw_source as (\n\n    select * from snowflake.account_usage.PIPE_USAGE_HISTORY\n\n),\n\nfinal as (\n\n    select\n        \"PIPE_ID\" as pipe_id,\n        \"PIPE_NAME\" as pipe_name,\n        \"START_TIME\" as start_time,\n        \"END_TIME\" as end_time,\n        \"CREDITS_USED\" as credits_used,\n        \"BYTES_INSERTED\" as bytes_inserted,\n        \"FILES_INSERTED\" as files_inserted\n\n    from raw_source\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l1_account_usage.pipe_usage_history"}, "model.balboa.storage_usage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.account_usage.storage_usage"]}, "config": {"enabled": true, "alias": null, "schema": "l1_account_usage", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l1_account_usage", "fqn": ["balboa", "L1_inlets", "account_usage", "storage_usage"], "unique_id": "model.balboa.storage_usage", "raw_code": "with raw_source as (\n\n    select *\n    from {{ source('account_usage', 'storage_usage') }}\n\n),\n\nfinal as (\n\n    select\n        \"USAGE_DATE\" as usage_date,\n        \"STORAGE_BYTES\" as storage_bytes,\n        \"STAGE_BYTES\" as stage_bytes,\n        \"FAILSAFE_BYTES\" as failsafe_bytes\n\n    from raw_source\n\n)\n\nselect * from final", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L1_inlets/account_usage/storage_usage.sql", "original_file_path": "models/L1_inlets/account_usage/storage_usage.sql", "name": "storage_usage", "alias": "storage_usage", "checksum": {"name": "sha256", "checksum": "fd7d3b5697944a2480c9caf783e61567bc0b8b8d272a41d4f36be66a1fc906fe"}, "tags": [], "refs": [], "sources": [["account_usage", "storage_usage"]], "metrics": [], "description": "Storage usage raw data", "columns": {"usage_date": {"name": "usage_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "storage_bytes": {"name": "storage_bytes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_bytes": {"name": "stage_bytes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failsafe_bytes": {"name": "failsafe_bytes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L1_inlets/account_usage/storage_usage.yml", "compiled_path": "target/compiled/balboa/models/L1_inlets/account_usage/storage_usage.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l1_account_usage", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.9578705, "compiled_code": "with raw_source as (\n\n    select *\n    from snowflake.account_usage.STORAGE_USAGE\n\n),\n\nfinal as (\n\n    select\n        \"USAGE_DATE\" as usage_date,\n        \"STORAGE_BYTES\" as storage_bytes,\n        \"STAGE_BYTES\" as stage_bytes,\n        \"FAILSAFE_BYTES\" as failsafe_bytes\n\n    from raw_source\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l1_account_usage.storage_usage"}, "model.balboa._airbyte_raw_country_populations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy"], "nodes": ["source.balboa.raw._airbyte_raw_country_populations"]}, "config": {"enabled": true, "alias": null, "schema": "l1_country_data", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "l1_country_data", "fqn": ["balboa", "L1_inlets", "country_data", "_airbyte_raw_country_populations"], "unique_id": "model.balboa._airbyte_raw_country_populations", "raw_code": "with raw_source as (\n\n    select\n        parse_json(replace(_airbyte_data::string, '\"NaN\"', 'null')) as airbyte_data_clean,\n        *\n    from {{ source('raw', '_airbyte_raw_country_populations') }}\n\n),\n\nfinal as (\n\n    select\n        airbyte_data_clean:\"Country Code\"::varchar as country_code,\n        airbyte_data_clean:\"Country Name\"::varchar as country_name,\n        airbyte_data_clean:\"Value\"::varchar as value,\n        airbyte_data_clean:\"Year\"::varchar as year,\n        \"_AIRBYTE_AB_ID\" as _airbyte_ab_id,\n        \"_AIRBYTE_EMITTED_AT\" as _airbyte_emitted_at\n\n    from raw_source\n\n)\n\nselect * from final\norder by country_code", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L1_inlets/country_data/_airbyte_raw_country_populations.sql", "original_file_path": "models/L1_inlets/country_data/_airbyte_raw_country_populations.sql", "name": "_airbyte_raw_country_populations", "alias": "_airbyte_raw_country_populations", "checksum": {"name": "sha256", "checksum": "6e2376a2ae431ad35ea2d1e7408d69e3c901285aa364da74e855d814b275ac4a"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_country_populations"]], "metrics": [], "description": "Raw population information from Github Datasets repository", "columns": {"country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_name": {"name": "country_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_airbyte_ab_id": {"name": "_airbyte_ab_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_airbyte_emitted_at": {"name": "_airbyte_emitted_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://models/L1_inlets/country_data/_airbyte_raw_country_populations.yml", "compiled_path": "target/compiled/balboa/models/L1_inlets/country_data/_airbyte_raw_country_populations.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "materialized": "view", "schema": "l1_country_data", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.9819221, "compiled_code": "with raw_source as (\n\n    select\n        parse_json(replace(_airbyte_data::string, '\"NaN\"', 'null')) as airbyte_data_clean,\n        *\n    from raw.raw._AIRBYTE_RAW_COUNTRY_POPULATIONS\n\n),\n\nfinal as (\n\n    select\n        airbyte_data_clean:\"Country Code\"::varchar as country_code,\n        airbyte_data_clean:\"Country Name\"::varchar as country_name,\n        airbyte_data_clean:\"Value\"::varchar as value,\n        airbyte_data_clean:\"Year\"::varchar as year,\n        \"_AIRBYTE_AB_ID\" as _airbyte_ab_id,\n        \"_AIRBYTE_EMITTED_AT\" as _airbyte_emitted_at\n\n    from raw_source\n\n)\n\nselect * from final\norder by country_code", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.l1_country_data._airbyte_raw_country_populations"}, "snapshot.balboa.snp_jhu_dashboard_covid_19_global": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["source.balboa.starschema_covid19.jhu_dashboard_covid_19_global"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ifnull(country_region,'') || '|' || ifnull(province_state,'') || '|' || ifnull(county,'') || '|' || to_varchar(date) || last_update_date", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#881C11"}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "raw", "updated_at": "last_update_date", "post-hook": [], "pre-hook": []}, "database": "raw", "schema": "snapshots", "fqn": ["balboa", "inlets", "starschema_covid19", "snp_jhu_dashboard_covid_19_global", "snp_jhu_dashboard_covid_19_global"], "unique_id": "snapshot.balboa.snp_jhu_dashboard_covid_19_global", "raw_code": "\n{{\n    config(\n        unique_key=\"ifnull(country_region,'') || '|' || ifnull(province_state,'') || '|' || ifnull(county,'') || '|' || to_varchar(date) || last_update_date\",\n        strategy='timestamp',\n        updated_at='last_update_date'\n    )\n}}\n\n    select distinct\n        country_region,\n        province_state,\n        county,\n        fips,\n        date,\n        active,\n        people_tested,\n        confirmed,\n        people_hospitalized,\n        deaths,\n        recovered,\n        incident_rate,\n        testing_rate,\n        hospitalization_rate,\n        long,\n        lat,\n        iso3166_1,\n        iso3166_2,\n        last_update_date\n    from\n        {{ source('starschema_covid19', 'jhu_dashboard_covid_19_global') }}\n", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "inlets/starschema_covid19/snp_jhu_dashboard_covid_19_global.sql", "original_file_path": "snapshots/inlets/starschema_covid19/snp_jhu_dashboard_covid_19_global.sql", "name": "snp_jhu_dashboard_covid_19_global", "alias": "snp_jhu_dashboard_covid_19_global", "checksum": {"name": "sha256", "checksum": "a6c59be7c49959f222485ae59c179475f9c36fc7907e38ee01c7fbd95bfd8c5c"}, "tags": [], "refs": [], "sources": [["starschema_covid19", "jhu_dashboard_covid_19_global"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#881C11"}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"node_color": "#881C11"}, "target_database": "raw", "target_schema": "snapshots", "unique_key": "ifnull(country_region,'') || '|' || ifnull(province_state,'') || '|' || ifnull(county,'') || '|' || to_varchar(date) || last_update_date", "strategy": "timestamp", "updated_at": "last_update_date"}, "created_at": 1669235798.314241, "compiled_code": "\n\n\n    select distinct\n        country_region,\n        province_state,\n        county,\n        fips,\n        date,\n        active,\n        people_tested,\n        confirmed,\n        people_hospitalized,\n        deaths,\n        recovered,\n        incident_rate,\n        testing_rate,\n        hospitalization_rate,\n        long,\n        lat,\n        iso3166_1,\n        iso3166_2,\n        last_update_date\n    from\n        starschema_covid19.public.JHU_DASHBOARD_COVID_19_GLOBAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "raw.snapshots.snp_jhu_dashboard_covid_19_global"}, "seed.balboa.state_codes": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "BALBOA", "schema": "seeds", "fqn": ["balboa", "state_codes"], "unique_id": "seed.balboa.state_codes", "raw_code": "", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "state_codes.csv", "original_file_path": "seeds/state_codes.csv", "name": "state_codes", "alias": "state_codes", "checksum": {"name": "sha256", "checksum": "eda0c5839ecfccb47931ca28e9d2b9aab8ed46934c030d3fb33f7f77365e8792"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Lookup table used to convert between state abbreviations and state names", "columns": {"state_name": {"name": "state_name", "description": "Name of the state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state_code": {"name": "state_code", "description": "Two letter abbreviation for the state", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://seeds/state_codes.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "quote_columns": false, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235799.0025454, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.seeds.state_codes"}, "seed.balboa.covid_cases_expected_values": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "BALBOA", "schema": "seeds", "fqn": ["balboa", "test_values", "covid_cases_expected_values"], "unique_id": "seed.balboa.covid_cases_expected_values", "raw_code": "", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "test_values/covid_cases_expected_values.csv", "original_file_path": "seeds/test_values/covid_cases_expected_values.csv", "name": "covid_cases_expected_values", "alias": "covid_cases_expected_values", "checksum": {"name": "sha256", "checksum": "c7e886c3d20b009650e8a27c93b114959dcaadc2bffe43f6a2e59555b8e6d8cd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "seeds", "quote_columns": false, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669235798.3427901, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.seeds.covid_cases_expected_values"}, "model.metrics.dbt_metrics_default_calendar": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.metrics.metric_date_spine", "macro.dbt.date_trunc", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_metrics", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "dbt_metrics", "fqn": ["metrics", "dbt_metrics_default_calendar"], "unique_id": "model.metrics.dbt_metrics_default_calendar", "raw_code": "{{ config(materialized='table') }}\n\nwith days as (\n    {{ metrics.metric_date_spine(\n    datepart=\"day\",\n    start_date=\"cast('1990-01-01' as date)\",\n    end_date=\"cast('2030-01-01' as date)\"\n   )\n    }}\n),\n\nfinal as (\n    select \n        cast(date_day as date) as date_day,\n        cast({{ date_trunc('week', 'date_day') }} as date) as date_week,\n        cast({{ date_trunc('month', 'date_day') }} as date) as date_month,\n        cast({{ date_trunc('quarter', 'date_day') }} as date) as date_quarter,\n        cast({{ date_trunc('year', 'date_day') }} as date) as date_year\n    from days\n)\n\nselect * from final", "language": "sql", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "dbt_metrics_default_calendar.sql", "original_file_path": "models/dbt_metrics_default_calendar.sql", "name": "dbt_metrics_default_calendar", "alias": "dbt_metrics_default_calendar", "checksum": {"name": "sha256", "checksum": "ceff0a953c0648d9c90dcface95c193f7a40f29bce75a902581315cd35f7141a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/metrics/models/dbt_metrics_default_calendar.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "schema": "dbt_metrics"}, "created_at": 1669235798.6957617, "compiled_code": "\n\nwith days as (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 14610\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('1990-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2030-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\n\nfinal as (\n    select \n        cast(date_day as date) as date_day,\n        cast(date_trunc('week', date_day) as date) as date_week,\n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('quarter', date_day) as date) as date_quarter,\n        cast(date_trunc('year', date_day) as date) as date_year\n    from days\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.dbt_metrics.dbt_metrics_default_calendar"}, "test.balboa.not_null_base_cases_cases.a7292b3eca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cases", "model": "{{ get_where_subquery(ref('base_cases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.balboa.ref", "macro.dbt.get_where_subquery"], "nodes": ["model.balboa.base_cases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["balboa", "L2_bays", "covid_observations", "not_null_base_cases_cases"], "unique_id": "test.balboa.not_null_base_cases_cases.a7292b3eca", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "not_null_base_cases_cases.sql", "original_file_path": "models/L2_bays/covid_observations/base_cases.yml", "name": "not_null_base_cases_cases", "alias": "not_null_base_cases_cases", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["base_cases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/balboa/models/L2_bays/covid_observations/base_cases.yml/not_null_base_cases_cases.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235798.788769, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom BALBOA.l2_covid_observations.base_cases\nwhere cases is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "BALBOA.dbt_test__audit.not_null_base_cases_cases", "column_name": "cases", "file_key_name": "models.base_cases"}, "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__critical_path')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__critical_path_node_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__critical_path_node_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__critical_path_node_id", "alias": "unique_fct_dbt__critical_path_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__critical_path"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.06317, "column_name": "node_id", "file_key_name": "models.fct_dbt__critical_path"}, "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__critical_path')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__critical_path_node_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__critical_path_node_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__critical_path_node_id", "alias": "not_null_fct_dbt__critical_path_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__critical_path"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.065678, "column_name": "node_id", "file_key_name": "models.fct_dbt__critical_path"}, "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__latest_full_model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__latest_full_model_executions_node_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__latest_full_model_executions_node_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__latest_full_model_executions_node_id", "alias": "unique_fct_dbt__latest_full_model_executions_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__latest_full_model_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.067761, "column_name": "node_id", "file_key_name": "models.fct_dbt__latest_full_model_executions"}, "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__latest_full_model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__latest_full_model_executions_node_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__latest_full_model_executions_node_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__latest_full_model_executions_node_id", "alias": "not_null_fct_dbt__latest_full_model_executions_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__latest_full_model_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0698452, "column_name": "node_id", "file_key_name": "models.fct_dbt__latest_full_model_executions"}, "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "model_execution_id", "model": "{{ get_where_subquery(ref('fct_dbt__model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__model_executions_model_execution_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__model_executions_model_execution_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__model_executions_model_execution_id", "alias": "unique_fct_dbt__model_executions_model_execution_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__model_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.071897, "column_name": "model_execution_id", "file_key_name": "models.fct_dbt__model_executions"}, "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "model_execution_id", "model": "{{ get_where_subquery(ref('fct_dbt__model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__model_executions_model_execution_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__model_executions_model_execution_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__model_executions_model_execution_id", "alias": "not_null_fct_dbt__model_executions_model_execution_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__model_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.073971, "column_name": "model_execution_id", "file_key_name": "models.fct_dbt__model_executions"}, "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "command_invocation_id", "model": "{{ get_where_subquery(ref('fct_dbt__run_results')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__run_results_command_invocation_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__run_results_command_invocation_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__run_results_command_invocation_id", "alias": "unique_fct_dbt__run_results_command_invocation_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__run_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.076217, "column_name": "command_invocation_id", "file_key_name": "models.fct_dbt__run_results"}, "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "command_invocation_id", "model": "{{ get_where_subquery(ref('fct_dbt__run_results')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__run_results_command_invocation_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__run_results_command_invocation_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__run_results_command_invocation_id", "alias": "not_null_fct_dbt__run_results_command_invocation_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__run_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0782092, "column_name": "command_invocation_id", "file_key_name": "models.fct_dbt__run_results"}, "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_exposure_id.368be81b8d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_exposure_id", "model": "{{ get_where_subquery(ref('dim_dbt__exposures')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_dim_dbt__exposures_manifest_exposure_id"], "unique_id": "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_exposure_id.368be81b8d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_dim_dbt__exposures_manifest_exposure_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_dim_dbt__exposures_manifest_exposure_id", "alias": "not_null_dim_dbt__exposures_manifest_exposure_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__exposures"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0801914, "column_name": "manifest_exposure_id", "file_key_name": "models.dim_dbt__exposures"}, "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_exposure_id_output_feeds.9ff988c63a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "manifest_exposure_id || '-' || output_feeds", "model": "{{ get_where_subquery(ref('dim_dbt__exposures')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_dim_dbt__exposures_manifest_exposure_id_output_feeds"], "unique_id": "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_exposure_id_output_feeds.9ff988c63a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_dim_dbt__exposures_manifest_exposure_id_output_feeds.sql", "original_file_path": "models/schemas.yml", "name": "unique_dim_dbt__exposures_manifest_exposure_id_output_feeds", "alias": "unique_dim_dbt__exposures_manifest_exposure_id_output_feeds", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__exposures"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0822113, "column_name": null, "file_key_name": "models.dim_dbt__exposures"}, "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "manifest_model_id", "model": "{{ get_where_subquery(ref('dim_dbt__models')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_dim_dbt__models_manifest_model_id"], "unique_id": "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_dim_dbt__models_manifest_model_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_dim_dbt__models_manifest_model_id", "alias": "unique_dim_dbt__models_manifest_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__models"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0842035, "column_name": "manifest_model_id", "file_key_name": "models.dim_dbt__models"}, "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_model_id", "model": "{{ get_where_subquery(ref('dim_dbt__models')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_dim_dbt__models_manifest_model_id"], "unique_id": "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_dim_dbt__models_manifest_model_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_dim_dbt__models_manifest_model_id", "alias": "not_null_dim_dbt__models_manifest_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__models"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.086508, "column_name": "manifest_model_id", "file_key_name": "models.dim_dbt__models"}, "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "manifest_source_id", "model": "{{ get_where_subquery(ref('dim_dbt__sources')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_dim_dbt__sources_manifest_source_id"], "unique_id": "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_dim_dbt__sources_manifest_source_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_dim_dbt__sources_manifest_source_id", "alias": "unique_dim_dbt__sources_manifest_source_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__sources"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.088495, "column_name": "manifest_source_id", "file_key_name": "models.dim_dbt__sources"}, "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_source_id", "model": "{{ get_where_subquery(ref('dim_dbt__sources')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_dim_dbt__sources_manifest_source_id"], "unique_id": "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_dim_dbt__sources_manifest_source_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_dim_dbt__sources_manifest_source_id", "alias": "not_null_dim_dbt__sources_manifest_source_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__sources"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0904872, "column_name": "manifest_source_id", "file_key_name": "models.dim_dbt__sources"}, "test.dbt_artifacts.unique_dim_dbt__current_models_manifest_model_id.bbc3c5dbea": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "manifest_model_id", "model": "{{ get_where_subquery(ref('dim_dbt__current_models')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "unique_dim_dbt__current_models_manifest_model_id"], "unique_id": "test.dbt_artifacts.unique_dim_dbt__current_models_manifest_model_id.bbc3c5dbea", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "unique_dim_dbt__current_models_manifest_model_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_dim_dbt__current_models_manifest_model_id", "alias": "unique_dim_dbt__current_models_manifest_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__current_models"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0924876, "column_name": "manifest_model_id", "file_key_name": "models.dim_dbt__current_models"}, "test.dbt_artifacts.not_null_dim_dbt__current_models_manifest_model_id.95b21ba2fb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_model_id", "model": "{{ get_where_subquery(ref('dim_dbt__current_models')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "BALBOA", "schema": "dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_dim_dbt__current_models_manifest_model_id"], "unique_id": "test.dbt_artifacts.not_null_dim_dbt__current_models_manifest_model_id.95b21ba2fb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "not_null_dim_dbt__current_models_manifest_model_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_dim_dbt__current_models_manifest_model_id", "alias": "not_null_dim_dbt__current_models_manifest_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__current_models"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669235799.0945098, "column_name": "manifest_model_id", "file_key_name": "models.dim_dbt__current_models"}}, "sources": {"source.balboa.starschema_covid19.jhu_dashboard_covid_19_global": {"fqn": ["balboa", "L1_inlets", "starschema_covid19", "starschema_covid19", "jhu_dashboard_covid_19_global"], "database": "starschema_covid19", "schema": "public", "unique_id": "source.balboa.starschema_covid19.jhu_dashboard_covid_19_global", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/starschema_covid19/jhu_dashboard_covid_19_global.yml", "original_file_path": "models/L1_inlets/starschema_covid19/jhu_dashboard_covid_19_global.yml", "name": "jhu_dashboard_covid_19_global", "source_name": "starschema_covid19", "source_description": "", "loader": "", "identifier": "JHU_DASHBOARD_COVID_19_GLOBAL", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "last_update_date", "freshness": {"warn_after": {"count": 1, "period": "minute"}, "error_after": {"count": 36, "period": "hour"}, "filter": null}, "external": null, "description": "Starschema Global COVID data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "starschema_covid19.public.JHU_DASHBOARD_COVID_19_GLOBAL", "created_at": 1669235799.1177115}, "source.balboa.starschema_covid19.jhu_covid_19": {"fqn": ["balboa", "L1_inlets", "starschema_covid19", "starschema_covid19", "jhu_covid_19"], "database": "starschema_covid19", "schema": "public", "unique_id": "source.balboa.starschema_covid19.jhu_covid_19", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/starschema_covid19/jhu_covid_19.yml", "original_file_path": "models/L1_inlets/starschema_covid19/jhu_covid_19.yml", "name": "jhu_covid_19", "source_name": "starschema_covid19", "source_description": "", "loader": "", "identifier": "JHU_COVID_19", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Starschema John Hopkins COVID19 data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "starschema_covid19.public.JHU_COVID_19", "created_at": 1669235799.117907}, "source.balboa.loans._airbyte_raw_personal_loans": {"fqn": ["balboa", "L1_inlets", "loans", "loans", "_airbyte_raw_personal_loans"], "database": "RAW", "schema": "loans", "unique_id": "source.balboa.loans._airbyte_raw_personal_loans", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/loans/loans.yml", "original_file_path": "models/L1_inlets/loans/loans.yml", "name": "_airbyte_raw_personal_loans", "source_name": "loans", "source_description": "", "loader": "", "identifier": "_airbyte_raw_personal_loans", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw data on personal loans", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["loan_daily"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RAW.loans._airbyte_raw_personal_loans", "created_at": 1669235799.118044}, "source.balboa.account_usage.query_history": {"fqn": ["balboa", "L1_inlets", "account_usage", "account_usage", "query_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.balboa.account_usage.query_history", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/account_usage/query_history.yml", "original_file_path": "models/L1_inlets/account_usage/query_history.yml", "name": "query_history", "source_name": "account_usage", "source_description": "", "loader": "", "identifier": "QUERY_HISTORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Query history source model", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.QUERY_HISTORY", "created_at": 1669235799.118173}, "source.balboa.account_usage.storage_usage": {"fqn": ["balboa", "L1_inlets", "account_usage", "account_usage", "storage_usage"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.balboa.account_usage.storage_usage", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/account_usage/storage_usage.yml", "original_file_path": "models/L1_inlets/account_usage/storage_usage.yml", "name": "storage_usage", "source_name": "account_usage", "source_description": "", "loader": "", "identifier": "STORAGE_USAGE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Storage usage raw data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.STORAGE_USAGE", "created_at": 1669235799.1182976}, "source.balboa.account_usage.pipe_usage_history": {"fqn": ["balboa", "L1_inlets", "account_usage", "account_usage", "pipe_usage_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.balboa.account_usage.pipe_usage_history", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/account_usage/pipe_usage_history.yml", "original_file_path": "models/L1_inlets/account_usage/pipe_usage_history.yml", "name": "pipe_usage_history", "source_name": "account_usage", "source_description": "", "loader": "", "identifier": "PIPE_USAGE_HISTORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Pipe usage history raw data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.PIPE_USAGE_HISTORY", "created_at": 1669235799.1184204}, "source.balboa.account_usage.warehouse_metering_history": {"fqn": ["balboa", "L1_inlets", "account_usage", "account_usage", "warehouse_metering_history"], "database": "snowflake", "schema": "account_usage", "unique_id": "source.balboa.account_usage.warehouse_metering_history", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/account_usage/warehouse_metering_history.yml", "original_file_path": "models/L1_inlets/account_usage/warehouse_metering_history.yml", "name": "warehouse_metering_history", "source_name": "account_usage", "source_description": "", "loader": "", "identifier": "WAREHOUSE_METERING_HISTORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Warehouse metering history raw data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.WAREHOUSE_METERING_HISTORY", "created_at": 1669235799.118543}, "source.balboa.raw._airbyte_raw_country_populations": {"fqn": ["balboa", "L1_inlets", "country_data", "raw", "_airbyte_raw_country_populations"], "database": "raw", "schema": "raw", "unique_id": "source.balboa.raw._airbyte_raw_country_populations", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/country_data/_airbyte_raw_country_populations.yml", "original_file_path": "models/L1_inlets/country_data/_airbyte_raw_country_populations.yml", "name": "_airbyte_raw_country_populations", "source_name": "raw", "source_description": "", "loader": "", "identifier": "_AIRBYTE_RAW_COUNTRY_POPULATIONS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw population information from Github Datasets repository", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["loan_daily"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.raw._AIRBYTE_RAW_COUNTRY_POPULATIONS", "created_at": 1669235799.1186645}, "source.balboa.lineage.lineage_processing": {"fqn": ["balboa", "L1_inlets", "lineage", "lineage", "lineage_processing"], "database": "raw", "schema": "raw", "unique_id": "source.balboa.lineage.lineage_processing", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "models/L1_inlets/lineage/lineage_files.yml", "original_file_path": "models/L1_inlets/lineage/lineage_files.yml", "name": "lineage_processing", "source_name": "lineage", "source_description": "", "loader": "S3", "identifier": "lineage_processing", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@raw.raw.lineage_data", "file_format": "( type = csv skip_header = 1 field_delimiter = ',' null_if = ('NULL', 'null') empty_field_as_null = true )", "row_format": null, "tbl_properties": null, "partitions": null, "pattern": ".*PROCESSING.*[.]csv", "auto_refresh": false}, "description": "Lineage for Processing step", "columns": {"source": {"name": "source", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "source_object": {"name": "source_object", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "process": {"name": "process", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "destination": {"name": "destination", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "destination_object": {"name": "destination_object", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}, "data_lineage_existance_check": {"name": "data_lineage_existance_check", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.raw.lineage_processing", "created_at": 1669235799.1188157}, "source.dbt_artifacts.dbt_artifacts.artifacts": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "artifacts"], "database": "raw", "schema": "dbt_artifacts", "unique_id": "source.dbt_artifacts.dbt_artifacts.artifacts", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "artifacts", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "artifacts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The source table containing loaded dbt artifacts. All of the artifacts must be loaded into this table\nif using the V1 upload. See the README for more info.\n", "columns": {"data": {"name": "data", "description": "A variant type object containing all the artifact's data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "Timestamp for when the artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The path of the artifact in the external stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_type": {"name": "artifact_type", "description": "The type of the artifact, e.g. manifest.json", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.dbt_artifacts.artifacts", "created_at": 1669235799.1189716}, "source.dbt_artifacts.dbt_artifacts.dbt_run_results": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "dbt_run_results"], "database": "raw", "schema": "dbt_artifacts", "unique_id": "source.dbt_artifacts.dbt_artifacts.dbt_run_results", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "dbt_run_results", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_run_results", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The source table containing the loaded metadata from run_results.json loaded artifacts. Granularity is\n`command_invocation_id`, because each step of the a multi-step dbt cloud job will generate a seperate\nrun results file.\n\nThis belongs to the V2 upload. See the README for more info.\n", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_run_id": {"name": "artifact_run_id", "description": "A constructed ID to serve as a reliable identifier for a single run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env": {"name": "env", "description": "A JSON structure of the environment variables present during the run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_command": {"name": "execution_command", "description": "The actual command used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Was the run executed with a --full-refresh flag?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Raw JSON structure of the results.metadata field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "args": {"name": "args", "description": "Raw JSON structure of the results.args field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.dbt_artifacts.dbt_run_results", "created_at": 1669235799.11913}, "source.dbt_artifacts.dbt_artifacts.dbt_run_results_nodes": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "dbt_run_results_nodes"], "database": "raw", "schema": "dbt_artifacts", "unique_id": "source.dbt_artifacts.dbt_artifacts.dbt_run_results_nodes", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "dbt_run_results_nodes", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_run_results_nodes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The source table containing the loaded and flattened results from run_results.json loaded artifacts.\nGranularity is `command_invocation_id` & `node_id`, because each step of the a multi-step dbt cloud\njob will generate a seperate run results file, which may have one or more nodes being run at that step.\n\nThis belongs to the V2 upload. See the README for more info.\n", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_run_id": {"name": "artifact_run_id", "description": "A constructed ID to serve as a reliable identifier for a single run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_json": {"name": "result_json", "description": "Raw JSON structure of the result node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.dbt_artifacts.dbt_run_results_nodes", "created_at": 1669235799.1192834}, "source.dbt_artifacts.dbt_artifacts.dbt_manifest_nodes": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "dbt_manifest_nodes"], "database": "raw", "schema": "dbt_artifacts", "unique_id": "source.dbt_artifacts.dbt_artifacts.dbt_manifest_nodes", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "dbt_manifest_nodes", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_manifest_nodes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The source table containing the loaded and flattened nodes (including tests, seeds, sources, models and\nexposures) from manifest.json loaded artifacts. Note that within the raw manifest file, exposures and sources\nare stored seperately from seeds, models and tests, but for convenience they are all flattened to a single table\nfor this package. Granularity is `artifact_run_id` & `node_id`, because each step of the a multi-step dbt cloud\njob will generate a seperate manifest file but each will be equivalent. For this V2 upload we deduplicate that\non _load_, so any subsequent joins must be done on `artifact_run_id` and not `command_invocation_id`.\n\nThis belongs to the V2 upload. See the README for more info.\n", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation. Note that because manifests are generated for each step in a dbt cloud run, but the id here will be the one belonging to the _first_ manifest generated. For most circumstances, users should use the `artifact_run_id` to join on this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_run_id": {"name": "artifact_run_id", "description": "A constructed ID to serve as a reliable identifier for a single run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_json": {"name": "node_json", "description": "Raw JSON structure of the manifest node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.dbt_artifacts.dbt_manifest_nodes", "created_at": 1669235799.1194344}}, "macros": {"macro.balboa.rank_desc": {"unique_id": "macro.balboa.rank_desc", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/rank_desc.sql", "original_file_path": "macros/rank_desc.sql", "name": "rank_desc", "macro_sql": "{% macro rank_desc(partition_fields, datefield) %}\n-- To be created during training\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8093462, "supported_languages": null}, "macro.balboa.generate_imports": {"unique_id": "macro.balboa.generate_imports", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/generate_imports.sql", "original_file_path": "macros/generate_imports.sql", "name": "generate_imports", "macro_sql": "{% macro generate_imports(model_list) %}\n\nWITH \n{% for cte_ref in model_list %} \n{{cte_ref}} AS (\n\nSELECT * \nFROM {{ ref(cte_ref) }}\n){# Add a comma after each CTE except the last one #} {%- if not loop.last -%},{%- endif -%}\n{%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Macro to import sources for table as CTEs  \nUsage:      {{ generate_imports(  \n    [  \n        ( 'alias_model_1', ref('model_1') ),  \n        ( 'alias_model_2', ref('model_2') ),  \n        etc  \n    ]  \n) }}      , cte_logic as (  \n    any non-import CTEs that are required in this model  \n)", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "balboa://macros/generate_imports.yml", "arguments": [], "created_at": 1669235799.0052874, "supported_languages": null}, "macro.balboa.create_row_access_policy_region": {"unique_id": "macro.balboa.create_row_access_policy_region", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/row_access_policy/create_row_access_policy_deu_unmask.sql", "original_file_path": "macros/row_access_policy/create_row_access_policy_deu_unmask.sql", "name": "create_row_access_policy_region", "macro_sql": "{% macro create_row_access_policy_region(node_database,node_schema) %}\n{# \n  This should be run by dbt-snow-mask, but as this does not currently support row masking, \n  is is manually run for now.\n\n    To run: \n    dbt run-operation create_row_access_policy_region --args '{node_database: prd_commercial_dw, node_schema: source_marketedge}'\n\n  To apply to a table / view:\n  alter [table/view] <table_name> add row access policy z_policy_row_region_de on [country code column]\n\n  alter view MARKETEDGE_INTERNAL add row access policy z_policy_row_region on (ISO3_COUNTRY_CODE);\n\n  Policy must be dropped from table / view in order to recreate it\n  alter [table/view] <table_name> drop row access policy z_policy_row_region_de\n\n  alter view MARKETEDGE_INTERNAL drop row access policy z_policy_row_region;\n\n#}\n\n{# Rows with removal comments should be removed when transitioning to the dbt-snow-mask approach. #}\n\n  {% set create_policy_sql %} {# to remove #}\n    use role securityadmin;\n    create or replace row access policy {{node_database}}.{{node_schema}}.z_policy_row_region \n    as (country_code string) \n      returns boolean ->\n          case \n            when is_role_in_session('Z_POLICY_ROW_REGION_ALL') then true\n            when country_code = 'DEU' AND is_role_in_session('Z_POLICY_ROW_REGION_DE') then true\n            else false\n          end;\n    grant apply on row access policy {{node_database}}.{{node_schema}}.z_policy_row_region to role transformer_dbt_prd;\n  {% endset %} {# to remove #}\n  {% do run_query(create_policy_sql) %} {# to remove #}\n  {{ log(\"Created policy: \" ~ create_policy_sql, info=true) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8124287, "supported_languages": null}, "macro.balboa.materialization_materialized_view_snowflake": {"unique_id": "macro.balboa.materialization_materialized_view_snowflake", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/materializations/materialized_view_materialization.sql", "original_file_path": "macros/materializations/materialized_view_materialization.sql", "name": "materialization_materialized_view_snowflake", "macro_sql": "{% materialization materialized_view, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {% set full_refresh_mode = (should_full_refresh()) %}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if (existing_relation is none or full_refresh_mode) %}\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\n  {% elif existing_relation.is_view or existing_relation.is_table %}\n      {#-- Can't overwrite a view with a table - we must drop --#}\n      {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a \" ~ existing_relation.type ~ \" and this model is a materialized view.\") }}\n      {% do adapter.drop_relation(existing_relation) %}\n      {% set build_sql = dbt_labs_materialized_views.create_materialized_view_as(target_relation, sql, config) %}\n  {% else %}\n      {# noop #}\n  {% endif %}\n  \n  {% if build_sql %}\n      {% call statement(\"main\") %}\n          {{ build_sql }}\n      {% endcall %}\n  {% else %}\n    {{ store_result('main', 'SKIP') }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n  \n  {% do persist_docs(target_relation, model) %}\n  \n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8168917, "supported_languages": ["sql"]}, "macro.balboa.reset_for_dbt_102": {"unique_id": "macro.balboa.reset_for_dbt_102", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/demo/reset_dbt_102.sql", "original_file_path": "macros/demo/reset_dbt_102.sql", "name": "reset_for_dbt_102", "macro_sql": "\n\n{%- macro reset_for_dbt_102() -%}\n    {% set drop_schema_sql %}\n        drop schema if exists {{ target.schema }};\n    {% endset %}\n\n    {% do run_query(drop_schema_sql) %}\n    {{ log(\"Dropped Schema: \" ~ target.schema, info=true) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8180945, "supported_languages": null}, "macro.balboa.create_masking_policy_full_field": {"unique_id": "macro.balboa.create_masking_policy_full_field", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/masking_policies/create_masking_policy_full_field.sql", "original_file_path": "macros/masking_policies/create_masking_policy_full_field.sql", "name": "create_masking_policy_full_field", "macro_sql": "{% macro create_masking_policy_full_field(node_database,node_schema) %}\n\nCREATE MASKING POLICY IF NOT EXISTS {{node_database}}.{{node_schema}}.full_field AS (val string) \n  RETURNS string ->\n      CASE WHEN CURRENT_ROLE() IN ('ANALYST') THEN val \n           WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN SHA2(val)\n      ELSE '**********'\n      END\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.818847, "supported_languages": null}, "macro.balboa.create_masking_policy_pii_type_2_full_field": {"unique_id": "macro.balboa.create_masking_policy_pii_type_2_full_field", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/masking_policies/create_masking_policy_date_field.sql", "original_file_path": "macros/masking_policies/create_masking_policy_date_field.sql", "name": "create_masking_policy_pii_type_2_full_field", "macro_sql": "{% macro create_masking_policy_pii_type_2_full_field(node_database,node_schema) %}\n  create or replace masking policy {{node_database}}.{{node_schema}}.pii_type_2_full_field as (val string) \n    returns string ->\n        case \n          when is_role_in_session('Z_POLICY_UNMASK_PII_TYPE_2') then val\n          else '**********'\n        end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8198082, "supported_languages": null}, "macro.balboa.create_masking_policy_pii_type_2_full_field_date": {"unique_id": "macro.balboa.create_masking_policy_pii_type_2_full_field_date", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/masking_policies/create_masking_policy_date_field.sql", "original_file_path": "macros/masking_policies/create_masking_policy_date_field.sql", "name": "create_masking_policy_pii_type_2_full_field_date", "macro_sql": "{% macro create_masking_policy_pii_type_2_full_field_date(node_database,node_schema) %}\n  create or replace masking policy {{node_database}}.{{node_schema}}.pii_type_2_full_field_date as (val TIMESTAMP_NTZ) \n    returns TIMESTAMP_NTZ ->\n        case \n          when is_role_in_session('Z_POLICY_UNMASK_PII_TYPE_2') then val\n          else date_from_parts(0001, 01, 01)::timestamp_ntz -- returns 0001-01-01 00:00:00.000\n        end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8201787, "supported_languages": null}, "macro.balboa.test_expect_keys_to_exist_in_json": {"unique_id": "macro.balboa.test_expect_keys_to_exist_in_json", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tests/expect_keys_to_exist_in_json.sql", "original_file_path": "macros/tests/expect_keys_to_exist_in_json.sql", "name": "test_expect_keys_to_exist_in_json", "macro_sql": "{% test expect_keys_to_exist_in_json(model, column_name, value_set, rows_to_check=1) %}\n\nwith all_values as (\n    select distinct trim(value,'\"') as value_field\n    from (\n        select *\n        from {{ model }}\n        {% if row_condition %}\n            where {{ row_condition }}\n        {% endif %}\n        limit {{ rows_to_check }}\n    ) source,\n        lateral flatten(object_keys({{column_name}}))\n),\n\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        '{{ value }}' as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\n\nvalidation_errors as (\n    -- values from the set that are not in the json\n    select\n        s.value_field\n    from\n        set_values s\n        left join\n        all_values v on v.value_field = s.value_field\n    where\n        v.value_field is null\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8221068, "supported_languages": null}, "macro.balboa.store_test_results": {"unique_id": "macro.balboa.store_test_results", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tests/store_test_results.sql", "original_file_path": "macros/tests/store_test_results.sql", "name": "store_test_results", "macro_sql": "{% macro store_test_results(results) %}\n  {%- set test_results = [] -%}\n\n  {%- for result in results if result.node.resource_type == 'test' -%}\n    {%- set test_results = test_results.append(result) -%}\n  {%- endfor -%}\n\n  {% if test_results|length == 0 -%}\n    {{ log(\"store_test_results found no test results to process.\") if execute }}\n    {{ return('') }}\n  {% endif -%}\n\n  {%- set central_tbl -%} {{ target.schema }}.test_results_central {%- endset -%}\n  {%- set history_tbl -%} {{ target.schema }}.test_results_history {%- endset -%}\n  \n  {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" + central_tbl, info = true) if execute }}\n  {{ log(test_results, info=true) }}\n  create or replace table {{ central_tbl }} as (\n  \n  {%- for result in test_results %}\n\n    {%- set test_name = '' -%}\n    {%- set test_type = '' -%}\n    {%- set column_name = '' -%}\n\n    {%- if result.node.test_metadata is defined -%}\n      {%- set test_name = result.node.test_metadata.name -%}\n      {%- set test_type = 'generic' -%}\n      \n      {%- if test_name == 'relationships' -%}\n        {%- set column_name = result.node.test_metadata.kwargs.field ~ ',' ~ result.node.test_metadata.kwargs.column_name -%}\n      {%- else -%}\n        {%- set column_name = result.node.test_metadata.kwargs.column_name -%}\n      {%- endif -%}\n    {%- elif result.node.name is defined -%}\n      {%- set test_name = result.node.name -%}\n      {%- set test_type = 'singular' -%}\n    {%- endif %}\n    \n    select\n      '{{ test_name }}'::text as test_name,\n      '{{ result.node.config.severity }}'::text as test_severity_config,\n      '{{ result.status }}'::text as test_result,\n      '{{ process_refs(result.node.refs) }}'::text as model_refs,\n      '{{ process_refs(result.node.sources, is_src=true) }}'::text as source_refs,\n      '{{ column_name|escape }}'::text as column_names,\n      '{{ result.node.name }}'::text as test_name_long,\n      '{{ test_type }}'::text as test_type,\n      '{{ result.execution_time }}'::text as execution_time_seconds,\n      '{{ result.node.original_file_path }}'::text as file_test_defined,\n      '{{ var(\"pipeline_name\", \"variable_not_set\") }}'::text as pipeline_name,\n      '{{ var(\"pipeline_type\", \"variable_not_set\") }}'::text as pipeline_type,\n      '{{ target.name }}'::text as dbt_cloud_target_name,\n      '{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"manual\") }}'::text as _audit_project_id,\n      '{{ env_var(\"DBT_CLOUD_JOB_ID\", \"manual\") }}'::text as _audit_job_id,\n      '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}'::text as _audit_run_id,\n      '{{ env_var(\"DBT_CLOUD_URL\", \"https://cloud.getdbt.com/#/accounts/account_id/projects/\") }}'||_audit_project_id||'/runs/'||_audit_run_id::text as _audit_run_url,\n      current_timestamp as _timestamp\n    {{ \"union all\" if not loop.last }}\n  \n  {%- endfor %}\n  \n  );\n\n  {% if target.name != 'default' %}\n      create table if not exists {{ history_tbl }} as (\n        select \n          {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n          * \n        from {{ central_tbl }}\n        where false\n      );\n\n    insert into {{ history_tbl }} \n      select \n       {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n       * \n      from {{ central_tbl }}\n    ;\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.balboa.process_refs", "macro.dbt_utils.surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.835995, "supported_languages": null}, "macro.balboa.process_refs": {"unique_id": "macro.balboa.process_refs", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tests/store_test_results.sql", "original_file_path": "macros/tests/store_test_results.sql", "name": "process_refs", "macro_sql": "{% macro process_refs( ref_list, is_src=false ) %}\n  {% set refs = [] %}\n\n  {% if ref_list is defined and ref_list|length > 0 %}\n      {% for ref in ref_list %}\n        {% if is_src %}\n          {{ refs.append(ref|join('.')) }}\n        {% else %}\n          {{ refs.append(ref[0]) }}\n        {% endif %} \n      {% endfor %}\n\n      {{ return(refs|join(',')) }}\n  {% else %}\n      {{ return('') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8377132, "supported_languages": null}, "macro.balboa.test_check_critical_rows_exist_in_seed": {"unique_id": "macro.balboa.test_check_critical_rows_exist_in_seed", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tests/check_critical_rows_exist_in_seed.sql", "original_file_path": "macros/tests/check_critical_rows_exist_in_seed.sql", "name": "test_check_critical_rows_exist_in_seed", "macro_sql": "{% test check_critical_rows_exist_in_seed(model, compare_seed, compare_columns=None) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n\n\n{#\n{%- do dbt_utils._is_relation(model, 'check_critical_rows_exist_in_seed') -%}\nThis was in the dbt_utils model I modeled this one after, but doesn't run here.\n#}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema \u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'check_critical_rows_exist_in_seed') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_seed }}\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n)\n\nselect * from b_minus_a\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8401065, "supported_languages": null}, "macro.balboa.ref": {"unique_id": "macro.balboa.ref", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/ref.sql", "original_file_path": "macros/tooling/ref.sql", "name": "ref", "macro_sql": "{% macro ref(modelname) %}\n\n    {% if builtins.ref(modelname).database and builtins.ref(modelname).database.startswith('staging') %}\n        {{ return(builtins.ref(modelname).include(database=False)) }}\n    {% else %}\n        {{ return(builtins.ref(modelname)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.balboa.ref"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8416412, "supported_languages": null}, "macro.balboa.drop_old_relations": {"unique_id": "macro.balboa.drop_old_relations", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/drop_old_relations.sql", "original_file_path": "macros/tooling/drop_old_relations.sql", "name": "drop_old_relations", "macro_sql": "{% macro drop_old_relations(\n        dry_run = 'false'\n    ) %}\n    {% if execute %}\n        {% set current_models = [] %}\n        {% for node in graph.nodes.values() | selectattr(\n                \"resource_type\",\n                \"in\",\n                [\"model\", \"seed\", \"snapshot\"]\n            ) %}\n            {% if node.alias %}\n                {% do current_models.append(\n                    (node.alias, node.schema)\n                ) %}\n            {% elif node.config.materialization != \"ephemeral\" %}\n                {% do current_models.append(\n                    (node.name, node.schema)\n                ) %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n\n    {% set cleanup_query %}\n    WITH models_to_drop AS (\n        SELECT\n            CASE\n                WHEN table_type = 'BASE TABLE' THEN 'TABLE'\n                WHEN table_type = 'VIEW' THEN 'VIEW'\n            END AS relation_type,\n            concat_ws(\n                '.',\n                table_catalog,\n                table_schema,\n                '\"' || table_name || '\"'\n            ) AS relation_name\n        FROM\n            {{ target.database }}.information_schema.tables\n        WHERE\n            table_schema ILIKE '{{ target.schema }}%'\n            AND relation_name NOT IN ({%- for model, schema in current_models -%}\n                '{{ target.database }}.{{ schema.upper() }}.\"{{ model.upper() }}\"' {%- if not loop.last -%},\n                {% endif %}\n            {%- endfor -%})\n    )\nSELECT\n    'DROP ' || relation_type || ' ' || relation_name || ';' AS drop_commands\nFROM\n    models_to_drop -- intentionally exclude unhandled table_types, including 'external table`\nWHERE\n    drop_commands IS NOT NULL {% endset %}\n    {% set drop_commands = run_query(cleanup_query).columns [0].values() %}\n    {% if drop_commands %}\n        {% for drop_command in drop_commands %}\n            {% do log(\n                drop_command,\n                True\n            ) %}\n            {% if dry_run == 'false' %}\n                {% do run_query(drop_command) %}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {% do log(\n            'No relations to clean.',\n            True\n        ) %}\n    {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.847633, "supported_languages": null}, "macro.balboa.gen_yaml": {"unique_id": "macro.balboa.gen_yaml", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/gen_yaml.sql", "original_file_path": "macros/tooling/gen_yaml.sql", "name": "gen_yaml", "macro_sql": "{% macro gen_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.850851, "supported_languages": null}, "macro.balboa.generate_schema_name": {"unique_id": "macro.balboa.generate_schema_name", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/generate_schema_name.sql", "original_file_path": "macros/tooling/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- elif target.name == 'dev' -%}\n\n        {{ default_schema | trim }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8521402, "supported_languages": null}, "macro.balboa.create_custom_schema": {"unique_id": "macro.balboa.create_custom_schema", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/create_custom_schema.sql", "original_file_path": "macros/tooling/create_custom_schema.sql", "name": "create_custom_schema", "macro_sql": "\n\n{%- macro create_custom_schema(db_name, schema_name) -%}\n    {% set db_name = db_name | upper %}\n    {% set schema_name = schema_name | upper %}\n\n    {% set db_create_sql %}\n        create schema if not exists {{ db_name }}.{{ schema_name }};\n    {% endset %}\n    {{ log(\"Creating Schema: \" ~ db_name ~ \".\" ~ schema_name, info=true) }}\n    {% do run_query(db_create_sql) %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8537316, "supported_languages": null}, "macro.balboa.generate_alias_name": {"unique_id": "macro.balboa.generate_alias_name", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/generate_alias_name.sql", "original_file_path": "macros/tooling/generate_alias_name.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {% if (\"__\" in node.name) and (\"dbt_packages\" not in node.root_path)%}\n        {{ node.name.split(\"__\")[0] }}\n    {%- else -%}\n        {{ node.name }}\n    {%- endif -%} \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8550217, "supported_languages": null}, "macro.balboa.create_database": {"unique_id": "macro.balboa.create_database", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/create_database.sql", "original_file_path": "macros/tooling/create_database.sql", "name": "create_database", "macro_sql": "\n\n{%- macro create_database() -%}\n  {%- set database_exists = adapter.get_relation(\n      database=target.database,\n      schema=\"information_schema\",\n      identifier=\"tables\") -%}\n  {% if not database_exists %}\n    {% set create_db_sql %}\n        use role transformer_dbt_prd;\n        create database {{ target.database }};\n        grant ownership on database {{ target.database }} to role {{ target.role }};\n        use role {{ target.role }};\n    {% endset %}\n    {% do run_query(create_db_sql) %}\n    {{ log(\"Created Database: \" ~ target.database, info=true) }}\n  {% else %}\n    {{ log(\"Database already exists: \" ~ target.database, info=true) }}\n  {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8572977, "supported_languages": null}, "macro.balboa.drop_recreate_db": {"unique_id": "macro.balboa.drop_recreate_db", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/drop_recreate_db.sql", "original_file_path": "macros/tooling/drop_recreate_db.sql", "name": "drop_recreate_db", "macro_sql": "\n\n{%- macro drop_recreate_db(db_name, recreate = True) -%}\n    {% set db_name = db_name | upper %}\n\n    {% set drop_recreate_sql %}\n        drop database if exists {{ db_name }};\n        {% if recreate %}\n            create database if not exists {{ db_name }};\n            {{ log(\"Recreating Database: \" ~ db_name, info=true) }}\n        {% endif %}\n    {% endset %}\n    \n    {% do run_query(drop_recreate_sql) %}\n\n    {% if recreate %}\n        {% set apply_grants_sql %}\n            grant usage, create schema, monitor on database {{ db_name }} to analyst;\n            grant usage on database {{ db_name }} to securityadmin;\n        {% endset %}\n\n        {{ log(\"Applying grants on Database: \" ~ db_name, info=true) }}\n        {% do run_query(apply_grants_sql) %}\n    {% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8598764, "supported_languages": null}, "macro.balboa.empty_dev_schema": {"unique_id": "macro.balboa.empty_dev_schema", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/empty_dev_schema.sql", "original_file_path": "macros/tooling/empty_dev_schema.sql", "name": "empty_dev_schema", "macro_sql": "{% macro empty_dev_schema(dry_run=true) %}\n\n  {% set query %}\n    select\n      schema_name,\n      ref_name,\n      ref_type\n    from (\n      select\n        table_schema as schema_name,\n        table_name  as ref_name,\n        split_part(table_type, ' ', -1)    as ref_type --allows for 'BASE TABLE' rather than 'TABLE' in results\n      from information_schema.tables\n      where table_schema = upper('{{ target.schema }}')\n      )\n  {% endset %}\n  {%- set result = run_query(query) -%}\n  {% if result %}\n      {%- for to_delete in result -%}\n        {%- if dry_run -%}\n            {{ log('to be dropped: ' ~ to_delete[2] ~ ' ' ~ to_delete[0] ~ '.' ~ to_delete[1], true) }}\n        {%- else -%}\n            {{ log('dropping ' ~ to_delete[2] ~ ' ' ~ to_delete[0] ~ '.' ~ to_delete[1], true) }}\n            {% set drop_command = 'drop ' ~ to_delete[2] ~ ' if exists ' ~ to_delete[0] ~ '.' ~ to_delete[1] ~ ' cascade;' %}\n            {% do run_query(drop_command) %}\n            {{ log('dropped ' ~ to_delete[2] ~ ' ' ~ to_delete[0] ~ '.' ~ to_delete[1], true) }}\n        {%- endif -%}\n      {%- endfor -%}\n  {% else %}\n    {{ log('no models to clean.', true) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8637571, "supported_languages": null}, "macro.balboa.drop_staging_db": {"unique_id": "macro.balboa.drop_staging_db", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/blue-green/drop_staging_db.sql", "original_file_path": "macros/tooling/blue-green/drop_staging_db.sql", "name": "drop_staging_db", "macro_sql": "\n\n{%- macro drop_staging_db(db_name) -%}\n    {% set db_name = db_name | lower %}\n\n    {# Only want this for stating with staging #}\n    {% if (not db_name.startswith('staging')) and (not db_name.endswith('staging')) %}\n        {{ log(\"Database is not a staging db: \" ~ db_name, true)}}\n        {{ exceptions.raise_compiler_error(\"Not a staging Database\") }}\n    {% else %}\n        {{ drop_recreate_db(db_name = db_name, recreate = False) }}\n        {{ log(\"Deteled \" + db_name, true) }}\n    {% endif %} #}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.balboa.drop_recreate_db"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8657296, "supported_languages": null}, "macro.balboa.check_db_does_not_exist": {"unique_id": "macro.balboa.check_db_does_not_exist", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/blue-green/check_db_does_not_exist.sql", "original_file_path": "macros/tooling/blue-green/check_db_does_not_exist.sql", "name": "check_db_does_not_exist", "macro_sql": "{% macro check_db_does_not_exist(db_name) %}\n\n    {% set results = run_query(\"show databases like '\" ~ db_name ~ \"'\") %}\n\n    {% if results %}\n        {{ exceptions.raise_compiler_error(\"Database exists.\") }}\n    {% endif %}\n\n    {{ log(db_name ~ \" does not exist\", true)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8670588, "supported_languages": null}, "macro.balboa.swap_database": {"unique_id": "macro.balboa.swap_database", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/blue-green/swap_database.sql", "original_file_path": "macros/tooling/blue-green/swap_database.sql", "name": "swap_database", "macro_sql": "\n\n{%- macro swap_database(db1, db2) -%}\n    {% set swap_db_sql %}\n        alter database {{ db1 }} swap with {{ db2 }};\n    {% endset %}\n\n    {% do run_query(swap_db_sql) %}\n    {{ log(\"Swapped database \" ~ db1 ~ \" with \" ~ db2, info=true) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8683248, "supported_languages": null}, "macro.balboa.clone_database": {"unique_id": "macro.balboa.clone_database", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/blue-green/clone_database.sql", "original_file_path": "macros/tooling/blue-green/clone_database.sql", "name": "clone_database", "macro_sql": "\n\n{%- macro clone_database(source_db, target_db) -%}\n  {% set clone_db_sql %}\n      DROP DATABASE IF EXISTS {{ target_db }};\n      CREATE DATABASE {{ target_db }} CLONE {{ source_db }};\n  {% endset %}\n  {% do run_query(clone_db_sql) %}\n  {{ log(\"Cloned Database: \" ~ target_db ~ \" from \" ~ source_db, info=true) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8696907, "supported_languages": null}, "macro.balboa.grant_prd_usage": {"unique_id": "macro.balboa.grant_prd_usage", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/blue-green/grant_prd_usage.sql", "original_file_path": "macros/tooling/blue-green/grant_prd_usage.sql", "name": "grant_prd_usage", "macro_sql": "\n\n{%- macro grant_prd_usage(db_name) -%}\n\n    {% set apply_db_grants_sql %}\n        grant usage on database {{ db_name }} to role analyst;\n        grant usage on database {{ db_name }} to role useradmin;\n    {% endset %}\n    {% do run_query(apply_db_grants_sql) %}\n\n    {{ log(\"Applied usage grant on Database: \" ~ db_name, info=true) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8709025, "supported_languages": null}, "macro.balboa.create_dbt_artifacts_stage": {"unique_id": "macro.balboa.create_dbt_artifacts_stage", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/blue-green/create_dbt_artifacts_stage.sql", "original_file_path": "macros/tooling/blue-green/create_dbt_artifacts_stage.sql", "name": "create_dbt_artifacts_stage", "macro_sql": "\n\n{%- macro create_dbt_artifacts_stage(db_nmae) -%}\n{# Artifacts is used for v1 #}\n  {% set sql %}\n      create stage if not exists {{ target.database }}.source_dbt_artifacts.artifacts\n      file_format = ( type =  json );\n  {% endset %}\n  {% do run_query(sql) %}\n\n{# dbt_artifacts_stage is used for v2 #}\n  {% set sql %}\n      create stage if not exists {{ target.database }}.source_dbt_artifacts.dbt_artifacts_stage\n      file_format = ( type =  json );\n  {% endset %}\n  {% do run_query(sql) %}\n  {{ log(\"Created DBT Artifacts Stage in database: \" + target.database, info=true) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8725688, "supported_languages": null}, "macro.balboa.create_snowflake_schemas": {"unique_id": "macro.balboa.create_snowflake_schemas", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/permifrost/create_snowflake_schemas.sql", "original_file_path": "macros/tooling/permifrost/create_snowflake_schemas.sql", "name": "create_snowflake_schemas", "macro_sql": "{% macro create_snowflake_schemas(schemas_to_be_created) %}\n    {% for schema in schemas_to_be_created %}        \n        \n        {% set create_schema_sql %}\n            use role transformer_dbt_prd;\n            create schema {{ schema.upper() }};\n        {% endset %}\n\n        {% do run_query(create_schema_sql) %}\n        {{ log(\"Schema \" ~ schema ~ \" created\", info=true) }}\n    \n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8740327, "supported_languages": null}, "macro.balboa.create_snowflake_warehouses": {"unique_id": "macro.balboa.create_snowflake_warehouses", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/permifrost/create_snowflake_warehouses.sql", "original_file_path": "macros/tooling/permifrost/create_snowflake_warehouses.sql", "name": "create_snowflake_warehouses", "macro_sql": "{% macro create_snowflake_warehouses(warehouses_to_be_created) %}\n    \n    {% for wh in warehouses_to_be_created %}        \n        \n            {% set create_wh_sql %}\n                use role sysadmin;\n                create warehouse {{ wh[\"name\"] }}\n                {% if \"parameters\" in wh -%}\n                    with \n                    {% for k, v in wh[\"parameters\"].items() -%}\n                        {% if k == \"size\" -%}\n                            WAREHOUSE_SIZE=\"{{v}}\"\n                        {% else -%}\n                            {{k.upper()}}={{v}}\n                        {% endif -%}\n                    {%- endfor -%}\n                {%- endif -%}\n                ;\n            {%- endset -%}\n\n            {% do run_query(create_wh_sql) %}\n            {{ print(\"Warehouse \" ~ wh[\"name\"] ~ \" created\") }}\n\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8769362, "supported_languages": null}, "macro.balboa.snowflake_warehouse_comparison": {"unique_id": "macro.balboa.snowflake_warehouse_comparison", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/permifrost/snowflake_warehouse_comparison.sql", "original_file_path": "macros/tooling/permifrost/snowflake_warehouse_comparison.sql", "name": "snowflake_warehouse_comparison", "macro_sql": "{% macro snowflake_warehouse_comparison(permifrost_warehouse_list, dry_run = true) %}\n    {{ print(\"Running as user: \" ~ target.user )}}\n    {{ print(\"Running as using target: \" ~ target.name )}}\n    {{ print('\\n')}}\n\n    {% set permifrost_warehouses = [] %}\n    \n    {% set warehouses_to_be_created = [] %}\n    {% set warehouses_missing_in_permifrost = [] %}\n\n    {% for wh in permifrost_warehouse_list %}\n        {% for k, v in wh.items() %}\n            {% if k == \"name\" %}\n                {{ permifrost_warehouses.append(v.upper()) }}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n\n    {% set warehouse_results = run_query(\"use role sysadmin; show warehouses;\") %}\n    {% set warehousess_in_snowflake = warehouse_results.columns[\"name\"].values() %}\n\n    {% for warehouse in permifrost_warehouse_list %}\n        {% if warehouse['name'].upper() not in warehousess_in_snowflake %}\n            {{ warehouses_to_be_created.append(warehouse) }}\n        {% endif %}\n    {% endfor %}\n\n    {% for warehouse in warehousess_in_snowflake %}\n        {% if warehouse.upper() not in permifrost_warehouses %}\n            {{ warehouses_missing_in_permifrost.append(warehouse) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ print('############################################')}}\n    {{ print('####### Warehouses not in Permifrost #######')}}\n    {{ print('############################################')}}\n\n    {{ print('\\n'.join(warehouses_missing_in_permifrost))}}\n    {{ print('\\n') }}\n\n    {% if warehouses_to_be_created %}\n\n        {{ print('###########################################')}}\n        {{ print('####### Warehouses not in Snowflake #######')}}\n        {{ print('###########################################')}}\n\n        {% for warehouse in warehouses_to_be_created %}\n            {{ print(warehouse['name'].upper()) }}\n        {% endfor %}\n        \n        {{ print('\\n') }}\n\n        {% if dry_run == true %}\n            {{ print('Warehouses not created during a dry_run')}}\n        {% else %}\n            {{ create_snowflake_warehouses(warehouses_to_be_created) }}\n        {% endif %}\n\n    {% else %}\n\n        {{ print('===========================================')}}\n        {{ print('Warehouses in Permifrost exist in Snowflake')}}\n        {{ print('===========================================')}}\n\n    {% endif %} \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.balboa.create_snowflake_warehouses"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.885154, "supported_languages": null}, "macro.balboa.snowflake_role_comparison": {"unique_id": "macro.balboa.snowflake_role_comparison", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/permifrost/snowflake_role_comparison.sql", "original_file_path": "macros/tooling/permifrost/snowflake_role_comparison.sql", "name": "snowflake_role_comparison", "macro_sql": "{% macro snowflake_role_comparison(permifrost_role_list, dry_run = true) %}\n    {{ print(\"Running as user: \" ~ target.user )}}\n    {{ print(\"Running as using target: \" ~ target.name )}}\n    {{ print('\\n')}}\n\n    {% if(permifrost_role_list |length == 0) %}\n        {{ exceptions.raise_compiler_error(\"List of roles to compare is empty\") }}\n    {% else %}}\n        {% set permifrost_roles = permifrost_role_list.upper().split(',') %}\n\n        {% set roles_to_be_created = [] %}\n        {% set roles_missing_in_permifrost = [] %}\n\n        {% set roles_results = run_query(\"use role securityadmin; show roles;\") %}\n        {% set roles_in_snowflake = roles_results.columns[\"name\"].values() %}\n        \n        {% for role in permifrost_roles %}\n            {% if role.upper() not in roles_in_snowflake %}\n                {{ roles_to_be_created.append(role) }}\n            {% endif %}\n        {% endfor %}\n\n        {% for role in roles_in_snowflake %}\n            {% if role.upper() not in permifrost_roles %}\n                {{ roles_missing_in_permifrost.append(role) }}\n            {% endif %}\n        {% endfor %}\n\n        {{ print('#######################################')}}\n        {{ print('####### Roles not in Permifrost #######')}}\n        {{ print('#######################################')}}\n\n        {{ print('\\n'.join(roles_missing_in_permifrost))}}\n        {{ print('\\n') }}\n\n        {% if roles_to_be_created %}\n\n            {{ print('#######################################')}}\n            {{ print('####### Roles not in Snowflake #######')}}\n            {{ print('#######################################')}}\n\n            {{ print('\\n'.join(roles_to_be_created))}}   \n            {{ print('\\n') }}\n\n            {% if dry_run == true %}\n                {{ print('Roles not created during a dry_run')}}\n            {% else %}\n                {{ create_snowflake_roles(roles_to_be_created) }}\n            {% endif %}\n\n        {% else %}\n\n            {{ print('=======================================')}}\n            {{ print('Roles in Permifrost exist in Snowflake')}}\n            {{ print('=======================================')}}\n\n        {% endif %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.balboa.create_snowflake_roles"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.8927443, "supported_languages": null}, "macro.balboa.snowflake_schema_comparison": {"unique_id": "macro.balboa.snowflake_schema_comparison", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/permifrost/snowflake_schema_comparison.sql", "original_file_path": "macros/tooling/permifrost/snowflake_schema_comparison.sql", "name": "snowflake_schema_comparison", "macro_sql": "{% macro snowflake_schema_comparison(permifrost_schema_list, dry_run = true) %}\n    {{ print(\"Running as user: \" ~ target.user )}}\n    {{ print(\"Running as using target: \" ~ target.name )}}\n    {{ print('\\n')}}\n\n    {% if(permifrost_schema_list |length == 0) %}\n        {{ exceptions.raise_compiler_error(\"List of schemas to compare is empty\") }}\n    {% else %}}\n\n        {% set permifrost_schemas = permifrost_schema_list.upper().split(',') %}\n\n        {% set permifrost_databases = [] %}\n\n        {% set snowflake_schemas = [] %}\n\n        {% set schemas_to_be_created = [] %}\n        {% set schemas_missing_in_permifrost = [] %}\n\n        {# Get the databases for the schemas defined in permifrost #}\n        {% for full_schema_name in permifrost_schemas %}\n            {% set db = full_schema_name.split('.')[0] %}            \n            {% if db not in permifrost_databases %}\n                {{ permifrost_databases.append(db) }}\n            {% endif %}\n        {% endfor %}\n\n        {# Go through each database and compare snowflake to permifrost #}\n        {% for schema_db in permifrost_databases %}\n            {# Get schemas for this database from snowflake #}\n            {% set schemas_in_snowflake_db_query %}\n                use role securityadmin;\n                show schemas in database {{ schema_db }};\n            {% endset %}\n\n            {% set query_results = run_query(schemas_in_snowflake_db_query) %}\n\n            {% set schemas_in_snowflake_db = query_results.columns[\"name\"].values() %}\n\n            {# We don't care about default snowflake schemas #}\n            {% set excluded_schemas = [\"INFORMATION_SCHEMA\",\"PUBLIC\"] %}\n\n            {# Go through each schema that's in snowflake and see if it exists in permifrost #}\n            {% for snowflake_schema in schemas_in_snowflake_db %}\n                {% set full_schema_name = schema_db + '.' + snowflake_schema.upper() %}\n\n                {% if (snowflake_schema.upper() not in excluded_schemas) and full_schema_name not in permifrost_schemas %}\n                    {{ schemas_missing_in_permifrost.append(full_schema_name) }}\n                {% endif %}\n            {% endfor %}\n\n            {# Go through each schema that's in permifrost and see if it exists in snowflake #}\n            {% for permifrost_schema in permifrost_schemas %}\n\n                {% set permifrost_schema_db = permifrost_schema.split('.')[0] %}\n                {% set permifrost_schema_name = permifrost_schema.split('.')[1] %}\n\n                {% if permifrost_schema_db == schema_db %}\n                    {% if permifrost_schema_name not in schemas_in_snowflake_db %}\n                        {{ schemas_to_be_created.append(permifrost_schema_db + \".\" + permifrost_schema_name) }}\n                    {% endif %}\n                {% endif %} \n            {% endfor %}\n        {% endfor %}\n\n\n        {{ print('#########################################')}}\n        {{ print('####### Schemas not in Permifrost #######')}}\n        {{ print('#########################################')}}\n\n        {{ print('\\n'.join(schemas_missing_in_permifrost))}}\n        {{ print('\\n') }}\n\n        {% if schemas_to_be_created %}\n            {{ print('########################################')}}\n            {{ print('####### Schemas not in Snowflake #######')}}\n            {{ print('########################################')}}\n\n            {{ print('\\n'.join(schemas_to_be_created)) }} \n            {{ print('\\n') }}\n\n            {% if dry_run == true %}\n                {{ print('Schemas not created during a dry_run')}}\n            {% else %}\n                {{ create_snowflake_schemas(schemas_to_be_created) }}\n            {% endif %}\n\n        {% else %}\n\n            {{ print('=========================================')}}\n            {{ print('Schemas in Permifrost exist in Snowflake')}}\n            {{ print('=========================================')}}\n\n        {% endif %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.balboa.create_snowflake_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9028134, "supported_languages": null}, "macro.balboa.create_snowflake_roles": {"unique_id": "macro.balboa.create_snowflake_roles", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/permifrost/create_snowflake_roles.sql", "original_file_path": "macros/tooling/permifrost/create_snowflake_roles.sql", "name": "create_snowflake_roles", "macro_sql": "{% macro create_snowflake_roles(roles_to_be_created) %}\n    {% for role in roles_to_be_created %}        \n        \n        {% set create_role_sql %}\n            use role securityadmin;\n            create role {{ role.upper() }};\n        {% endset %}\n\n        {% do run_query(create_role_sql) %}\n        {{ print(\"Role \"~role~\" created\") }}\n    \n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9042225, "supported_languages": null}, "macro.balboa.create_missing_schemas_with_masking_policy": {"unique_id": "macro.balboa.create_missing_schemas_with_masking_policy", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/ci-cd/create_missing_schemas_with_masking_policy.sql", "original_file_path": "macros/tooling/ci-cd/create_missing_schemas_with_masking_policy.sql", "name": "create_missing_schemas_with_masking_policy", "macro_sql": "\n\n{%- macro create_missing_schemas_with_masking_policy() -%}\n\n    {% set schemas = [] %}\n\n    {# Get the schemas that have a meta tag #}\n    {% for node in graph.nodes.values() -%}\n        {% for column in node.columns -%}\n            {% if node.columns[column]['meta'] | length > 0 %}\n                {% do schemas.append(node.database ~ \".\" ~ node.schema) %}\n            {% endif %}\n        {% endfor %}\n    {%- endfor -%}\n\n    {% for schema in schemas|unique -%}\n        {% set db_name = schema.split(\".\")[0] %}\n        {% set schema_name = schema.split(\".\")[1] %}\n\n        {% do create_custom_schema(db_name, schema_name) %}\n    {%- endfor -%}\n\n    {# TODO improve this so we only create when it is a new schema #}\n    {% do snow_mask_reapply_policies('unapply') %}\n    {% do dbt_snow_mask.create_masking_policy(resource_type='sources') %}\n    {% do dbt_snow_mask.create_masking_policy(resource_type='models') %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.balboa.create_custom_schema", "macro.dbt_snow_mask.create_masking_policy"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.907318, "supported_languages": null}, "macro.balboa.remove_closed_pr_dbs": {"unique_id": "macro.balboa.remove_closed_pr_dbs", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/ci-cd/remove_closed_pr_dbs.sql", "original_file_path": "macros/tooling/ci-cd/remove_closed_pr_dbs.sql", "name": "remove_closed_pr_dbs", "macro_sql": "\n\n{%- macro remove_closed_pr_dbs(pr_ids) -%}\n  {% if (pr_ids is not none) and ('|' in pr_ids|string) %}\n\n      {% set pr_array = pr_ids.split(\"|\") %}\n\n      {% for this_pr in pr_array %}\n        {% set this_db = 'BALBOA_PR_' ~ this_pr %}\n        \n        {{ log(\"Running drop statement for database: \" ~ this_db, info=true) }}\n        {% set drop_db_sql %}\n            DROP DATABASE IF EXISTS {{ this_db }};\n        {% endset %}\n\n        {% do run_query(drop_db_sql) %}\n      {% endfor %}\n\n    {% else %}\n      {% set this_db = 'BALBOA_PR_' ~ pr_ids %}\n\n      {{ log(\"Running drop statement for database: \" ~ this_db, info=true) }}\n\n      {% set drop_db_sql %}\n          DROP DATABASE IF EXISTS {{ this_db }};\n      {% endset %}\n\n      {% do run_query(drop_db_sql) %}\n  {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9103243, "supported_languages": null}, "macro.balboa.manage_masking_policies": {"unique_id": "macro.balboa.manage_masking_policies", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/ci-cd/manage_masking_policies.sql", "original_file_path": "macros/tooling/ci-cd/manage_masking_policies.sql", "name": "manage_masking_policies", "macro_sql": "{% macro manage_masking_policies() %}\n\n    {{ log(\"Creating schemas for masking policies\", true) }}\n    {% do create_missing_schemas_with_masking_policy() %}\n\n    {{ log(\"Unapplying masking policies\", true) }}\n    {% do snow_mask_reapply_policies('unapply') %}\n\n    {{ log(\"Create masking policies\", true) }}\n    {% do dbt_snow_mask.create_masking_policy(resource_type='sources') %}\n    {% do dbt_snow_mask.create_masking_policy(resource_type='models') %}\n\n    {{ log(\"Reapply masking policies\", true) }}\n    {% do snow_mask_reapply_policies('apply') %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.balboa.create_missing_schemas_with_masking_policy", "macro.dbt_snow_mask.create_masking_policy"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.912308, "supported_languages": null}, "macro.balboa.grant_access_to_pr_database": {"unique_id": "macro.balboa.grant_access_to_pr_database", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/ci-cd/grant_access_to_pr_database.sql", "original_file_path": "macros/tooling/ci-cd/grant_access_to_pr_database.sql", "name": "grant_access_to_pr_database", "macro_sql": "\n\n{%- macro grant_access_to_pr_database() -%}\n    {% set db_role_name = 'z_db_balboa_tst' %}\n    {% set db_name = target.database %}\n\n    {% set apply_db_grants_sql %}\n        grant usage on database {{ db_name }} to role {{db_role_name}};\n    {% endset %}\n\n    {% do run_query(apply_db_grants_sql) %}\n\n    {% set schemas_list %}\n        select schema_name       \n        from {{ db_name }}.information_schema.schemata\n        where schema_name not in ('INFORMATION_SCHEMA','PUBLIC','DBT_TEST__AUDIT')\n    {% endset %}\n\n    {% set schemas = run_query(schemas_list) %}\n    {% for schema in schemas %}\n\n        {% set apply_schema_grants_sql %}\n            grant usage on schema {{db_name}}.{{ schema[0] }} to z_schema_{{schema[0]}};\n            grant select on all tables in schema {{db_name}}.{{ schema[0] }} to role z_tables_views_general;\n            grant select on all views in schema {{db_name}}.{{ schema[0] }} to role z_tables_views_general;\n        {% endset %}\n\n        {% do run_query(apply_schema_grants_sql) %}\n        {{ log(\"Applied grants on Schema: \" ~ db_name ~ '.' ~ schema[0], info=true) }}\n    {% endfor %}\n\n    {{ log(\"Applied grants on Database: \" ~ db_name, info=true) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9160628, "supported_languages": null}, "macro.balboa.get_last_manifest": {"unique_id": "macro.balboa.get_last_manifest", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/ci-cd/get_last_manifest.sql", "original_file_path": "macros/tooling/ci-cd/get_last_manifest.sql", "name": "get_last_manifest", "macro_sql": "{% macro get_last_manifest() %}\n\n    {% do log(\"Getting manifest for dbt version: \" ~ dbt_version, info=true) %}\n\n    {# Override database for staging since we want artifacts to go there not current prod database #}\n    {% set artifacts = source('dbt_artifacts', 'artifacts') %}\n\n    {% if target.database.startswith('staging_') %}\n        {% set artifacts = api.Relation.create(database = target.database, schema=artifacts.schema, identifier=artifacts.identifier) %}\n    {% endif %}\n\n    {% do log(\"Getting manifest from: \" ~ artifacts, info=true) %}\n\n    {% set manifest_query %}\n        select data\n        from  {{ artifacts }}\n        where artifact_type = 'manifest.json'\n        {# and data:\"metadata\":\"dbt_version\" = '{{ dbt_version }}' #}\n        order by generated_at desc limit 1\n    {% endset %}\n\n    {% set results = run_query(manifest_query) %}\n\n    {{ log(results.columns[0].values()[0], info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9188256, "supported_languages": null}, "macro.balboa.upload_artifacts": {"unique_id": "macro.balboa.upload_artifacts", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "macros/tooling/utilities/upload_artifacts.sql", "original_file_path": "macros/tooling/utilities/upload_artifacts.sql", "name": "upload_artifacts", "macro_sql": "{% macro upload_artifacts() %}\n\n    {{ dbt_artifacts.upload_dbt_artifacts(['manifest', 'run_results']) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.upload_dbt_artifacts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9195936, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9205418, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9208422, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9441168, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9460402, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.946743, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9486337, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9505577, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.951956, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.953258, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9540699, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9545734, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9552095, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9557247, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.957017, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9574869, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.95791, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9591057, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.959578, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.960833, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.962754, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9633095, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.96393, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9660375, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9668443, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.967675, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9681468, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9684298, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9687288, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9690733, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9699216, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9705033, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9711792, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9718356, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9749248, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.98338, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9838226, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9849825, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9878557, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9886067, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9892657, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.990398, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9953606, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235795.9961262, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0015585, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0021029, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0023494, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0039167, "supported_languages": ["sql"]}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0047996, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0052147, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0061471, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0065024, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0074127, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0077667, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0093331, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.010369, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0113184, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.011677, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0126317, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0128589, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0139856, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0146117, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0167878, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.017191, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0176098, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0180044, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0184178, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0188015, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0192108, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0196555, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0200636, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0204682, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0208845, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0212529, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0216632, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0220308, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0228302, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.023038, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0239344, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0242805, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0253239, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.025909, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0269105, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0273304, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.028166, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0284433, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0293124, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0297282, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.030579, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0308623, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0321786, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0326293, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.033207, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0342321, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0346668, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0356874, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0363586, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.036764, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.037605, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0378873, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0387285, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0390103, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0398812, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0402465, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.041338, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0417054, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0425317, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.042855, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0437403, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0440865, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0477052, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0491855, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.049941, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0535073, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.056493, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0585136, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0591176, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0601454, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0617049, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0626712, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0634832, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.066491, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0676813, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0688443, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.069857, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0700533, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0734375, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0737462, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0741706, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0744627, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0753336, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0758097, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.076079, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0766697, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.07716, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0777395, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0782268, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0789526, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0806377, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.081128, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0817595, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0823324, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0851645, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0864208, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0867767, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.087182, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0882046, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0894814, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0898678, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0902338, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0905094, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.090926, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0911222, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0915442, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.091968, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0930748, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0935576, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0939724, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0944417, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0976696, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0980906, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.0990305, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.099496, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1003346, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1009219, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1023953, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1030319, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1049857, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.110799, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1112244, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1117804, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.11254, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1131685, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1139739, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1144388, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1149855, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1154442, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1158614, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1163743, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1171136, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1177454, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1191254, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.119859, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1202288, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1207342, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1236658, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1243253, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1248155, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1252184, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1256685, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1262825, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1267917, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1275618, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1280434, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.128478, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1296954, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1307697, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1323843, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1328428, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1333563, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.133786, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.134464, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.135672, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1367524, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1375341, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.138483, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1411424, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1416483, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1420174, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1423807, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.142744, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.150114, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1582386, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1605275, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.161134, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.162355, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1628518, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1631978, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1635559, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1638556, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.164259, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1645806, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1658576, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1663501, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.169601, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1820195, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.183264, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1839373, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1908278, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1912627, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1918309, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1936018, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.194024, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1944592, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.1978734, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2012432, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.207798, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2085614, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2089922, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.209228, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2095952, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2098901, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2104027, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2125404, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2130356, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2136762, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2147546, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2264335, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2356193, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2386453, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2416253, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.243722, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2470164, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2483978, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2500925, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.250694, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.252508, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.259857, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2639081, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2645435, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2664034, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2670708, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2686825, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2704175, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2723718, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.272997, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2734737, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2741358, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2746022, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2752647, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2757397, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2764018, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.276894, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.277284, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2779872, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.279332, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2798045, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2809181, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2819588, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.288042, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2891543, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2895672, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.290022, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2906673, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.29159, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2921488, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.2979913, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3017294, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3066347, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3078778, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3087068, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.309778, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.310747, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3120966, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.312804, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3135343, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3146396, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3152258, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.316344, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3170347, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3184187, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3191757, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3198977, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3206017, "supported_languages": null}, "macro.dbt_snow_mask.get_meta_objects": {"unique_id": "macro.dbt_snow_mask.get_meta_objects", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/get_meta_objects.sql", "original_file_path": "macros/snow-mask/get_meta_objects.sql", "name": "get_meta_objects", "macro_sql": "{% macro get_meta_objects(node_unique_id, meta_key,node_resource_type=\"model\") %}\n\t{% if execute %}\n\n        {% set meta_columns = [] %}\n        {% if node_resource_type == \"source\" %} \n            {% set columns = graph.sources[node_unique_id]['columns']  %}\n        {% else %}\n            {% set columns = graph.nodes[node_unique_id]['columns']  %}\n        {% endif %}\n        \n        {% if meta_key is not none %}\n            {% if node_resource_type == \"source\" %} \n                {% for column in columns if graph.sources[node_unique_id]['columns'][column]['meta'][meta_key] | length > 0 %}\n                    {% set meta_dict = graph.sources[node_unique_id]['columns'][column]['meta'] %}\n                    {% for key, value in meta_dict.items() if key == meta_key %}\n                        {% set meta_tuple = (column ,value ) %}\n                        {% do meta_columns.append(meta_tuple) %}\n                    {% endfor %}\n                {% endfor %}\n            {% else %}\n                {% for column in columns if graph.nodes[node_unique_id]['columns'][column]['meta'][meta_key] | length > 0 %}\n                    {% set meta_dict = graph.nodes[node_unique_id]['columns'][column]['meta'] %}\n                    {% for key, value in meta_dict.items() if key == meta_key %}\n                        {% set meta_tuple = (column ,value ) %}\n                        {% do meta_columns.append(meta_tuple) %}\n                    {% endfor %}\n                {% endfor %}\n            {% endif %}\n        {% else %}\n            {% do meta_columns.append(column|upper) %}\n        {% endif %}\n\n        {{ return(meta_columns) }}\n\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3270707, "supported_languages": null}, "macro.dbt_snow_mask.get_masking_policy_list_for_sources": {"unique_id": "macro.dbt_snow_mask.get_masking_policy_list_for_sources", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/create-policy/get_masking_policy_list_for_sources.sql", "original_file_path": "macros/snow-mask/create-policy/get_masking_policy_list_for_sources.sql", "name": "get_masking_policy_list_for_sources", "macro_sql": "{% macro get_masking_policy_list_for_sources(meta_key) %}\n\n    {% set masking_policies = [] %}\n\n    {% for node in graph.sources.values() -%}\n\n        {{ log(modules.datetime.datetime.now().strftime(\"%H:%M:%S\") ~ \" | macro - now processing            : \" ~ node.unique_id | string , info=False) }}\n        \n        {% set node_database = node.database | string %}\n        {% set node_schema   = node.schema | string %}\n        {% set node_unique_id = node.unique_id | string %}\n        {% set node_resource_type = node.resource_type | string %}\n\n        {% set meta_columns = dbt_snow_mask.get_meta_objects(node_unique_id,meta_key,node_resource_type) %}\n    \n        {%- for meta_tuple in meta_columns if meta_columns | length > 0 %}\n            {{ log(modules.datetime.datetime.now().strftime(\"%H:%M:%S\") ~ \" | macro - meta_columns               : \" ~ node_unique_id ~ \" has \" ~ meta_columns | string ~ \" masking tags set\", info=False) }}\n\n            {% set column   = meta_tuple[0] %}\n            {% set masking_policy_name  = meta_tuple[1] %}\n            \n            {% if masking_policy_name is not none %}\n                {% set masking_policy_tuple = (node_database, node_schema, meta_tuple[1]) %}\n                {% do masking_policies.append(masking_policy_tuple) %}\n            {% endif %}\n\n        {% endfor %}\n    \n    {% endfor %}\n\n    {{ return(masking_policies) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snow_mask.get_meta_objects"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3316023, "supported_languages": null}, "macro.dbt_snow_mask.get_masking_policy_list_for_models": {"unique_id": "macro.dbt_snow_mask.get_masking_policy_list_for_models", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/create-policy/get_masking_policy_list_for_models.sql", "original_file_path": "macros/snow-mask/create-policy/get_masking_policy_list_for_models.sql", "name": "get_masking_policy_list_for_models", "macro_sql": "{% macro get_masking_policy_list_for_models(meta_key) %}\n\n    {% set masking_policies = [] %}\n\n    {% for node in graph.nodes.values() -%}\n\n        {{ log(modules.datetime.datetime.now().strftime(\"%H:%M:%S\") ~ \" | macro - now processing            : \" ~ node.unique_id | string , info=False) }}\n        \n        {% set node_database = node.database | string %}\n        {% set node_schema   = node.schema | string %}\n        {% set node_unique_id = node.unique_id | string %}\n        {% set node_resource_type = node.resource_type | string %}\n\n        {% set meta_columns = dbt_snow_mask.get_meta_objects(node_unique_id,meta_key,node_resource_type) %}\n    \n        {%- for meta_tuple in meta_columns if meta_columns | length > 0 %}\n            {{ log(modules.datetime.datetime.now().strftime(\"%H:%M:%S\") ~ \" | macro - meta_columns               : \" ~ node_unique_id ~ \" has \" ~ meta_columns | string ~ \" masking tags set\", info=False) }}\n\n            {% set column   = meta_tuple[0] %}\n            {% set masking_policy_name  = meta_tuple[1] %}\n            \n            {% if masking_policy_name is not none %}\n                {% set masking_policy_tuple = (node_database, node_schema, meta_tuple[1]) %}\n                {% do masking_policies.append(masking_policy_tuple) %}\n            {% endif %}\n\n        {% endfor %}\n    \n    {% endfor %}\n\n    {{ return(masking_policies) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snow_mask.get_meta_objects"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3361304, "supported_languages": null}, "macro.dbt_snow_mask.create_masking_policy": {"unique_id": "macro.dbt_snow_mask.create_masking_policy", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/create-policy/create_masking_policy.sql", "original_file_path": "macros/snow-mask/create-policy/create_masking_policy.sql", "name": "create_masking_policy", "macro_sql": "{% macro create_masking_policy(resource_type=\"sources\",meta_key=\"masking_policy\") %}\n\n{% if execute %}\n\n    {% set masking_policies = [] %}\n\n    {% if resource_type == \"sources\" %}\n        {% set masking_policies = dbt_snow_mask.get_masking_policy_list_for_sources(meta_key) %}\n    {% else %}\n        {% set masking_policies = dbt_snow_mask.get_masking_policy_list_for_models(meta_key) %}\n    {% endif %}\n\n    {% for masking_policy in masking_policies | unique -%}\n\n        {% set masking_policy_db = masking_policy[0] | string  %}\n        {% set masking_policy_schema = masking_policy[1] | string  %}\n\n        {# Override the database and schema name when use_common_masking_policy_db flag is set #}\n        {%- if (var('use_common_masking_policy_db', 'False')|upper in ['TRUE','YES']) -%}\n            {% if (var('common_masking_policy_db') and var('common_masking_policy_schema')) %}\n                {% set masking_policy_db = var('common_masking_policy_db') | string  %}\n                {% set masking_policy_schema = var('common_masking_policy_schema') | string  %}\n            {% endif %}\n        {% endif %}\n\n        {# Override the schema name (in the masking_policy_db) when use_common_masking_policy_schema_only flag is set #}\n        {%- if (var('use_common_masking_policy_schema_only', 'False')|upper in ['TRUE','YES']) and (var('use_common_masking_policy_db', 'False')|upper in ['FALSE','NO']) -%}\n            {% if var('common_masking_policy_schema') %}\n                {% set masking_policy_schema = var('common_masking_policy_schema') | string  %}\n            {% endif %}\n        {% endif %}\n\n        {% set current_policy_name = masking_policy[2] | string  %}\n\n        {%- if (var('create_masking_policy_schema', 'True')|upper in ['TRUE','YES']) -%}\n            {% do adapter.create_schema(api.Relation.create(database=masking_policy_db, schema=masking_policy_schema)) %}\n        {% endif %}\n\n        {% set call_masking_policy_macro = context[\"create_masking_policy_\" | string ~ current_policy_name | string]  %}\n        {% set result = run_query(call_masking_policy_macro(masking_policy_db, masking_policy_schema)) %}\n    {% endfor %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snow_mask.get_masking_policy_list_for_sources", "macro.dbt_snow_mask.get_masking_policy_list_for_models", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.342214, "supported_languages": null}, "macro.dbt_snow_mask.apply_masking_policy": {"unique_id": "macro.dbt_snow_mask.apply_masking_policy", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/apply-policy/apply_masking_policy.sql", "original_file_path": "macros/snow-mask/apply-policy/apply_masking_policy.sql", "name": "apply_masking_policy", "macro_sql": "{% macro apply_masking_policy(resource_type=\"models\",meta_key=\"masking_policy\") %}\n\n    {% if execute %}\n\n        {% if resource_type == \"sources\" %}\n            {{ dbt_snow_mask.apply_masking_policy_list_for_sources(meta_key) }}\n        {% elif resource_type|lower in [\"models\", \"snapshots\"] %}\n            {{ dbt_snow_mask.apply_masking_policy_list_for_models(meta_key) }}\n        {% endif %}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy_list_for_sources", "macro.dbt_snow_mask.apply_masking_policy_list_for_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3437786, "supported_languages": null}, "macro.dbt_snow_mask.apply_masking_policy_list_for_models": {"unique_id": "macro.dbt_snow_mask.apply_masking_policy_list_for_models", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/apply-policy/apply_masking_policy_list_for_models.sql", "original_file_path": "macros/snow-mask/apply-policy/apply_masking_policy_list_for_models.sql", "name": "apply_masking_policy_list_for_models", "macro_sql": "{% macro apply_masking_policy_list_for_models(meta_key,operation_type=\"apply\") %}\n\n{% if execute %}\n\n    {% if operation_type == \"apply\" %}\n    \n        {% set model_id = model.unique_id | string %}\n        {% set alias    = model.alias %}    \n        {% set database = model.database %}\n        {% set schema   = model.schema %}\n        {% set model_resource_type = model.resource_type | string %}\n\n        {% if model_resource_type|lower in [\"model\", \"snapshot\"] %}\n\n            {# This dictionary stores a mapping between materializations in dbt and the objects they will generate in Snowflake  #}\n            {% set materialization_map = {\"table\": \"table\", \"view\": \"view\", \"incremental\": \"table\", \"snapshot\": \"table\"} %}\n\n            {# Append custom materializations to the list of standard materializations  #}\n            {% do materialization_map.update(fromjson(var('custom_materializations_map', '{}'))) %}\n\n            {% set materialization = materialization_map[model.config.get(\"materialized\")] %}\n            {% set meta_columns = dbt_snow_mask.get_meta_objects(model_id,meta_key) %}\n\n            {% set masking_policy_db = model.database %}\n            {% set masking_policy_schema = model.schema %}\n            \n            {# Override the database and schema name when use_common_masking_policy_db flag is set #}\n            {%- if (var('use_common_masking_policy_db', 'False')|upper in ['TRUE','YES']) -%}\n                {% if (var('common_masking_policy_db') and var('common_masking_policy_schema')) %}\n                    {% set masking_policy_db = var('common_masking_policy_db') | string  %}\n                    {% set masking_policy_schema = var('common_masking_policy_schema') | string  %}\n                {% endif %}\n            {% endif %}\n\n            {# Override the schema name (in the masking_policy_db) when use_common_masking_policy_schema_only flag is set #}\n            {%- if (var('use_common_masking_policy_schema_only', 'False')|upper in ['TRUE','YES']) and (var('use_common_masking_policy_db', 'False')|upper in ['FALSE','NO']) -%}\n                {% if var('common_masking_policy_schema') %}\n                    {% set masking_policy_schema = var('common_masking_policy_schema') | string  %}\n                {% endif %}\n            {% endif %}\n\n            {% set masking_policy_list_sql %}     \n                show masking policies in {{masking_policy_db}}.{{masking_policy_schema}};\n                select $3||'.'||$4||'.'||$2 as masking_policy from table(result_scan(last_query_id()));\n            {% endset %}\n\n            {# If there are some masking policies to be applied in this model, we should show the masking policies in the schema #}\n            {% if meta_columns | length > 0 %}\n                {% set masking_policy_list = dbt_utils.get_query_results_as_dict(masking_policy_list_sql) %}\n            {% endif %}\n\n            {%- for meta_tuple in meta_columns if meta_columns | length > 0 %}\n                {% set column   = meta_tuple[0] %}\n                {% set masking_policy_name  = meta_tuple[1] %}\n                    {% if masking_policy_name is not none %}\n\n                    {% for masking_policy_in_db in masking_policy_list['MASKING_POLICY'] %}\n                        {% if masking_policy_db|upper ~ '.' ~ masking_policy_schema|upper ~ '.' ~ masking_policy_name|upper == masking_policy_in_db %}\n                            {{ log(modules.datetime.datetime.now().strftime(\"%H:%M:%S\") ~ \" | \" ~ operation_type ~ \"ing masking policy to model  : \" ~ masking_policy_db|upper ~ '.' ~ masking_policy_schema|upper ~ '.' ~ masking_policy_name|upper ~ \" on \" ~ database ~ '.' ~ schema ~ '.' ~ alias ~ '.' ~ column ~ ' [force = ' ~ var('use_force_applying_masking_policy','False') ~ ']', info=True) }}\n                            {% set query %}\n                            alter {{materialization}}  {{database}}.{{schema}}.{{alias}} modify column  {{column}} set masking policy {{masking_policy_db}}.{{masking_policy_schema}}.{{masking_policy_name}} {% if var('use_force_applying_masking_policy','False')|upper in ['TRUE','YES'] %} force {% endif %};\n                            {% endset %}\n                            {% do run_query(query) %}\n                        {% endif %}\n                    {% endfor %}\n\n                {% endif %}\n            {% endfor %}\n\n        {% endif %}\n    \n    {% elif operation_type == \"unapply\" %}\n\n        {% for node in graph.nodes.values() -%}\n\n            {% set database = node.database | string %}\n            {% set schema   = node.schema | string %}\n            {% set node_unique_id = node.unique_id | string %}\n            {% set node_resource_type = node.resource_type | string %}\n            {% set materialization_map = {\"table\": \"table\", \"view\": \"view\", \"incremental\": \"table\", \"snapshot\": \"table\"} %}\n\n            {% if node_resource_type|lower in [\"model\", \"snapshot\"] %}\n\n                {# Append custom materializations to the list of standard materializations  #}\n                {% do materialization_map.update(fromjson(var('custom_materializations_map', '{}'))) %}\n\n                {% set materialization = materialization_map[node.config.get(\"materialized\")] %}\n                {% set alias    = node.alias %}\n\n                {% set meta_columns = dbt_snow_mask.get_meta_objects(node_unique_id,meta_key,node_resource_type) %}\n\n                {%- for meta_tuple in meta_columns if meta_columns | length > 0 %}\n                    {% set column   = meta_tuple[0] %}\n                    {% set masking_policy_name  = meta_tuple[1] %}\n\n                    {% if masking_policy_name is not none %}\n                        {{ log(modules.datetime.datetime.now().strftime(\"%H:%M:%S\") ~ \" | \" ~ operation_type ~ \"ing masking policy to model  : \" ~ database|upper ~ '.' ~ schema|upper ~ '.' ~ masking_policy_name|upper ~ \" on \" ~ database ~ '.' ~ schema ~ '.' ~ alias ~ '.' ~ column, info=True) }}\n                        {% set query %}\n                            alter {{materialization}}  {{database}}.{{schema}}.{{alias}} modify column  {{column}} unset masking policy\n                        {% endset %}\n                        {% do run_query(query) %}\n                    {% endif %}\n                \n                {% endfor %}\n\n            {% endif %}\n\n        {% endfor %}\n\n    {% endif %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snow_mask.get_meta_objects", "macro.dbt_utils.get_query_results_as_dict", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3614252, "supported_languages": null}, "macro.dbt_snow_mask.apply_masking_policy_list_for_sources": {"unique_id": "macro.dbt_snow_mask.apply_masking_policy_list_for_sources", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/apply-policy/apply_masking_policy_list_for_sources.sql", "original_file_path": "macros/snow-mask/apply-policy/apply_masking_policy_list_for_sources.sql", "name": "apply_masking_policy_list_for_sources", "macro_sql": "{% macro apply_masking_policy_list_for_sources(meta_key,operation_type=\"apply\") %}\n\n{% if execute %}\n\n    {% for node in graph.sources.values() -%}\n\n        {% set database = node.database | string %}\n        {% set schema   = node.schema | string %}\n        {% set name   = node.name | string %}\n        {% set identifier = (node.identifier | default(name, True)) | string %}\n\n        {% set unique_id = node.unique_id | string %}\n        {% set resource_type = node.resource_type | string %}\n        {% set materialization = \"table\" %}\n\n        {% set relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n        {% if relation.is_view %}\n          {% set materialization = \"view\" %}\n        {% endif %}\n\n        {% set meta_columns = dbt_snow_mask.get_meta_objects(unique_id,meta_key,resource_type) %}\n\n        {# Use the database and schema for the source node: #}\n        {#     In the apple for models variant of this file it instead uses the model.database/schema metadata #}\n        {% set masking_policy_db = node.database %}\n        {% set masking_policy_schema = node.schema %}\n\t\t\n        {# Override the database and schema name when use_common_masking_policy_db flag is set #}\n        {%- if (var('use_common_masking_policy_db', 'False')|upper in ['TRUE','YES']) -%}\n            {% if (var('common_masking_policy_db') and var('common_masking_policy_schema')) %}\n                {% set masking_policy_db = var('common_masking_policy_db') | string  %}\n                {% set masking_policy_schema = var('common_masking_policy_schema') | string  %}\n            {% endif %}\n        {% endif %}\n\n        {# Override the schema name (in the masking_policy_db) when use_common_masking_policy_schema_only flag is set #}\n        {%- if (var('use_common_masking_policy_schema_only', 'False')|upper in ['TRUE','YES']) and (var('use_common_masking_policy_db', 'False')|upper in ['FALSE','NO']) -%}\n            {% if var('common_masking_policy_schema') %}\n                {% set masking_policy_schema = var('common_masking_policy_schema') | string  %}\n            {% endif %}\n        {% endif %}\n\n        {% set masking_policy_list_sql %}\n            show masking policies in {{masking_policy_db}}.{{masking_policy_schema}};\n            select $3||'.'||$4||'.'||$2 as masking_policy from table(result_scan(last_query_id()));\n        {% endset %}\n\n        {# If there are some masking policies to be applied in this model, we should show the masking policies in the schema #}\n        {% if meta_columns | length > 0 %}\n            {% set masking_policy_list = dbt_utils.get_query_results_as_dict(masking_policy_list_sql) %}\n        {% endif %}\n\n        {%- for meta_tuple in meta_columns if meta_columns | length > 0 %}\n            {% set column   = meta_tuple[0] %}\n            {% set masking_policy_name  = meta_tuple[1] %}\n\n            {% if masking_policy_name is not none %}\n\n                {% for masking_policy_in_db in masking_policy_list['MASKING_POLICY'] %}\n                    {% if masking_policy_db|upper ~ '.' ~ masking_policy_schema|upper ~ '.' ~ masking_policy_name|upper == masking_policy_in_db %}\n                        {{ log(modules.datetime.datetime.now().strftime(\"%H:%M:%S\") ~ \" | \" ~ operation_type ~ \"ing masking policy to source : \" ~ masking_policy_db|upper ~ '.' ~ masking_policy_schema|upper ~ '.' ~ masking_policy_name|upper ~ \" on \" ~ database ~ '.' ~ schema ~ '.' ~ identifier ~ '.' ~ column ~ ' [force = ' ~ var('use_force_applying_masking_policy','False') ~ ']', info=True) }}\n                        {% set query %}\n                            {% if operation_type == \"apply\" %}\n                                alter {{materialization}}  {{database}}.{{schema}}.{{identifier}} modify column  {{column}} set masking policy  {{masking_policy_db}}.{{masking_policy_schema}}.{{masking_policy_name}} {% if var('use_force_applying_masking_policy','False')|upper in ['TRUE','YES'] %} force {% endif %}\n                            {% elif operation_type == \"unapply\" %}\n                                alter {{materialization}}  {{database}}.{{schema}}.{{identifier}} modify column  {{column}} unset masking policy\n                            {% endif %}\n                        {% endset %}\n                        {% do run_query(query) %}\n                    {% endif %}\n                {% endfor %}\n            {% endif %}\n\n        {% endfor %}\n\n    {% endfor %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snow_mask.get_meta_objects", "macro.dbt_utils.get_query_results_as_dict", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3737676, "supported_languages": null}, "macro.dbt_snow_mask.unapply_masking_policy": {"unique_id": "macro.dbt_snow_mask.unapply_masking_policy", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask/apply-policy/unapply_masking_policy.sql", "original_file_path": "macros/snow-mask/apply-policy/unapply_masking_policy.sql", "name": "unapply_masking_policy", "macro_sql": "{% macro unapply_masking_policy(resource_type=\"models\",meta_key=\"masking_policy\",operation_type=\"unapply\") %}\n\n    {% if execute %}\n\n        {% if resource_type == \"sources\" %}\n            {{ dbt_snow_mask.apply_masking_policy_list_for_sources(meta_key,operation_type) }}\n        {% elif resource_type|lower in [\"models\", \"snapshots\"] %}\n            {{ dbt_snow_mask.apply_masking_policy_list_for_models(meta_key,operation_type) }}\n        {% endif %}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snow_mask.apply_masking_policy_list_for_sources", "macro.dbt_snow_mask.apply_masking_policy_list_for_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3754818, "supported_languages": null}, "macro.dbt_snow_mask.create_masking_policy_mp_encrypt_pii": {"unique_id": "macro.dbt_snow_mask.create_masking_policy_mp_encrypt_pii", "package_name": "dbt_snow_mask", "root_path": "/github/workspace/transform/dbt_packages/dbt_snow_mask", "path": "macros/snow-mask-ddl/create_masking_policy_mp_encrypt_pii.sql", "original_file_path": "macros/snow-mask-ddl/create_masking_policy_mp_encrypt_pii.sql", "name": "create_masking_policy_mp_encrypt_pii", "macro_sql": "{% macro create_masking_policy_mp_encrypt_pii(node_database,node_schema) %}\n\n    CREATE MASKING POLICY IF NOT EXISTS {{node_database}}.{{node_schema}}.mp_encrypt_pii AS (val string) \n\n    RETURNS string ->\n        CASE WHEN CURRENT_ROLE() IN ('ANALYST') THEN val \n             WHEN CURRENT_ROLE() IN ('SYSADMIN') THEN SHA2(val)\n        ELSE '**********'\n        END\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3762438, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3775308, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3793557, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3821042, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3832314, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3843465, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.384861, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3901854, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3907533, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3912594, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3917518, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3921788, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3926342, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3943257, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3958035, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3963928, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3973072, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.398339, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.3992023, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4008343, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4031072, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4065902, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4115636, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.416513, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4240856, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.425263, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.426757, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4289646, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4296684, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4310994, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.433153, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4341388, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.435011, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4368412, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4379098, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4384007, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4397116, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4414837, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4439266, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4471037, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.448029, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4500115, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4513056, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4528391, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4551308, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4575565, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4613214, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4622643, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4628992, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4640248, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4647708, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4663994, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4685547, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4697568, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.470467, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4729075, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4750774, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4761379, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4765334, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4768918, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4780948, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4795556, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4805503, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4814875, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4824934, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4835417, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4848855, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4852421, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4857125, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.486194, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4875731, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4879367, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4886713, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4890196, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.48929, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4909227, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.491557, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4919207, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4922738, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4926527, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4944105, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4946966, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4948905, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4950786, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4958646, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4961748, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4965534, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.496828, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.497161, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4985285, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.498885, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4992197, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.4995544, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5012693, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5019426, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.502358, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5030196, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5034325, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5041077, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5045393, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.505218, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5056384, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5063014, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5067148, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.507373, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5082638, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.508954, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5099468, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5111296, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.512355, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.513012, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5141962, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5151405, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5161068, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5168808, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.517732, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.518407, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5192583, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5199249, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.520906, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5216591, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5227237, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5235505, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5245857, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5254006, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.526303, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.527009, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5278876, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5286152, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5295262, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5303857, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5314255, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5322545, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5333405, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5341668, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5351465, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5359185, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5368345, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5375347, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.538459, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5391605, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5400877, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5408218, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5417883, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5425594, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5434413, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5441303, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5454738, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5457537, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.546017, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5566676, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.558112, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.558913, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5601683, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.573037, "supported_languages": ["sql"]}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5748158, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5756788, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5770311, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.577784, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5789506, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5797606, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5810807, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5816507, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5831652, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.584816, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5862145, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5871866, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5883043, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5890775, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5902805, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.590709, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5916984, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5921502, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.59352, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5943484, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5955558, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.596142, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5977242, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.5992258, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6007898, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.601974, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6077163, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6115744, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6133668, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6155243, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6165373, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.616989, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.618148, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6194344, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6216016, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6224782, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6229022, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6242683, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6255903, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6264544, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.626897, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6277912, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/github/workspace/transform/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.628433, "supported_languages": null}, "macro.dbt_artifacts.migrate_artifacts_v1_to_v2": {"unique_id": "macro.dbt_artifacts.migrate_artifacts_v1_to_v2", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/migrate_v1_to_v2.sql", "original_file_path": "macros/migrate_v1_to_v2.sql", "name": "migrate_artifacts_v1_to_v2", "macro_sql": "{% macro migrate_artifacts_v1_to_v2() %}\r\n\r\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\r\n{% set src_results = source('dbt_artifacts', 'dbt_run_results') %}\r\n{% set src_results_nodes = source('dbt_artifacts', 'dbt_run_results_nodes') %}\r\n{% set src_manifest_nodes = source('dbt_artifacts', 'dbt_manifest_nodes') %}\r\n\r\n{% set migrate_results_query %}\r\n\r\n    insert into {{ src_results }}\r\n        with run_results as (\r\n\r\n            select data\r\n            from {{ src_dbt_artifacts }}\r\n            where artifact_type = 'run_results.json'\r\n\r\n        )\r\n        \r\n        select\r\n            data:metadata:invocation_id::string as command_invocation_id,\r\n            -- NOTE: DBT_CLOUD_RUN_ID is case sensitive here \r\n            data:metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\r\n            {{ make_artifact_run_id() }} as artifact_run_id,\r\n            data:metadata:generated_at::timestamp_tz as artifact_generated_at,\r\n            data:metadata:dbt_version::string as dbt_version,\r\n            data:metadata:env as env,\r\n            data:elapsed_time,\r\n            data:args:which::string as execution_command,\r\n            coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\r\n            data:args:models as selected_models,\r\n            data:args:target::string as target,\r\n            data:metadata,\r\n            data:args\r\n        from run_results;\r\n\r\n{% endset %}\r\n\r\n{% set migrate_results_nodes_query %}\r\n\r\n    insert into {{ src_results_nodes }}\r\n        with run_results as (\r\n\r\n            select data\r\n            from {{ src_dbt_artifacts }}\r\n            where artifact_type = 'run_results.json'\r\n\r\n        ),\r\n        \r\n        raw_data as (\r\n\r\n            select\r\n                data:metadata as metadata,\r\n                data,\r\n                metadata:invocation_id::string as command_invocation_id,\r\n                -- NOTE: DBT_CLOUD_RUN_ID is case sensitive here \r\n                metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\r\n                {{ make_artifact_run_id() }} as artifact_run_id,\r\n                metadata:generated_at::timestamp_tz as generated_at\r\n            from run_results\r\n\r\n        )\r\n\r\n        {{ flatten_results(\"raw_data\") }};\r\n\r\n{% endset %}\r\n\r\n{% set migrate_manifest_nodes_query %}\r\n\r\n    insert into {{ src_manifest_nodes }}\r\n        with manifests as (\r\n\r\n            select data\r\n            from {{ src_dbt_artifacts }}\r\n            where artifact_type = 'manifest.json'\r\n\r\n        ),\r\n        \r\n        raw_data as (\r\n\r\n            select\r\n                data:metadata as metadata,\r\n                metadata:invocation_id::string as command_invocation_id,\r\n                -- NOTE: DBT_CLOUD_RUN_ID is case sensitive here \r\n                metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\r\n                {{ make_artifact_run_id() }} as artifact_run_id,\r\n                metadata:generated_at::timestamp_tz as generated_at,\r\n                data\r\n            from manifests\r\n\r\n        )\r\n\r\n        {{ flatten_manifest(\"raw_data\") }};\r\n\r\n{% endset %}\r\n\r\n{% set truncate_artifacts_query %}\r\n\r\n    truncate {{ src_dbt_artifacts }}\r\n\r\n{% endset %}\r\n\r\n{% do log(\"Migrating Results: \" ~ migrate_results_query, info=True) %}\r\n{% do run_query(migrate_results_query) %}\r\n\r\n{% do log(\"Migrating Result Nodes: \" ~ migrate_results_nodes_query, info=True) %}\r\n{% do run_query(migrate_results_nodes_query) %}\r\n\r\n{% do log(\"Migrating Manifest Nodes: \" ~ migrate_manifest_nodes_query, info=True) %}\r\n{% do run_query(migrate_manifest_nodes_query) %}\r\n\r\n{% do log(\"Truncating Artifacts Table: \" ~ truncate_artifacts_query, info=True) %}\r\n{% do run_query(truncate_artifacts_query) %}\r\n\r\n{% do log(\"DONE! :)\", info=True) %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.make_artifact_run_id", "macro.dbt_artifacts.flatten_results", "macro.dbt_artifacts.flatten_manifest", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6356075, "supported_languages": null}, "macro.dbt_artifacts.upload_dbt_artifacts_v2": {"unique_id": "macro.dbt_artifacts.upload_dbt_artifacts_v2", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/upload_artifacts_v2.sql", "original_file_path": "macros/upload_artifacts_v2.sql", "name": "upload_dbt_artifacts_v2", "macro_sql": "{% macro upload_dbt_artifacts_v2(prefix='target/') %}\n\n{# All main dbt commands produce both files and so set both by default #}\n{% set filenames = ['manifest', 'run_results'] %}\n\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\n{% set artifact_stage = src_dbt_artifacts.database ~ \".\" ~ src_dbt_artifacts.schema ~ \".\" ~ var('dbt_artifacts_stage', 'dbt_artifacts_stage') %}\n\n{% set src_results = source('dbt_artifacts', 'dbt_run_results') %}\n{% set src_results_nodes = source('dbt_artifacts', 'dbt_run_results_nodes') %}\n{% set src_manifest_nodes = source('dbt_artifacts', 'dbt_manifest_nodes') %}\n\n{# All uploads are prefixed by the invocation_id in the stage to isolate parallel jobs from one another #}\n{% set remove_query %}\n    remove @{{ artifact_stage }} pattern='.*\\/{{ invocation_id }}\\/.*\\.json.gz';\n{% endset %}\n\n{% set results_query %}\n\n    -- Merge to avoid duplicates\n    merge into {{ src_results }} as old_data using (\n        with raw_data as (\n\n            select\n                run_results.$1:metadata as metadata,\n                run_results.$1:args as args,\n                run_results.$1:elapsed_time::float as elapsed_time\n            from @{{ artifact_stage }}/{{ invocation_id }} as run_results\n\n        )\n\n        select\n            metadata:invocation_id::string as command_invocation_id,\n            -- NOTE: DBT_CLOUD_RUN_ID is case sensitive here\n            metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n            {{ make_artifact_run_id() }} as artifact_run_id,\n            metadata:generated_at::timestamp_tz as artifact_generated_at,\n            metadata:dbt_version::string as dbt_version,\n            metadata:env as env,\n            elapsed_time,\n            args:which::string as execution_command,\n            coalesce(args:full_refresh, 'false')::boolean as was_full_refresh,\n            coalesce(args:models, args:select) as selected_models,\n            args:target::string as target,\n            metadata,\n            args\n        from raw_data\n    ) as new_data\n    on old_data.command_invocation_id = new_data.command_invocation_id\n    -- NB: No clause for \"when matched\" - as matching rows should be skipped.\n    when not matched then insert (\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        dbt_version,\n        env,\n        elapsed_time,\n        execution_command,\n        was_full_refresh,\n        selected_models,\n        target,\n        metadata,\n        args\n    ) values (\n        new_data.command_invocation_id,\n        new_data.dbt_cloud_run_id,\n        new_data.artifact_run_id,\n        new_data.artifact_generated_at,\n        new_data.dbt_version,\n        new_data.env,\n        new_data.elapsed_time,\n        new_data.execution_command,\n        new_data.was_full_refresh,\n        new_data.selected_models,\n        new_data.target,\n        new_data.metadata,\n        new_data.args\n    )\n\n{% endset %}\n\n{% set result_nodes_query %}\n\n    -- Merge to avoid duplicates\n    merge into {{ src_results_nodes }} as old_data using (\n        with raw_data as (\n\n            select\n                run_results.$1:metadata as metadata,\n                run_results.$1 as data,\n                metadata:invocation_id::string as command_invocation_id,\n                -- NOTE: DBT_CLOUD_RUN_ID is case sensitive here\n                metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n                {{ make_artifact_run_id() }} as artifact_run_id,\n                metadata:generated_at::timestamp_tz as generated_at\n            from @{{ artifact_stage }}/{{ invocation_id }} as run_results\n\n        )\n\n        {{ flatten_results(\"raw_data\") }}\n\n    ) as new_data\n    on old_data.command_invocation_id = new_data.command_invocation_id and old_data.node_id = new_data.node_id\n    -- NB: No clause for \"when matched\" - as matching rows should be skipped.\n    when not matched then insert (\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        execution_command,\n        was_full_refresh,\n        node_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        result_json\n    ) values (\n        new_data.command_invocation_id,\n        new_data.dbt_cloud_run_id,\n        new_data.artifact_run_id,\n        new_data.artifact_generated_at,\n        new_data.execution_command,\n        new_data.was_full_refresh,\n        new_data.node_id,\n        new_data.status,\n        new_data.compile_started_at,\n        new_data.query_completed_at,\n        new_data.total_node_runtime,\n        new_data.result_json\n    )\n\n{% endset %}\n\n{% set manifest_nodes_query %}\n\n    -- Merge to avoid duplicates\n    merge into {{ src_manifest_nodes }} as old_data using (\n        with raw_data as (\n\n            select\n                manifests.$1:metadata as metadata,\n                metadata:invocation_id::string as command_invocation_id,\n                -- NOTE: DBT_CLOUD_RUN_ID is case sensitive here\n                metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n                {{ make_artifact_run_id() }} as artifact_run_id,\n                metadata:generated_at::timestamp_tz as generated_at,\n                manifests.$1 as data\n            from @{{ artifact_stage }}/{{ invocation_id }} as manifests\n\n        )\n\n        {{ flatten_manifest(\"raw_data\") }}\n\n    ) as new_data\n    -- NB: We dedupe on artifact_run_id rather than command_invocation_id for manifest nodes\n    -- to avoid holding duplicate data.\n    on old_data.artifact_run_id = new_data.artifact_run_id and old_data.node_id = new_data.node_id\n    -- NB: No clause for \"when matched\" - as matching rows should be skipped.\n    when not matched then insert (\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        node_id,\n        resource_type,\n        node_database,\n        node_schema,\n        name,\n        node_json\n    ) values (\n        new_data.command_invocation_id,\n        new_data.dbt_cloud_run_id,\n        new_data.artifact_run_id,\n        new_data.artifact_generated_at,\n        new_data.node_id,\n        new_data.resource_type,\n        new_data.node_database,\n        new_data.node_schema,\n        new_data.name,\n        new_data.node_json\n    )\n\n{% endset %}\n\n{% do log(\"Clearing existing files from Stage: \" ~ remove_query, info=True) %}\n{% do run_query(remove_query) %}\n\n{% for filename in filenames %}\n\n    {% set file = filename ~ '.json' %}\n\n    {% set put_query %}\n        put file://{{ prefix }}{{ file }} @{{ artifact_stage }}/{{ invocation_id }} auto_compress=true;\n    {% endset %}\n\n    {% do log(\"Uploading \" ~ file ~ \" to Stage: \" ~ put_query, info=True) %}\n    {% do run_query(put_query) %}\n\n    {% if filename == 'run_results' %}\n        {% do log(\"Persisting unflattened results \" ~ file ~ \" from Stage: \" ~ results_query, info=True) %}\n        {% do run_query(results_query) %}\n        {% do log(\"Persisting flattened results \" ~ file ~ \" from Stage: \" ~ result_nodes_query, info=True) %}\n        {% do run_query(result_nodes_query) %}\n\n    {% elif filename == 'manifest' %}\n        {% do log(\"Persisting flattened manifest nodes \" ~ file ~ \" from Stage: \" ~ manifest_nodes_query, info=True) %}\n        {% do run_query(manifest_nodes_query) %}\n\n    {% endif %}\n\n    {% do log(\"Clearing new files from Stage: \" ~ remove_query, info=True) %}\n    {% do run_query(remove_query) %}\n\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.make_artifact_run_id", "macro.dbt_artifacts.flatten_results", "macro.dbt_artifacts.flatten_manifest", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.648501, "supported_languages": null}, "macro.dbt_artifacts.dedupe_dbt_artifacts_v2": {"unique_id": "macro.dbt_artifacts.dedupe_dbt_artifacts_v2", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/dedupe_artifacts_v2.sql", "original_file_path": "macros/dedupe_artifacts_v2.sql", "name": "dedupe_dbt_artifacts_v2", "macro_sql": "{% macro dedupe_dbt_artifacts_v2() %}\n\n{% set src_results = source('dbt_artifacts', 'dbt_run_results') %}\n{% set src_results_nodes = source('dbt_artifacts', 'dbt_run_results_nodes') %}\n{% set src_manifest_nodes = source('dbt_artifacts', 'dbt_manifest_nodes') %}\n\n{% for artifact_table, table_key in [\n    (src_results, 'command_invocation_id'),\n    (src_results_nodes, 'command_invocation_id, node_id'),\n    (src_manifest_nodes, 'artifact_run_id, node_id')\n] %}\n\n    {% set dedupe_results_query %}\n\n        -- NB: Using a non-temporary table allows the clone operation next.\n        create table {{ artifact_table.database }}.{{ artifact_table.schema }}.dbt_temp_artifact_table as\n            select * from {{ artifact_table }}\n            qualify row_number() over (\n                partition by {{ table_key }}\n                -- NB: Snowflake requires an order by clause, although all rows will be the same within a partition.\n                order by artifact_generated_at\n            ) = 1;\n\n        create or replace table {{ artifact_table }} clone {{ artifact_table.database }}.{{ artifact_table.schema }}.dbt_temp_artifact_table;\n\n        drop table {{ artifact_table.database }}.{{ artifact_table.schema }}.dbt_temp_artifact_table;\n\n    {% endset %}\n\n    {% do log(\"Deduping \" ~ artifact_table ~ \" : \" ~ dedupe_results_query, info=True) %}\n    {% do run_query(dedupe_results_query) %}\n\n{% endfor %}\n\n{% do log(\"Done\", info=True) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6522338, "supported_languages": null}, "macro.dbt_artifacts.create_artifact_resources": {"unique_id": "macro.dbt_artifacts.create_artifact_resources", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/create_artifact_resources.sql", "original_file_path": "macros/create_artifact_resources.sql", "name": "create_artifact_resources", "macro_sql": "{% macro create_artifact_resources() %}\n\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\n{% set artifact_stage = src_dbt_artifacts.database ~ \".\" ~ src_dbt_artifacts.schema ~ \".\" ~ var('dbt_artifacts_stage', 'dbt_artifacts_stage') %}\n\n{% set src_results = source('dbt_artifacts', 'dbt_run_results') %}\n{% set src_results_nodes = source('dbt_artifacts', 'dbt_run_results_nodes') %}\n{% set src_manifest_nodes = source('dbt_artifacts', 'dbt_manifest_nodes') %}\n\n{{ create_schema(src_dbt_artifacts) }}\n\n{% set create_v1_stage_query %}\ncreate stage if not exists {{ src_dbt_artifacts }}\nfile_format = (type = json);\n{% endset %}\n\n{% set create_v2_stage_query %}\ncreate stage if not exists {{ artifact_stage }}\nfile_format = (type = json);\n{% endset %}\n\n{% set create_v1_table_query %}\ncreate table if not exists {{ src_dbt_artifacts }} (\n    data variant,\n    generated_at timestamp,\n    path string,\n    artifact_type string\n);\n{% endset %}\n\n{% set create_v2_results_query %}\ncreate table if not exists {{ src_results }} (\n    command_invocation_id string,\n    dbt_cloud_run_id int,\n    artifact_run_id string,\n    artifact_generated_at timestamp_tz,\n    dbt_version string,\n    env variant,\n    elapsed_time double,\n    execution_command string,\n    was_full_refresh boolean,\n    selected_models variant,\n    target string,\n    metadata variant,\n    args variant\n);\n{% endset %}\n\n{% set create_v2_result_nodes_table_query %}\ncreate table if not exists {{ src_results_nodes }} (\n    command_invocation_id string,\n    dbt_cloud_run_id int,\n    artifact_run_id string,\n    artifact_generated_at timestamp_tz,\n    execution_command string,\n    was_full_refresh boolean,\n    node_id string,\n    status string,\n    compile_started_at timestamp_tz,\n    query_completed_at timestamp_tz,\n    total_node_runtime float,\n    result_json variant\n);\n{% endset %}\n\n{% set create_v2_manifest_nodes_table_query %}\ncreate table if not exists {{ src_manifest_nodes }} (\n    command_invocation_id string,\n    dbt_cloud_run_id int,\n    artifact_run_id string,\n    artifact_generated_at timestamp_tz,\n    node_id string,\n    resource_type string,\n    node_database string,\n    node_schema string,\n    name string,\n    node_json variant\n);\n{% endset %}\n\n{% do log(\"Creating V1 Stage: \" ~ create_v1_stage_query, info=True) %}\n{% do run_query(create_v1_stage_query) %}\n\n{% do log(\"Creating V2 Stage: \" ~ create_v2_stage_query, info=True) %}\n{% do run_query(create_v2_stage_query) %}\n\n{% do log(\"Creating V1 Table: \" ~ create_v1_table_query, info=True) %}\n{% do run_query(create_v1_table_query) %}\n\n{% do log(\"Creating V2 Results Table: \" ~ create_v2_results_query, info=True) %}\n{% do run_query(create_v2_results_query) %}\n\n{% do log(\"Creating V2 Result Nodes Table: \" ~ create_v2_result_nodes_table_query, info=True) %}\n{% do run_query(create_v2_result_nodes_table_query) %}\n\n{% do log(\"Creating V2 Manifest Nodes Table: \" ~ create_v2_manifest_nodes_table_query, info=True) %}\n{% do run_query(create_v2_manifest_nodes_table_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.659386, "supported_languages": null}, "macro.dbt_artifacts.make_artifact_run_id": {"unique_id": "macro.dbt_artifacts.make_artifact_run_id", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/artifact_run.sql", "original_file_path": "macros/artifact_run.sql", "name": "make_artifact_run_id", "macro_sql": "{% macro make_artifact_run_id() %}\r\n    sha2_hex(coalesce(dbt_cloud_run_id::string, command_invocation_id::string), 256)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6599343, "supported_languages": null}, "macro.dbt_artifacts.upload_dbt_artifacts": {"unique_id": "macro.dbt_artifacts.upload_dbt_artifacts", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/upload_artifacts.sql", "original_file_path": "macros/upload_artifacts.sql", "name": "upload_dbt_artifacts", "macro_sql": "{% macro upload_dbt_artifacts(filenames, prefix='target/') %}\n\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\n\n{# All uploads are prefixed by the invocation_id in the stage to isolate parallel jobs from one another #}\n{% set remove_query %}\n    remove @{{ src_dbt_artifacts }} pattern='.*\\/{{ invocation_id }}\\/.*\\.json.gz';\n{% endset %}\n\n{% do log(\"Clearing existing files from Stage: \" ~ remove_query, info=True) %}\n{% do run_query(remove_query) %}\n\n{% for filename in filenames %}\n\n    {% set file = filename ~ '.json' %}\n\n    {% set put_query %}\n        put file://{{ prefix }}{{ file }} @{{ src_dbt_artifacts }}/{{ invocation_id }} auto_compress=true;\n    {% endset %}\n\n    {% do log(\"Uploading \" ~ file ~ \" to Stage: \" ~ put_query, info=True) %}\n    {% do run_query(put_query) %}\n\n    {% set copy_query %}\n\n        -- Merge to avoid duplicates\n        merge into {{ src_dbt_artifacts }} as old_data using (\n            select\n            $1 as data,\n            $1:metadata:generated_at::timestamp_ntz as generated_at,\n            metadata$filename as path,\n            regexp_substr(metadata$filename, '([a-z_]+.json)') as artifact_type\n            from  @{{ src_dbt_artifacts }}/{{ invocation_id }}\n        ) as new_data\n        on old_data.generated_at = new_data.generated_at\n        -- NB: No clause for \"when matched\" - as matching rows should be skipped.\n        when not matched then insert (\n            data,\n            generated_at,\n            path,\n            artifact_type\n        ) values (\n            new_data.data,\n            new_data.generated_at,\n            new_data.path,\n            new_data.artifact_type\n        )\n\n    {% endset %}\n\n    {% do log(\"Copying \" ~ file ~ \" from Stage: \" ~ copy_query, info=True) %}\n    {% do run_query(copy_query) %}\n\n{% endfor %}\n\n{% do log(\"Clearing new files from Stage: \" ~ remove_query, info=True) %}\n{% do run_query(remove_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6647384, "supported_languages": null}, "macro.dbt_artifacts.flatten_results": {"unique_id": "macro.dbt_artifacts.flatten_results", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/flatten_results.sql", "original_file_path": "macros/flatten_results.sql", "name": "flatten_results", "macro_sql": "{% macro flatten_results(results_cte_name) %}\r\n\r\n    select\r\n        run_results.command_invocation_id,\r\n        run_results.dbt_cloud_run_id,\r\n        run_results.artifact_run_id,\r\n        run_results.generated_at::timestamp_tz as artifact_generated_at,\r\n        run_results.data:args:which::string as execution_command,\r\n        coalesce(run_results.data:args:full_refresh, 'false')::boolean as was_full_refresh,\r\n        result.value:unique_id::string as node_id,\r\n        result.value:status::string as status,\r\n\r\n        -- The first item in the timing array is the model-level `compile`\r\n        result.value:timing[0]:started_at::timestamp_tz as compile_started_at,\r\n\r\n        -- The second item in the timing array is `execute`.\r\n        result.value:timing[1]:completed_at::timestamp_tz as query_completed_at,\r\n\r\n        -- Confusingly, this does not match the delta of the above two timestamps.\r\n        -- should we calculate it instead?\r\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\r\n\r\n        -- Include the raw JSON to unpack the rest later.\r\n        result.value as result_json\r\n    from {{ results_cte_name }} as run_results,\r\n        lateral flatten(input => run_results.data:results) as result\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.665605, "supported_languages": null}, "macro.dbt_artifacts.flatten_manifest": {"unique_id": "macro.dbt_artifacts.flatten_manifest", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/flatten_manifest.sql", "original_file_path": "macros/flatten_manifest.sql", "name": "flatten_manifest", "macro_sql": "{% macro flatten_manifest(manifest_cte_name) %}\r\n\r\n    select\r\n        manifests.command_invocation_id,\r\n        manifests.dbt_cloud_run_id,\r\n        manifests.artifact_run_id,\r\n        manifests.generated_at::timestamp_tz as artifact_generated_at,\r\n        node.key as node_id,\r\n        node.value:resource_type::string as resource_type,\r\n        node.value:database::string as node_database,\r\n        node.value:schema::string as node_schema,\r\n        node.value:name::string as name,\r\n        -- Include the raw JSON to unpack other values.\r\n        node.value as node_json\r\n    from {{ manifest_cte_name }} as manifests,\r\n        lateral flatten(input => manifests.data:nodes) as node\r\n\r\n    union all\r\n\r\n    select\r\n        manifests.command_invocation_id,\r\n        manifests.dbt_cloud_run_id,\r\n        manifests.artifact_run_id,\r\n        manifests.generated_at::timestamp_tz as artifact_generated_at,\r\n        exposure.key as node_id,\r\n        'exposure' as resource_type,\r\n        null as node_database,\r\n        null as node_schema,\r\n        exposure.value:name::string as name,\r\n        -- Include the raw JSON to unpack other values.\r\n        exposure.value as node_json\r\n    from {{ manifest_cte_name }} as manifests,\r\n        lateral flatten(input => manifests.data:exposures) as exposure\r\n\r\n    union all\r\n\r\n    select\r\n        manifests.command_invocation_id,\r\n        manifests.dbt_cloud_run_id,\r\n        manifests.artifact_run_id,\r\n        manifests.generated_at::timestamp_tz as artifact_generated_at,\r\n        source.key as node_id,\r\n        'source' as resource_type,\r\n        source.value:database::string as node_database,\r\n        source.value:schema::string as node_schema,\r\n        source.value:name::string::string as name,\r\n        -- Include the raw JSON to unpack other values.\r\n        source.value as node_json\r\n    from {{ manifest_cte_name }} as manifests,\r\n        lateral flatten(input => manifests.data:sources) as source\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6668658, "supported_languages": null}, "macro.dbt_artifacts.dedupe_dbt_artifacts_v1": {"unique_id": "macro.dbt_artifacts.dedupe_dbt_artifacts_v1", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "macros/dedupe_artifacts_v1.sql", "original_file_path": "macros/dedupe_artifacts_v1.sql", "name": "dedupe_dbt_artifacts_v1", "macro_sql": "{% macro dedupe_dbt_artifacts_v1() %}\r\n\r\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\r\n\r\n{% set dedupe_results_query %}\r\n\r\n    -- NB: Using a non-temporary table allows the clone operation next.\r\n    create table {{ src_dbt_artifacts.database }}.{{ src_dbt_artifacts.schema }}.dbt_temp_artifact_table as\r\n        select * from {{ src_dbt_artifacts }}\r\n        qualify row_number() over (\r\n            partition by generated_at\r\n            -- NB: Snowflake requires an order by clause, although all rows will be the same within a partition.\r\n            order by generated_at\r\n        ) = 1;\r\n\r\n    create or replace table {{ src_dbt_artifacts }} clone {{ src_dbt_artifacts.database }}.{{ src_dbt_artifacts.schema }}.dbt_temp_artifact_table;\r\n\r\n    drop table {{ src_dbt_artifacts.database }}.{{ src_dbt_artifacts.schema }}.dbt_temp_artifact_table;\r\n\r\n{% endset %}\r\n\r\n{% do log(\"Deduping \" ~ src_dbt_artifacts ~ \" : \" ~ dedupe_results_query, info=True) %}\r\n{% do run_query(dedupe_results_query) %}\r\n\r\n\r\n{% do log(\"Done\", info=True) %}\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6693516, "supported_languages": null}, "macro.metrics.get_metric_sql": {"unique_id": "macro.metrics.get_metric_sql", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/get_metric_sql.sql", "original_file_path": "macros/get_metric_sql.sql", "name": "get_metric_sql", "macro_sql": "\n{%- macro get_metric_sql(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, where, metric_tree) %}\n\n{#- ############\nTODO: COMMENT AROUND how get metric sql doesn't do validation and that lives further upstream in calculate and develop\n############ -#}\n\n\n{#- ############\nLETS SET SOME VARIABLES!\n############ -#}\n\n{#- We have to break out calendar dimensions as their own list of acceptable dimensions. \nThis is because of the date-spining. If we don't do this, it creates impossible combinations\nof calendar dimension + base dimensions -#}\n{%- set calendar_dimensions = metrics.get_calendar_dimensions(dimensions) -%}\n\n{#- Additionally, we also have to restrict the dimensions coming in from the macro to \nno longer include those we've designated as calendar dimensions. That way they \nare correctly handled by the spining. We override the dimensions variable for \ncleanliness -#}\n{%- set non_calendar_dimensions = metrics.get_non_calendar_dimension_list(dimensions, var('custom_calendar_dimension_list',[])) -%}\n\n{#- Finally we set the relevant periods, which is a list of all time grains that need to be contained\nwithin the final dataset in order to accomplish base + secondary calc functionality. -#}\n{%- set relevant_periods = metrics.get_relevent_periods(grain, secondary_calculations) -%}\n\n{# Setting a variable to denote if the user has provided any dimensions #}\n{%- if non_calendar_dimensions | length > 0 -%}\n    {%- set dimensions_provided = true -%}\n{%- else -%}\n    {%- set dimensions_provided = false -%}\n{%- endif -%}\n\n{#- Here we set the calendar table as a variable, which ensures the default overwritten if they include\na custom calendar -#}\n{%- set calendar_tbl = ref(var('dbt_metrics_calendar_model', \"dbt_metrics_default_calendar\")) -%}\n\n{#- ############\nLET THE COMPOSITION BEGIN!\n############ -#}\n\n{#- First we add the calendar table - we only need to do this once no matter how many\nmetrics there are -#}\n{{ metrics.gen_calendar_cte(\n    calendar_tbl=calendar_tbl,\n    start_date=start_date, \n    end_date=end_date) \n    }}\n\n{#- Next we check if it is a composite metric or single metric by checking the length of the list -#}\n{#- This filter forms the basis of how we construct the SQL -#}\n\n{#- If composite, we begin by looping through each of the metric names that make\nup the composite metric. -#}\n\n{%- for metric_name in metric_tree[\"parent_set\"] -%}\n\n    {{ metrics.build_metric_sql(\n        metric_dictionary=metrics_dictionary[metric_name], \n        grain=grain, \n        dimensions=non_calendar_dimensions, \n        secondary_calculations=secondary_calculations, \n        start_date=start_date, \n        end_date=end_date,\n        calendar_tbl=calendar_tbl, \n        relevant_periods=relevant_periods,\n        calendar_dimensions=calendar_dimensions,\n        dimensions_provided=dimensions_provided\n    ) \n    }}\n\n{%- endfor -%}\n\n{%- if metric_tree[\"full_set\"] | length > 1 -%}\n\n    {{ metrics.gen_joined_metrics_cte(\n        metric_tree=metric_tree,\n        grain=grain, \n        dimensions=non_calendar_dimensions, \n        calendar_dimensions=calendar_dimensions, \n        secondary_calculations=secondary_calculations, \n        relevant_periods=relevant_periods,\n        metrics_dictionary=metrics_dictionary ) \n    }}\n\n{% endif -%}\n\n{{ metrics.gen_secondary_calculation_cte(\n    metric_tree=metric_tree,\n    grain=grain, \n    dimensions=non_calendar_dimensions, \n    secondary_calculations=secondary_calculations, \n    calendar_dimensions=calendar_dimensions,\n    metric_dictionary=metrics_dictionary \n    ) \n    }}\n\n{{ metrics.gen_final_cte(\n    metric_tree=metric_tree,\n    grain=grain, \n    dimensions=non_calendar_dimensions, \n    calendar_dimensions=calendar_dimensions, \n    relevant_periods=relevant_periods,\n    secondary_calculations=secondary_calculations,\n    where=where) \n    }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_calendar_dimensions", "macro.metrics.get_non_calendar_dimension_list", "macro.metrics.get_relevent_periods", "macro.metrics.gen_calendar_cte", "macro.metrics.build_metric_sql", "macro.metrics.gen_joined_metrics_cte", "macro.metrics.gen_secondary_calculation_cte", "macro.metrics.gen_final_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.674854, "supported_languages": null}, "macro.metrics.develop": {"unique_id": "macro.metrics.develop", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "name": "develop", "macro_sql": "{%- macro develop(develop_yml, metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) -%}\n    {{ return(adapter.dispatch('develop', 'metrics')(develop_yml, metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__develop"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6785734, "supported_languages": null}, "macro.metrics.default__develop": {"unique_id": "macro.metrics.default__develop", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "name": "default__develop", "macro_sql": "{% macro default__develop(develop_yml, metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) -%}\n    {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n    -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n\n    {% if not execute -%}\n        {%- do return(\"not execute\") -%}\n    {%- endif %}\n\n    {%- if metric_list is string -%}\n        {%- set metric_list = [metric_list] -%}\n    {%- endif -%}\n\n    {# For the sake of consistency with metrics definition and the ability to easily\n    reference the metric object, we are creating a metrics_dictionary for set of metrics\n    included in the provided yml. This is used to construct the metric tree #}\n    {%- set develop_yml = fromyaml(develop_yml) -%}\n\n    {% set develop_dictionary = {} %}\n    {% for metric_definition in develop_yml.metrics %}\n        {% do develop_dictionary.update({metric_definition.name:{}}) %}\n        {% do develop_dictionary.update({metric_definition.name:metric_definition}) %}\n    {% endfor %}\n    {% set develop_yml = develop_dictionary %}\n\n    {# ############\n    VALIDATION OF PROVIDED YML - Gotta make sure the metric looks good!\n    ############ #}\n\n    {# {%- if develop_yml.metrics | length > 1 -%}\n        {%- do exceptions.raise_compiler_error(\"The develop macro only supports testing a single macro.\") -%}\n    {%- endif -%} #}\n\n    {% for metric_name in metric_list %}\n        {% set metric_definition = develop_yml[metric_name] %}\n\n        {%- if not metric_definition.name %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml is missing a metric name\") -%}\n        {%- endif %}\n\n        {%- if not metric_definition.calculation_method %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a calculation method\") -%}\n        {%- endif %}\n\n        {%- if not metric_definition.model and metric_definition.calculation_method != 'derived' %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a model\") -%}\n        {%- endif %}\n\n        {%- if not metric_definition.timestamp %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a timestamp\") -%}\n        {%- endif %}\n\n        {%- if not metric_definition.time_grains %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing time grains\") -%}\n        {%- endif %}\n\n        {%- if grain not in metric_definition.time_grains %}\n            {%- do exceptions.raise_compiler_error(\"The selected grain is missing from the metric definition of metric \" ~ metric_definition.name ) -%}\n        {%- endif %}\n\n        {%- if not metric_definition.expression %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing an expression\") -%}\n        {%- endif %}\n\n        {%- for dim in dimensions -%}\n            {% if dim not in metric_definition.dimensions -%}\n                {%- do exceptions.raise_compiler_error(\"The macro provided dimension is missing from the metric definition of metric \" ~ metric_definition.name ) %}\n            {% endif %}\n        {%- endfor -%}\n\n\n    {%- endfor -%}\n\n    {# ############\n    VALIDATION OF MACRO INPUTS - Making sure we have a provided grain!\n    ############ #}\n\n    {%- if not grain %}\n        {%- do exceptions.raise_compiler_error(\"No date grain provided\") %}\n    {%- endif %}\n\n    {# ############\n    VARIABLE SETTING - Creating the faux metric tree and faux metric list. The faux fur of 2022\n    ############ #}\n\n    {% set metric_tree = metrics.get_faux_metric_tree(metric_list=metric_list, develop_yml=develop_yml) %}\n\n    {% set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree, develop_yml=develop_yml) %}\n\n    {# ############\n    SECONDARY CALCULATION VALIDATION - Gotta make sure the secondary calcs are good!\n    ############ #}\n\n    {%- do metrics.validate_develop_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n    {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%}\n\n    {%- for calc_config in secondary_calculations if calc_config.aggregate %}\n        {%- do metrics.validate_aggregate_coherence(metric_aggregate=metrics_dictionary[0].calculation_method, calculation_aggregate=calc_config.aggregate) %}\n    {%- endfor %}\n\n    {%- for calc_config in secondary_calculations if calc_config.period -%}\n        {%- do metrics.validate_grain_order(metric_grain=grain, calculation_grain=calc_config.period) -%}\n    {%- endfor -%}\n\n    {# ############\n    SQL GENERATION - Lets build that SQL!\n    ############ -#}\n\n    {%- set sql = metrics.get_metric_sql(\n        metrics_dictionary=metrics_dictionary,\n        grain=grain,\n        dimensions=dimensions,\n        secondary_calculations=secondary_calculations,\n        start_date=start_date,\n        end_date=end_date,\n        where=where,\n        metric_tree=metric_tree\n        ) %}\n    ({{ sql }}) metric_subq\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_faux_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_develop_grain", "macro.metrics.validate_metric_config", "macro.metrics.validate_aggregate_coherence", "macro.metrics.validate_grain_order", "macro.metrics.get_metric_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6866314, "supported_languages": null}, "macro.metrics.calculate": {"unique_id": "macro.metrics.calculate", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "name": "calculate", "macro_sql": "{% macro calculate(metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) %}\n    {{ return(adapter.dispatch('calculate', 'metrics')(metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__calculate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6891127, "supported_languages": null}, "macro.metrics.default__calculate": {"unique_id": "macro.metrics.default__calculate", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "name": "default__calculate", "macro_sql": "{% macro default__calculate(metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) %}\n    {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n    -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n    {# ############\n    VARIABLE SETTING - Creating the metric tree and making sure metric list is a list!\n    ############ -#}\n\n    {%- if metric_list is not iterable -%}\n        {%- set metric_list = [metric_list] -%}\n    {%- endif -%}\n\n    {%- set metric_tree = metrics.get_metric_tree(metric_list=metric_list) -%}\n\n    {#- Here we are creating the metrics dictionary which contains all of the metric information needed for sql gen. -#}\n    {%- set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree) -%}\n\n    {#- ############\n    VALIDATION - Make sure everything is good!\n    ############ -#}\n\n    {%- if not execute -%}\n        {%- do return(\"Did not execute\") -%}\n    {%- endif -%}\n\n    {%- if not metric_list -%}\n        {%- do exceptions.raise_compiler_error(\"No metric or metrics provided\") -%}\n    {%- endif -%}\n\n    {%- if not grain -%}\n        {%- do exceptions.raise_compiler_error(\"No date grain provided\") -%}\n    {%- endif -%}\n\n    {%- if where is iterable and (where is not string and where is not mapping) -%}\n        {%- do exceptions.raise_compiler_error(\"From v0.3.0 onwards, the where clause takes a single string, not a list of filters. Please fix to reflect this change\") %}\n    {%- endif -%}\n\n    {%- do metrics.validate_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n\n    {%- do metrics.validate_derived_metrics(metric_tree=metric_tree) -%}\n\n    {%- do metrics.validate_dimension_list(dimensions=dimensions, metric_tree=metric_tree) -%} \n\n    {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%} \n\n    {#- ############\n    SECONDARY CALCULATION VALIDATION - Let there be window functions\n    ############ -#}\n\n    {%- for metric_name in metric_tree.base_set %}\n        {%- for calc_config in secondary_calculations if calc_config.aggregate -%}\n            {%- do metrics.validate_aggregate_coherence(metric_aggregate=metrics_dictionary[metric_name].calculation_method, calculation_aggregate=calc_config.aggregate) -%}\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- for calc_config in secondary_calculations if calc_config.period -%}\n        {%- do metrics.validate_grain_order(metric_grain=grain, calculation_grain=calc_config.period) -%}\n    {%- endfor -%} \n\n    {#- ############\n    SQL GENERATION - Lets build that SQL!\n    ############ -#}\n\n    {%- set sql = metrics.get_metric_sql(\n        metrics_dictionary=metrics_dictionary,\n        grain=grain,\n        dimensions=dimensions,\n        secondary_calculations=secondary_calculations,\n        start_date=start_date,\n        end_date=end_date,\n        where=where,\n        metric_tree=metric_tree\n    ) %}\n\n({{ sql }}) metric_subq \n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_grain", "macro.metrics.validate_derived_metrics", "macro.metrics.validate_dimension_list", "macro.metrics.validate_metric_config", "macro.metrics.validate_aggregate_coherence", "macro.metrics.validate_grain_order", "macro.metrics.get_metric_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6938624, "supported_languages": null}, "macro.metrics.get_metric_list": {"unique_id": "macro.metrics.get_metric_list", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metric_list.sql", "original_file_path": "macros/variables/get_metric_list.sql", "name": "get_metric_list", "macro_sql": "{%- macro get_metric_list(metric) %}\n\n    {%- if metric.metrics | length > 0 %}\n\n        {# First we get the list of nodes that this metric is dependent on. This is inclusive \n        of all parent metrics and SHOULD only contain parent metrics #}\n        {%- set node_list = metric.depends_on.nodes -%}\n        {%- set metric_list = [] -%}\n\n        {# This part is suboptimal - we're looping through the dependent nodes and extracting\n        the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n        right now its a list of lists #}\n        {%- for node in node_list -%}  \n            {% set metric_name = node.split('.')[2] %}\n            {% do metric_list.append(metric_name) %}\n        {%- endfor -%}\n\n    {% else %}\n\n        {# For non-derived metrics, we just need the relation of the base model ie \n        the model that its built. Then we append it to the metric list name so the same\n        variable used in derived metrics can be used below #}\n        {%- set metric_list = [] -%}\n        {% do metric_list.append(metric.name) %}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6960316, "supported_languages": null}, "macro.metrics.get_metric_model_name": {"unique_id": "macro.metrics.get_metric_model_name", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metric_model_name.sql", "original_file_path": "macros/variables/get_metric_model_name.sql", "name": "get_metric_model_name", "macro_sql": "{% macro get_metric_model_name(metric_model) %}\n\n    {% set metric_model_name = metric_model.replace('\"','\\'').split('\\'')[1] %}\n\n    {% do return(metric_model_name) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6970673, "supported_languages": null}, "macro.metrics.get_relevent_periods": {"unique_id": "macro.metrics.get_relevent_periods", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_relevent_periods.sql", "original_file_path": "macros/variables/get_relevent_periods.sql", "name": "get_relevent_periods", "macro_sql": "{%- macro get_relevent_periods(grain, secondary_calculations) %}\n\n    {%- set relevant_periods = [] %}\n    {%- for calc_config in secondary_calculations if calc_config.period and calc_config.period not in relevant_periods and calc_config.period != grain %}\n        {%- do relevant_periods.append(calc_config.period) %}\n    {%- endfor -%}\n\n    {%- do return(relevant_periods)-%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.6984053, "supported_languages": null}, "macro.metrics.get_metric_tree": {"unique_id": "macro.metrics.get_metric_tree", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metric_tree.sql", "original_file_path": "macros/variables/get_metric_tree.sql", "name": "get_metric_tree", "macro_sql": "{% macro get_metric_tree(metric_list)%}\n\n{# We are creating the metric tree here - this includes all the leafs (first level parents)\n, the derived metrics, and the full combination of them both #}\n\n{# This line creates the metric tree dictionary and the full_set key. \nFull Set contains ALL metrics that are referenced, which includes metrics in the macro\nAND all parent/derived metrics. #}\n{%- set metric_tree = {'full_set':[]} %}\n{# The parent set is a list of parent metrics that are NOT derived metrics. IE if \nmetric C is built off of metric A and B, A and B would be the parent metrics because they \nare both upstream of Metric C AND not derived metrics themselves. #}\n{%- do metric_tree.update({'parent_set':[]}) -%}\n{# The derived set is a list of derived metrics. This includes all derived metrics referenced\nin the macro itself OR upstream of the metrics referenced in the macro #}\n{%- do metric_tree.update({'expression_set':[]}) -%}\n{# The base set is the list of metrics that are provided into the macro #}\n{%- do metric_tree.update({'base_set':[]}) -%}\n{# The ordered derived set is the list of derived metrics that are ordered based on their\nnode depth. So if Metric C were downstream of Metric A and B, which were also derived metrics,\nMetric C would have the value of 999 (max depth) and A and B would have 998, representing that they\nare one depth upstream #}\n{%- do metric_tree.update({'ordered_expression_set':{}}) -%}\n\n{# {% if metric_list is iterable and (metric_list is not string and metric_list is not mapping) %}  #}\n{% set base_set_list = []%}\n{% for metric in metric_list %}\n    {%- do base_set_list.append(metric.name) -%}\n    {# TODO #47 its not really GETTING the metric tree as much as operating. re-name that  #}\n    {%- set metric_tree = metrics.update_metric_tree(metric ,metric_tree) -%}\n{% endfor %}\n{%- do metric_tree.update({'base_set':base_set_list}) -%}\n\n{# Now we will iterate over the metric tree and make it a unique list to account for duplicates #}\n{% set full_set = [] %}\n{% set parent_set = [] %}\n{% set expression_set = [] %}\n{% set base_set = [] %}\n\n{# TODO See if this unique filtering logic can live in the operate on metric tree macro #}\n{# TODO rename to metric_name for all of the unique filters #}\n{% for metric_name in metric_tree['full_set']|unique%}\n    {% do full_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'full_set':full_set}) -%}\n\n{% for metric_name in metric_tree['parent_set']|unique%}\n    {% do parent_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'parent_set':parent_set}) -%}\n\n{% for metric_name in metric_tree['expression_set']|unique%}\n    {% do expression_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'expression_set':expression_set}) -%}\n\n{% for metric in metric_tree['parent_set']|unique%}\n    {%- do metric_tree['ordered_expression_set'].pop(metric) -%}\n{% endfor %}\n\n{# This section overrides the derived set by ordering the metrics on their depth so they \ncan be correctly referenced in the downstream sql query #}\n{% set ordered_expression_list = []%}\n{% for item in metric_tree['ordered_expression_set']|dictsort(false, 'value') %}\n    {% if item[0] in metric_tree[\"expression_set\"]%}\n        {% do ordered_expression_list.append(item[0])%}\n    {% endif %}\n{% endfor %}\n{%- do metric_tree.update({'expression_set':ordered_expression_list}) -%}\n\n{%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.update_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.705329, "supported_languages": null}, "macro.metrics.update_faux_metric_tree": {"unique_id": "macro.metrics.update_faux_metric_tree", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/update_faux_metric_tree.sql", "original_file_path": "macros/variables/update_faux_metric_tree.sql", "name": "update_faux_metric_tree", "macro_sql": "{% macro update_faux_metric_tree(metric_definition, metric_tree, develop_yml, metric_count=999)%}\n    \n\n    {# Now we see if the node already exists in the metric tree and return that if \n    it does so that we're not creating duplicates #}\n    {%- if metric_definition.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n        {%- set full_set = metric_tree[\"full_set\"] -%}\n        {%- do full_set.append(metric_definition.name) -%}\n        {%- do metric_tree.update({'full_set':full_set}) -%}\n\n    {%- endif -%}\n\n    {# Here we're starting with the highest level and assigning the metric tree that first level\n    value. This is used before de-duping in get_faux_metric_tree #}\n    {%- do metric_tree[\"ordered_expression_set\"].update({metric_definition.name:metric_count}) -%}\n    {%- set metric_count = metric_count - 1 -%}\n\n    {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n    One is the full set, which contains all of the parent metrics and the other is the leaf\n    set, which we'll use to determine the leaf, or base metrics. #}\n\n    {% set develop_metric_list = [] %}\n    {% for develop_metric_name in develop_yml %}\n        {% do develop_metric_list.append(develop_metric_name) %}\n    {% endfor %}\n\n    {# We define parent nodes as being the parent nodes that begin with metric, which lets\n    us filter out model nodes #}\n    {%- set parent_metrics = metrics.get_develop_unique_metric_id_list(metric_definition) -%}\n    {# We set an if condition based on if parent nodes. If there are none, then this metric\n    is a leaf node and any recursive loop should end #}\n    {%- if parent_metrics | length > 0 -%}\n\n        {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n        recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n        {%- for parent_metric_name in parent_metrics -%}\n\n            {# Then we add the parent_id of the metric to the full set. If it already existed\n            then it won't make an impact but we want to make sure it is represented. Will dedupe\n            in final macro #}\n            {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n            {%- if parent_metric_name in metric_tree|map(attribute=\"full_set\") -%}\n                {%- do full_set_plus.append(parent_metric_name) -%}\n            {%- endif -%}\n            {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n\n            {# And here we re-run the current macro but fill in the parent_id so that we loop again\n            with that metric information. You may be wondering, why are you using parent_id? Doesn't \n            the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n            DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n            \n            {# So here we need to test if the parent id/metric name exists in the manifest OR in\n            the develop yml. Manifest takes priority and then defaults back to yml if not present #}\n            {% if parent_metric_name in develop_metric_list and parent_metric_name is not none %}\n                {% set parent_metric_definition = develop_yml[parent_metric_name] %}\n            {% else %}\n                {%- set parent_metric_definition = metrics.get_metric_relation(parent_metric_name) -%}\n            {% endif %}\n\n            {%- set metric_tree =  metrics.update_faux_metric_tree(parent_metric_definition, metric_tree, develop_yml, metric_count) -%}\n\n        {%- endfor -%}\n    \n    {%- else -%}\n\n        {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n        {%- do parent_set_plus.append(metric_definition.name) -%}\n        {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n    {%- endif -%}\n\n    {%- set expression_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n    {%- do metric_tree.update({'expression_set':expression_set_plus}) -%}\n\n    {%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_develop_unique_metric_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_faux_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7117708, "supported_languages": null}, "macro.metrics.get_metric_allowlist": {"unique_id": "macro.metrics.get_metric_allowlist", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "name": "get_metric_allowlist", "macro_sql": "{% macro get_metric_allowlist() %}\n    {{ return(adapter.dispatch('get_metric_allowlist', 'metrics')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__get_metric_allowlist"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7128904, "supported_languages": null}, "macro.metrics.default__get_metric_allowlist": {"unique_id": "macro.metrics.default__get_metric_allowlist", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "name": "default__get_metric_allowlist", "macro_sql": "{% macro default__get_metric_allowlist() %}\n    {# Keys are the primary aggregation, values are the permitted aggregations to run in secondary calculations. #}\n    {% do return ({\n        \"average\": ['min', 'max'],\n        \"count\": ['min', 'max', 'sum', 'average'],\n        \"count_distinct\": ['min', 'max', 'sum', 'average'],\n        \"sum\": ['min', 'max', 'sum', 'average'],\n        \"max\": ['min', 'max', 'sum', 'average'],\n        \"min\": ['min', 'max', 'sum', 'average'],\n        \"derived\": ['min', 'max', 'sum'],\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7144566, "supported_languages": null}, "macro.metrics.get_grain_order": {"unique_id": "macro.metrics.get_grain_order", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "name": "get_grain_order", "macro_sql": "{% macro get_grain_order() %}\n    {{ return(adapter.dispatch('get_grain_order', 'metrics')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__get_grain_order"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7153158, "supported_languages": null}, "macro.metrics.default__get_grain_order": {"unique_id": "macro.metrics.default__get_grain_order", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "name": "default__get_grain_order", "macro_sql": "{% macro default__get_grain_order() %}\n    {% do return (['day', 'week', 'month', 'quarter', 'year']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.715803, "supported_languages": null}, "macro.metrics.get_metrics_dictionary": {"unique_id": "macro.metrics.get_metrics_dictionary", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metrics_dictionary.sql", "original_file_path": "macros/variables/get_metrics_dictionary.sql", "name": "get_metrics_dictionary", "macro_sql": "{% macro get_metrics_dictionary(metric_tree, develop_yml = none) %}\n\n    {% set metrics_dictionary = {} %}\n\n    {% for metric_name in metric_tree.full_set %}\n        {% if develop_yml is not none %}\n            {% set metric_object = develop_yml[metric_name]%}\n        {% else %}\n            {% set metric_object = metrics.get_metric_relation(metric_name) %}\n        {% endif %}\n        {% set metric_definition = metrics.get_metric_definition(metric_object) %}\n        {% if not metric_definition.config %}\n            {% do metric_definition.update({'config':{}}) %}\n        {% endif %}\n        {% do metrics_dictionary.update({metric_name:{}})%}\n        {% do metrics_dictionary.update({metric_name:metric_definition})%}\n    {% endfor %}\n\n    {% do return(metrics_dictionary) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_relation", "macro.metrics.get_metric_definition"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7186885, "supported_languages": null}, "macro.metrics.update_metric_tree": {"unique_id": "macro.metrics.update_metric_tree", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/update_metric_tree.sql", "original_file_path": "macros/variables/update_metric_tree.sql", "name": "update_metric_tree", "macro_sql": "{% macro update_metric_tree(metric,metric_tree,metric_count=999)%}\n    \n    {# Now we see if the node already exists in the metric tree and return that if \n    it does so that we're not creating duplicates #}\n    {%- if metric.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n        {%- set full_set = metric_tree[\"full_set\"] -%}\n        {%- do full_set.append(metric.name) -%}\n        {%- do metric_tree.update({'full_set':full_set}) -%}\n\n    {%- endif -%}\n\n    {%- do metric_tree[\"ordered_expression_set\"].update({metric.name:metric_count}) -%}\n    {%- set metric_count = metric_count - 1 -%}\n\n    {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n    One is the full set, which contains all of the parent metrics and the other is the leaf\n    set, which we'll use to determine the leaf, or base metrics. #}\n\n    {# We define parent nodes as being the parent nodes that begin with metric, which lets\n    us filter out model nodes #}\n    {%- set parent_metrics = metrics.get_metric_unique_id_list(metric) -%}\n\n    {# We set an if condition based on if parent nodes. If there are none, then this metric\n    is a leaf node and any recursive loop should end #}\n        {%- if parent_metrics | length > 0 -%}\n\n            {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n            recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n            {%- for parent_id in parent_metrics -%}\n\n                {# Then we add the parent_id of the metric to the full set. If it already existed\n                then it won't make an impact but we want to make sure it is represented #}\n                {# {%- do full_set.append(parent_id) -%} #}\n                {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n                {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n                    {%- do full_set_plus.append(parent_id) -%}\n                {%- endif -%}\n                {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n                {# The parent_id variable here is a mapping back to the provided manifest and doesn't \n                allow for string parsing. So we create this variable to use instead #}\n                {# {%- set parent_metric_name = (parent_id | string).split('.')[2] -%} #}\n\n                {# And here we re-run the current macro but fill in the parent_id so that we loop again\n                with that metric information. You may be wondering, why are you using parent_id? Doesn't \n                the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n                DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n                {%- set new_parent = metrics.get_metric_relation(parent_id) -%}\n\n                {%- set metric_tree =  metrics.update_metric_tree(new_parent,metric_tree,metric_count) -%}\n\n            {%- endfor -%}\n        \n        {%- else -%}\n\n            {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n            {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n                {%- do parent_set_plus.append(metric.name) -%}\n            {%- endif -%}\n            {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n        {%- endif -%}\n\n        {%- set expression_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n        {%- do metric_tree.update({'expression_set':expression_set_plus}) -%}\n\n    {%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_unique_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7245133, "supported_languages": null}, "macro.metrics.get_metric_unique_id_list": {"unique_id": "macro.metrics.get_metric_unique_id_list", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metric_unique_id_list.sql", "original_file_path": "macros/variables/get_metric_unique_id_list.sql", "name": "get_metric_unique_id_list", "macro_sql": "{%- macro get_metric_unique_id_list(metric) %}\n\n    {%- if metric.metrics | length > 0 %}\n\n        {# First we get the list of nodes that this metric is dependent on. This is inclusive \n        of all parent metrics and SHOULD only contain parent metrics #}\n        {%- set node_list = metric.depends_on.nodes -%}\n        {%- set metric_list = [] -%}\n\n        {# This part is suboptimal - we're looping through the dependent nodes and extracting\n        the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n        right now its a list of lists #}\n        {%- for node in node_list -%}  \n            {%- if node.split('.')[0] == 'metric' -%}\n                {% do metric_list.append(node.split('.')[2]) %} \n            {%- endif -%}\n        {%- endfor -%}\n\n    {% else %}\n\n        {# For non-derived metrics, we just need the relation of the base model ie \n        the model that its built. Then we append it to the metric list name so the same\n        variable used in derived metrics can be used below #}\n        {%- set metric_list = [] -%}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7267065, "supported_languages": null}, "macro.metrics.get_non_calendar_dimension_list": {"unique_id": "macro.metrics.get_non_calendar_dimension_list", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_non_calendar_dimension_list.sql", "original_file_path": "macros/variables/get_non_calendar_dimension_list.sql", "name": "get_non_calendar_dimension_list", "macro_sql": "{% macro get_non_calendar_dimension_list(dimensions,calendar_dimensions) %}\n    \n    {% set calendar_dims = calendar_dimensions %}\n\n    {# Here we set the calendar as either being the default provided by the package\n    or the variable provided in the project #}\n    {% set dimension_list = [] %}\n    {% for dim in dimensions %}\n        {%- if dim not in calendar_dimensions -%}\n            {%- do dimension_list.append(dim | lower) -%}\n        {%- endif -%}\n    {% endfor %}\n    {%- do return(dimension_list) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7281942, "supported_languages": null}, "macro.metrics.get_faux_metric_tree": {"unique_id": "macro.metrics.get_faux_metric_tree", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_faux_metric_tree.sql", "original_file_path": "macros/variables/get_faux_metric_tree.sql", "name": "get_faux_metric_tree", "macro_sql": "{% macro get_faux_metric_tree(metric_list,develop_yml)%}\n\n    {%- set metric_tree = {'full_set':[]} %}\n    {%- do metric_tree.update({'parent_set':[]}) -%}\n    {%- do metric_tree.update({'expression_set':[]}) -%}\n    {%- do metric_tree.update({'base_set':metric_list}) -%}\n    {%- do metric_tree.update({'ordered_expression_set':{}}) -%}\n\n    {% for metric_name in metric_list %}\n        {% set metric_definition = develop_yml[metric_name]%}\n        {%- set metric_tree = metrics.update_faux_metric_tree(metric_definition, metric_tree, develop_yml) -%}\n    {% endfor %}\n\n    {%- do metric_tree.update({'full_set':set(metric_tree['full_set'])}) -%}\n    {%- do metric_tree.update({'parent_set':set(metric_tree['parent_set'])}) -%}\n    {%- do metric_tree.update({'expression_set':set(metric_tree['expression_set'])}) -%}\n\n    {% for metric_name in metric_tree['parent_set']|unique%}\n        {%- do metric_tree['ordered_expression_set'].pop(metric_name) -%}\n    {% endfor %}\n\n    {# This section overrides the derived set by ordering the metrics on their depth so they \n    can be correctly referenced in the downstream sql query #}\n    {% set ordered_expression_list = []%}\n    {% for item in metric_tree['ordered_expression_set']|dictsort(false, 'value') %}\n        {% if item[0] in metric_tree[\"expression_set\"]%}\n            {% do ordered_expression_list.append(item[0])%}\n        {% endif %}\n    {% endfor %}\n    {%- do metric_tree.update({'expression_set':ordered_expression_list}) -%}\n\n    {%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.update_faux_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7331638, "supported_languages": null}, "macro.metrics.get_develop_unique_metric_id_list": {"unique_id": "macro.metrics.get_develop_unique_metric_id_list", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_develop_unique_metric_id_list.sql", "original_file_path": "macros/variables/get_develop_unique_metric_id_list.sql", "name": "get_develop_unique_metric_id_list", "macro_sql": "{%- macro get_develop_unique_metric_id_list(metric_definition) %}\n\n    {% set re = modules.re %}\n\n    {%- set metric_list = [] -%}\n\n    {%- if metric_definition.calculation_method == 'derived' %}\n\n        {# First we get the list of nodes that this metric is dependent on. This is inclusive \n        of all parent metrics and SHOULD only contain parent metrics #}\n        {%- set dependency_metrics = re.findall(\"'[^']+'\",metric_definition.expression) -%}\n\n        {# This part is suboptimal - we're looping through the dependent nodes and extracting\n        the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n        right now its a list of lists #}\n        {%- for metric_name in dependency_metrics -%} \n=           {% do metric_list.append(metric_name.replace('\\'','')) %} \n        {%- endfor -%}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.735049, "supported_languages": null}, "macro.metrics.get_calendar_dimensions": {"unique_id": "macro.metrics.get_calendar_dimensions", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_calendar_dimensions.sql", "original_file_path": "macros/variables/get_calendar_dimensions.sql", "name": "get_calendar_dimensions", "macro_sql": "{% macro get_calendar_dimensions(dimensions) %}\n    \n    {% set approved_calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n    {# Here we set the calendar as either being the default provided by the package\n    or the variable provided in the project #}\n    {% set calendar_dimensions = [] %}\n    {% for dim in dimensions %}\n        {%- if dim in approved_calendar_dimensions -%}\n            {%- do calendar_dimensions.append(dim | lower) -%}\n        {%- endif -%}\n    {% endfor %}\n    {%- do return(calendar_dimensions) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7366347, "supported_languages": null}, "macro.metrics.get_base_metrics": {"unique_id": "macro.metrics.get_base_metrics", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_base_metrics.sql", "original_file_path": "macros/variables/get_base_metrics.sql", "name": "get_base_metrics", "macro_sql": "{% macro get_base_metrics(metric) %}\n\n    -- this checks whether it is a relation or a list\n    {%- if (metric is mapping and metric.get('metadata', {}).get('calculation_method', '').endswith('Relation')) %}\n\n        {%- for child in metric recursive -%}\n\n            {%- if metric.metrics | length > 0 %}\n\n            {# First we get the list of nodes that this metric is dependent on. This is inclusive \n            of all parent metrics and SHOULD only contain parent metrics #}\n            {%- set node_list = metric.depends_on.nodes -%}\n            {%- set metric_list = [] -%}\n            {# This part is suboptimal - we're looping through the dependent nodes and extracting\n            the metric name from the idenitfier. Ideally we'd just use the metrics attribute but \n            right now its a list of lists #}\n                {%- for node in node_list -%}  \n                    {% set metric_name = node.split('.')[2] %}\n                    {% do metric_list.append(metric_name) %}\n                {%- endfor -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {% else %}\n\n        {# For non-derived metrics, we just need the relation of the base model ie \n        the model that its built. Then we append it to the metric list name so the same\n        variable used in derived metrics can be used below #}\n        {%- set metric_list = [] -%}\n        {% do metric_list.append(metric.name) %}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7395303, "supported_languages": null}, "macro.metrics.get_metric_definition": {"unique_id": "macro.metrics.get_metric_definition", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/variables/get_metric_definition.sql", "original_file_path": "macros/variables/get_metric_definition.sql", "name": "get_metric_definition", "macro_sql": "{% macro get_metric_definition(metric_definition) %}\n\n    {% set metrics_dictionary_dict = {} %}\n\n    {% do metrics_dictionary_dict.update({'name': metric_definition.name})%}\n    {% do metrics_dictionary_dict.update({'calculation_method': metric_definition.calculation_method})%}\n    {% do metrics_dictionary_dict.update({'timestamp': metric_definition.timestamp})%}\n    {% do metrics_dictionary_dict.update({'time_grains': metric_definition.time_grains})%}\n    {% do metrics_dictionary_dict.update({'dimensions': metric_definition.dimensions})%}\n    {% do metrics_dictionary_dict.update({'filters': metric_definition.filters})%}\n    {% do metrics_dictionary_dict.update({'config': metric_definition.config})%}\n    {% if metric_definition.calculation_method != 'derived' %}\n        {% set metric_model_name = metrics.get_metric_model_name(metric_model=metric_definition.model) %}\n        {% do metrics_dictionary_dict.update({'metric_model': metrics.get_model_relation(metric_model_name, metric_name)}) %}\n    {% endif %}\n\n    {# Behavior specific to develop #}\n    {% if metric_definition is mapping %}\n        {# We need to do some cleanup for metric parsing #}\n        {% set metric_expression = metric_definition.expression | replace(\"metric(\",\"\") | replace(\")\",\"\") | replace(\"{{\",\"\") | replace(\"}}\",\"\")  | replace(\"'\",\"\") | replace('\"',\"\")  %}\n        {% do metrics_dictionary_dict.update({'expression': metric_expression})%} \n        {% if metric_definition.window %}\n            {% do metrics_dictionary_dict.update({'window': metric_definition.window}) %}\n        {% else %}\n            {% do metrics_dictionary_dict.update({'window': None}) %}\n        {% endif %}\n    {# Behavior specific to calculate #}\n    {% else %}\n        {% do metrics_dictionary_dict.update({'expression': metric_definition.expression})%} \n        {% do metrics_dictionary_dict.update({'window': metric_definition.window})%}\n    {% endif %}\n\n    {% do return(metrics_dictionary_dict) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_model_name", "macro.metrics.get_model_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7454543, "supported_languages": null}, "macro.metrics.perform_secondary_calculation": {"unique_id": "macro.metrics.perform_secondary_calculation", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "name": "perform_secondary_calculation", "macro_sql": "{%- macro perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config) -%}\n\n    {{ return(adapter.dispatch('perform_secondary_calculation', 'metrics')(metric_name, grain, dimensions, calc_config, metric_config)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__perform_secondary_calculation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7471526, "supported_languages": null}, "macro.metrics.default__perform_secondary_calculation": {"unique_id": "macro.metrics.default__perform_secondary_calculation", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "name": "default__perform_secondary_calculation", "macro_sql": "{% macro default__perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config) %}\n    {%- set calc_type = calc_config.calculation -%}\n    {%- set calc_sql = '' -%}\n    \n    {%- if calc_type == 'period_over_period' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_period_over_period', 'metrics')(metric_name, grain, dimensions, calc_config, metric_config) -%}\n    {%- elif calc_type == 'rolling' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_rolling', 'metrics')(metric_name, grain, dimensions, calc_config) -%}\n    {%- elif calc_type == 'period_to_date' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_period_to_date', 'metrics')(metric_name, grain, dimensions, calc_config) -%}\n    {%- elif calc_type == 'prior' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_prior', 'metrics')(metric_name, grain, dimensions, calc_config) -%}\n    {%- else -%}\n        {%- do exceptions.raise_compiler_error(\"Unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) -%}  \n    {%- endif -%}\n\n    {{ calc_sql }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__secondary_calculation_period_over_period", "macro.metrics.default__secondary_calculation_rolling", "macro.metrics.default__secondary_calculation_period_to_date", "macro.metrics.default__secondary_calculation_prior"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7497485, "supported_languages": null}, "macro.metrics.generate_secondary_calculation_alias": {"unique_id": "macro.metrics.generate_secondary_calculation_alias", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "name": "generate_secondary_calculation_alias", "macro_sql": "{% macro generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n\n    {{ return(adapter.dispatch('generate_secondary_calculation_alias', 'metrics')(metric_name, calc_config, grain, is_multiple_metrics)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__generate_secondary_calculation_alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.752886, "supported_languages": null}, "macro.metrics.default__generate_secondary_calculation_alias": {"unique_id": "macro.metrics.default__generate_secondary_calculation_alias", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "name": "default__generate_secondary_calculation_alias", "macro_sql": "{% macro default__generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n    {%- if calc_config.alias -%}\n        {%- if is_multiple_metrics -%}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.alias) -%}\n        {%- else -%}\n            {% do return(calc_config.alias) %}\n        {%- endif -%}\n    {%- endif -%}\n    \n    {%- set calc_type = calc_config.calculation -%}\n    {%- if calc_type == 'period_over_period' -%}\n        {%- if is_multiple_metrics -%}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n        {%- else -%}\n            {%- do return(calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n        {%- endif -%}\n   \n    {%- elif calc_type == 'rolling' %}\n        {%- if is_multiple_metrics -%}\n            {%- do return(metric_name ~ \"_\" ~ \"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n        {%- else -%}\n            {%- do return(\"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n        {%- endif -%}\n    \n    {%- elif calc_type == 'period_to_date' %}\n        {% if is_multiple_metrics %}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n        {% else %}\n            {%- do return(calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n        {% endif %}\n        \n    {%- elif calc_type == 'prior' %}\n        {% if is_multiple_metrics %}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n        {% else %}\n            {%- do return(calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n        {% endif %}\n\n    {%- else %}\n        {%- do exceptions.raise_compiler_error(\"Can't generate alias for unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) %}  \n    {%- endif %}\n\n    {{ calc_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.757304, "supported_languages": null}, "macro.metrics.default__secondary_calculation_period_to_date": {"unique_id": "macro.metrics.default__secondary_calculation_period_to_date", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "name": "default__secondary_calculation_period_to_date", "macro_sql": "{% macro default__secondary_calculation_period_to_date(metric_name, grain, dimensions, calc_config) %}\n    {%- set calc_sql -%}\n        {{- adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) -}}\n        over (\n            partition by date_{{ calc_config.period }}\n            {% if dimensions -%}\n                , {{ dimensions | join(\", \") }}\n            {%- endif %}\n            order by date_{{grain}}\n            rows between unbounded preceding and current row\n        )\n    {%- endset %}\n\n    {%- do return (calc_sql) %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7590237, "supported_languages": null}, "macro.metrics.default__secondary_calculation_rolling": {"unique_id": "macro.metrics.default__secondary_calculation_rolling", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "name": "default__secondary_calculation_rolling", "macro_sql": "{% macro default__secondary_calculation_rolling(metric_name, grain, dimensions, calc_config) %}\n    {% set calc_sql %}\n        {{ adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) }}\n        over (\n            {% if dimensions -%}\n                partition by {{ dimensions | join(\", \") }} \n            {% endif -%}\n            order by date_{{grain}}\n            rows between {{ calc_config.interval - 1 }} preceding and current row\n        )\n    {% endset %}\n\n    {% do return (calc_sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7607763, "supported_languages": null}, "macro.metrics.default__secondary_calculation_prior": {"unique_id": "macro.metrics.default__secondary_calculation_prior", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_prior.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_prior.sql", "name": "default__secondary_calculation_prior", "macro_sql": "{%- macro default__secondary_calculation_prior(metric_name, grain, dimensions, calc_config, metric_config) -%}\n    \n    {%- set calc_sql %}\n            lag(\n                {{ metric_name }}, {{ calc_config.interval }}\n            ) over (\n                {% if dimensions -%}\n                    partition by {{ dimensions | join(\", \") }} \n                {% endif -%}\n                order by date_{{grain}}\n            )\n    {%- endset-%}\n    \n    {{ calc_sql }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.762193, "supported_languages": null}, "macro.metrics.default__secondary_calculation_period_over_period": {"unique_id": "macro.metrics.default__secondary_calculation_period_over_period", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "name": "default__secondary_calculation_period_over_period", "macro_sql": "{%- macro default__secondary_calculation_period_over_period(metric_name, grain, dimensions, calc_config, metric_config) -%}\n    {%- set calc_sql %}\n            lag(\n                {{ metric_name }}, {{ calc_config.interval }}\n            ) over (\n                {% if dimensions -%}\n                    partition by {{ dimensions | join(\", \") }} \n                {% endif -%}\n                order by date_{{grain}}\n            )\n    {%- endset-%}\n    \n    {%- if calc_config.comparison_strategy == 'difference' -%}\n        {% do return (adapter.dispatch('metric_comparison_strategy_difference', 'metrics')(metric_name, calc_sql, metric_config)) %}\n    \n    {%- elif calc_config.comparison_strategy == 'ratio' -%}\n        {% do return (adapter.dispatch('metric_comparison_strategy_ratio', 'metrics')(metric_name, calc_sql, metric_config)) %}\n    \n    {-% else -%}\n        {% do exceptions.raise_compiler_error(\"Bad comparison_strategy for period_over_period: \" ~ calc_config.comparison_strategy ~ \". calc_config: \" ~ calc_config) %}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_comparison_strategy_difference", "macro.metrics.default__metric_comparison_strategy_ratio"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.766118, "supported_languages": null}, "macro.metrics.default__metric_comparison_strategy_difference": {"unique_id": "macro.metrics.default__metric_comparison_strategy_difference", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "name": "default__metric_comparison_strategy_difference", "macro_sql": "{% macro default__metric_comparison_strategy_difference(metric_name, calc_sql, metric_config) -%}\n    {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n        {{ metric_name }} - {{ calc_sql }}\n    {%- else -%}\n        coalesce({{ metric_name }}, 0) - coalesce(\n        {{ calc_sql }}\n        , 0)\n    {%- endif %}\n        \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7668617, "supported_languages": null}, "macro.metrics.default__metric_comparison_strategy_ratio": {"unique_id": "macro.metrics.default__metric_comparison_strategy_ratio", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "name": "default__metric_comparison_strategy_ratio", "macro_sql": "{% macro default__metric_comparison_strategy_ratio(metric_name, calc_sql, metric_config) -%}\n    \n    {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n        cast({{ metric_name }} as {{ type_float() }}) / nullif(\n            {{ calc_sql }}\n            , 0)\n    {%- else -%}\n         coalesce(\n            cast({{ metric_name }} as {{ type_float() }}) / nullif(\n            {{ calc_sql }}\n            , 0) \n        , 0)\n    {%- endif %}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7677538, "supported_languages": null}, "macro.metrics.get_metric_relation": {"unique_id": "macro.metrics.get_metric_relation", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/graph_parsing/get_metric_relation.sql", "original_file_path": "macros/graph_parsing/get_metric_relation.sql", "name": "get_metric_relation", "macro_sql": "{% macro get_metric_relation(ref_name) %}\n    \n    {% if execute %}\n        {% set relation = metric(ref_name)%}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %} \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7690341, "supported_languages": null}, "macro.metrics.get_model_relation": {"unique_id": "macro.metrics.get_model_relation", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/graph_parsing/get_model_relation.sql", "original_file_path": "macros/graph_parsing/get_model_relation.sql", "name": "get_model_relation", "macro_sql": "{% macro get_model_relation(ref_name, metric_name) %}\n    {% if execute %}\n        {% set model_ref_node = graph.nodes.values() | selectattr('name', 'equalto', ref_name) | first %}\n        {% if model_ref_node | length == 0 %}\n            {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is referencing the model \" ~ ref_name ~ \", which does not exist.\") %}\n        {% endif %}\n\n        {% set relation = api.Relation.create(\n            database = model_ref_node.database,\n            schema = model_ref_node.schema,\n            identifier = model_ref_node.alias\n        )\n        %}\n\n        {% do return(relation) %}\n\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7714815, "supported_languages": null}, "macro.metrics.period_over_period": {"unique_id": "macro.metrics.period_over_period", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/period_over_period.sql", "original_file_path": "macros/secondary_calculations_configuration/period_over_period.sql", "name": "period_over_period", "macro_sql": "{% macro period_over_period(comparison_strategy, interval, alias, metric_list = []) %}\n\n    {% set missing_args = [] %}\n    {% if not comparison_strategy %}\n        {% set _ = missing_args.append(\"comparison_strategy\") %}\n    {% endif %}\n    {% if not interval %} \n        {% set _ = missing_args.append(\"interval\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_over_period') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"period_over_period\",\n        \"comparison_strategy\": comparison_strategy,\n        \"interval\": interval,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7745347, "supported_languages": null}, "macro.metrics.prior": {"unique_id": "macro.metrics.prior", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/prior.sql", "original_file_path": "macros/secondary_calculations_configuration/prior.sql", "name": "prior", "macro_sql": "{% macro prior(interval, alias, metric_list = []) %}\n\n    {% set missing_args = [] %}\n    {% if not interval %} \n        {% set _ = missing_args.append(\"interval\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to prior') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"prior\",\n        \"interval\": interval,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7770448, "supported_languages": null}, "macro.metrics.rolling": {"unique_id": "macro.metrics.rolling", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/rolling.sql", "original_file_path": "macros/secondary_calculations_configuration/rolling.sql", "name": "rolling", "macro_sql": "{% macro rolling(aggregate, interval, alias, metric_list=[]) %}\n\n    {% set missing_args = [] %}\n    {% if not aggregate %} \n        {% set _ = missing_args.append(\"aggregate\") %}\n    {% endif %}\n    {% if not interval %}\n        {% set _ = missing_args.append(\"interval\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to rolling') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"rolling\",\n        \"aggregate\": aggregate,\n        \"interval\": interval,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.780052, "supported_languages": null}, "macro.metrics.period_to_date": {"unique_id": "macro.metrics.period_to_date", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/period_to_date.sql", "original_file_path": "macros/secondary_calculations_configuration/period_to_date.sql", "name": "period_to_date", "macro_sql": "{% macro period_to_date(aggregate, period, alias, metric_list = []) %}\n\n    {% set missing_args = [] %}\n    {% if not aggregate %} \n        {% set _ = missing_args.append(\"aggregate\") %}\n    {% endif %}\n    {% if not period %}\n        {% set _ = missing_args.append(\"period\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_to_date') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"period_to_date\",\n        \"aggregate\": aggregate,\n        \"period\": period,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.783089, "supported_languages": null}, "macro.metrics.validate_metric_config": {"unique_id": "macro.metrics.validate_metric_config", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/validate_metric_config.sql", "original_file_path": "macros/validation/validate_metric_config.sql", "name": "validate_metric_config", "macro_sql": "{%- macro validate_metric_config(metrics_dictionary) -%}\n\n    {#- We loop through the metrics dictionary here to ensure that\n    1) all configs are real configs we know about\n    2) all of those have valid values passed\n    returned or used, not just those listed -#}\n\n    {%- set accepted_configs = {\n        \"enabled\" : {\"accepted_values\" : [True, False]},\n        \"treat_null_values_as_zero\" : {\"accepted_values\" : [True, False]}\n        }\n    -%}\n\n    {%- for metric in metrics_dictionary -%}\n        {%- set metric_config = metrics_dictionary[metric].get(\"config\", None) -%}\n        {%- if metric_config -%}\n            {%- for config in metric_config -%}\n                {%- set config_value = metric_config[config] -%}\n                {#- some wonkiness here -- metric_config is not a dictionary, it's a MetricConfig object, so can't use the items() method -#}\n                {#- check that the config is one that we expect -#}\n                {%- if not accepted_configs[config] -%}\n                    {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config option. The config '\" ~ config ~ \"' is not accepted.\") -%}\n                {%- endif -%}\n                {#- check that the config datatype is expected -#}\n                {%- if accepted_configs[config] -%}\n                    {%- set accepted_values = accepted_configs[config][\"accepted_values\"] -%}\n                    {%- if not config_value in accepted_values -%}\n                        {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config value specified. The config '\" ~ config ~ \"' expects one of \" ~ accepted_values) -%}\n                    {%- endif -%}\n                {% endif %}\n            {%- endfor %}\n        {%- endif -%}\n    {%- endfor %}\n            \n\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.786511, "supported_languages": null}, "macro.metrics.validate_aggregate_coherence": {"unique_id": "macro.metrics.validate_aggregate_coherence", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/validate_aggregate_coherence.sql", "original_file_path": "macros/validation/validate_aggregate_coherence.sql", "name": "validate_aggregate_coherence", "macro_sql": "{% macro validate_aggregate_coherence(metric_aggregate, calculation_aggregate) %}\n    {% set allowlist = metrics.get_metric_allowlist()[metric_aggregate] %}\n\n    {% if (calculation_aggregate not in allowlist) %}\n        {% do exceptions.raise_compiler_error(\"Can't calculate secondary aggregate \" ~ calculation_aggregate ~ \" when metric's aggregation is \" ~ metric_aggregate ~ \". Allowed options are \" ~ allowlist ~ \".\") %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_metric_allowlist"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7878942, "supported_languages": null}, "macro.metrics.validate_dimension_list": {"unique_id": "macro.metrics.validate_dimension_list", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/validate_dimension_list.sql", "original_file_path": "macros/validation/validate_dimension_list.sql", "name": "validate_dimension_list", "macro_sql": "{% macro validate_dimension_list(dimensions, metric_tree) %}\n    \n    {# This macro exists to invalidate dimensions provided to the metric macro that are not viable \n    candidates based on metric definitions. This prevents downstream run issues when the sql \n    logic attempts to group by provided dimensions and fails because they don't exist for \n    one or more of the required metrics. #}\n\n    {% set calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n    {% for dim in dimensions %}\n\n        {# Now we loop through all the metrics in the full set, which is all metrics, parent metrics,\n        and derived metrics associated with the macro call #}\n        {% for metric_name in metric_tree.full_set %}\n            {% set metric_relation = metric(metric_name)%}\n            \n            {# This macro returns a list of dimensions that are inclusive of calendar dimensions #}\n            {% set complete_dimension_list = metric_relation.dimensions + calendar_dimensions %}\n\n            {# If the dimension provided is not present in the loop metrics dimension list then we \n            will raise an error. If it is missing in ANY of the metrics, it cannot be used in the \n            macro call. Only dimensions that are valid in all metrics are valid in the macro call #}\n            {% if dim not in complete_dimension_list %}\n                {% if dim not in calendar_dimensions  %}\n                    {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name) %}\n                {% else %}\n                    {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name ~ \". If the dimension is from a custom calendar table, please create the custom_calendar_dimension_list as shown in the README.\") %}\n                {% endif %}\n            {% endif %}\n\n        {%endfor%}\n    {%endfor%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7907755, "supported_languages": null}, "macro.metrics.validate_grain_order": {"unique_id": "macro.metrics.validate_grain_order", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/validate_grain_order.sql", "original_file_path": "macros/validation/validate_grain_order.sql", "name": "validate_grain_order", "macro_sql": "{% macro validate_grain_order(metric_grain, calculation_grain) %}\n    {% set grains = metrics.get_grain_order() %}\n    \n    {% if metric_grain not in grains or calculation_grain not in grains %}\n        {% set comma = joiner(\", \") %}\n        {% do exceptions.raise_compiler_error(\"Unknown grains: [\" ~ (comma() ~ metric_grain if metric_grain not in grains) ~ (comma() ~ calculation_grain if calculation_grain not in grains) ~ \"]\") %}\n    {% endif %}\n\n    {% set metric_grain_index = grains.index(metric_grain) %}\n    {% set calculation_grain_index = grains.index(calculation_grain) %}\n\n    {% if (calculation_grain_index < metric_grain_index) %}\n        {% do exceptions.raise_compiler_error(\"Can't calculate secondary metric at \" ~ calculation_grain ~\"-level when metric is at \" ~ metric_grain ~ \"-level\") %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.get_grain_order"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7935486, "supported_languages": null}, "macro.metrics.is_valid_dimension": {"unique_id": "macro.metrics.is_valid_dimension", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/is_valid_dimension.sql", "original_file_path": "macros/validation/is_valid_dimension.sql", "name": "is_valid_dimension", "macro_sql": "{% macro is_valid_dimension(dim_name, dimension_list) %}\n    {% if execute %}\n        {%- if dim_name not in dimension_list -%}\n            {%- do exceptions.raise_compiler_error(dim_name ~ \" is not a valid dimension\") %}\n        {%- endif -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.794624, "supported_languages": null}, "macro.metrics.validate_derived_metrics": {"unique_id": "macro.metrics.validate_derived_metrics", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/validate_derived_metrics.sql", "original_file_path": "macros/validation/validate_derived_metrics.sql", "name": "validate_derived_metrics", "macro_sql": "{% macro validate_derived_metrics(metric_tree) %}\n\n    {# We loop through the full set here to ensure that metrics that aren't listed \n    as derived are not dependent on another metric.  #}\n\n    {% for metric_name in metric_tree.full_set %}\n        {% set metric_relation = metric(metric_name)%}\n        {% set metric_relation_depends_on = metric_relation.metrics  | join (\",\") %}\n        {% if metric_relation.calculation_method != \"derived\" and metric_relation.metrics | length > 0 %}\n            {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~\" also references '\" ~ metric_relation_depends_on ~ \"' but its calculation method is '\" ~ metric_relation.calculation_method ~ \"'. Only metrics of calculation method derived can reference other metrics.\") %}\n        {%- endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.7965474, "supported_languages": null}, "macro.metrics.validate_grain": {"unique_id": "macro.metrics.validate_grain", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/validate_grain.sql", "original_file_path": "macros/validation/validate_grain.sql", "name": "validate_grain", "macro_sql": "{% macro validate_grain(grain, metric_tree, metrics_dictionary, secondary_calculations) %}\n\n    {# We loop through the full set here to ensure that the provided grain works for all metrics\n    returned or used, not just those listed #}\n\n    {% for metric_name in metric_tree.full_set %}\n        {% set metric_relation = metric(metric_name)%}\n        {% if grain not in metric_relation.time_grains%}\n            {% if metric_name not in metric_tree.base_set %}\n                {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is an upstream metric of one of the provided metrics. The grain \" ~ grain ~ \" is not defined in its metric definition.\") %}\n            {% else %}\n                {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" does not have the provided time grain \" ~ grain ~ \" defined in the metric definition.\") %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n    {% if grain == 'all_time' %}\n\n        {% if secondary_calculations | length > 0 %}\n            {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support secondary calculations.\") %}\n        {% endif %}\n\n        {% for metric_name in metric_tree.full_set %}\n            {% if metrics_dictionary[metric_name].window is not none%}\n                {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support metrics with window definitions.\") %}\n            {% endif%}\n        {% endfor%}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8003569, "supported_languages": null}, "macro.metrics.validate_develop_grain": {"unique_id": "macro.metrics.validate_develop_grain", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/validation/validate_develop_grain.sql", "original_file_path": "macros/validation/validate_develop_grain.sql", "name": "validate_develop_grain", "macro_sql": "{% macro validate_develop_grain(grain, metric_tree, metrics_dictionary, secondary_calculations) %}\n\n    {# We loop through the full set here to ensure that the provided grain works for all metrics\n    returned or used, not just those listed #}\n\n    {% if grain == 'all_time' %}\n\n        {% if secondary_calculations | length > 0 %}\n            {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support secondary calculations.\") %}\n        {% endif %}\n\n        {% for metric in metrics_dictionary %}\n            {% if metric.window is not none %}\n                {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support metrics with window definitions.\") %}\n            {% endif %}\n        {% endfor%}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8022563, "supported_languages": null}, "macro.metrics.test_metric_equality": {"unique_id": "macro.metrics.test_metric_equality", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "test_metric_equality", "macro_sql": "{% test metric_equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_metric_equality', 'metrics')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__test_metric_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8052704, "supported_languages": null}, "macro.metrics.default__test_metric_equality": {"unique_id": "macro.metrics.default__test_metric_equality", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "default__test_metric_equality", "macro_sql": "{% macro default__test_metric_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do metrics._metric_is_relation(model, 'test_metric_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do metrics._metric_is_ephemeral(model, 'test_metric_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics._metric_is_relation", "macro.metrics._metric_is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8074653, "supported_languages": null}, "macro.metrics._metric_is_relation": {"unique_id": "macro.metrics._metric_is_relation", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "_metric_is_relation", "macro_sql": "{% macro _metric_is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8084068, "supported_languages": null}, "macro.metrics._metric_is_ephemeral": {"unique_id": "macro.metrics._metric_is_ephemeral", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "_metric_is_ephemeral", "macro_sql": "{% macro _metric_is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8098953, "supported_languages": null}, "macro.metrics.metric_get_intervals_between": {"unique_id": "macro.metrics.metric_get_intervals_between", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_get_intervals_between", "macro_sql": "{% macro metric_get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('metric_get_intervals_between', 'metrics')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8129022, "supported_languages": null}, "macro.metrics.default__metric_get_intervals_between": {"unique_id": "macro.metrics.default__metric_get_intervals_between", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_get_intervals_between", "macro_sql": "{% macro default__metric_get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('metric_get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('metric_get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.814373, "supported_languages": null}, "macro.metrics.metric_date_spine": {"unique_id": "macro.metrics.metric_date_spine", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_date_spine", "macro_sql": "{% macro metric_date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('metric_date_spine', 'metrics')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8149612, "supported_languages": null}, "macro.metrics.default__metric_date_spine": {"unique_id": "macro.metrics.default__metric_date_spine", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_date_spine", "macro_sql": "{% macro default__metric_date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\nmetric_date_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{metrics.metric_generate_series(\n        metrics.metric_get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.metric_generate_series", "macro.metrics.metric_get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.815846, "supported_languages": null}, "macro.metrics.metric_get_powers_of_two": {"unique_id": "macro.metrics.metric_get_powers_of_two", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_get_powers_of_two", "macro_sql": "{% macro metric_get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('metric_get_powers_of_two', 'metrics')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8163152, "supported_languages": null}, "macro.metrics.default__metric_get_powers_of_two": {"unique_id": "macro.metrics.default__metric_get_powers_of_two", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_get_powers_of_two", "macro_sql": "{% macro default__metric_get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.817384, "supported_languages": null}, "macro.metrics.metric_generate_series": {"unique_id": "macro.metrics.metric_generate_series", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_generate_series", "macro_sql": "{% macro metric_generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('metric_generate_series', 'metrics')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8178701, "supported_languages": null}, "macro.metrics.default__metric_generate_series": {"unique_id": "macro.metrics.default__metric_generate_series", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_generate_series", "macro_sql": "{% macro default__metric_generate_series(upper_bound) %}\n\n    {% set n = metrics.metric_get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.metric_get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8191807, "supported_languages": null}, "macro.metrics.gen_base_query": {"unique_id": "macro.metrics.gen_base_query", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "name": "gen_base_query", "macro_sql": "{% macro gen_base_query(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n    {{ return(adapter.dispatch('gen_base_query', 'metrics')(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_base_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8304255, "supported_languages": null}, "macro.metrics.default__gen_base_query": {"unique_id": "macro.metrics.default__gen_base_query", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "name": "default__gen_base_query", "macro_sql": "{% macro default__gen_base_query(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n\n    {# This is the \"base\" CTE which selects the fields we need to correctly \n    calculate the metric.  #}\n        select \n        \n            cast(base_model.{{metric_dictionary.timestamp}} as date) as metric_date_day, -- timestamp field\n            \n            {%- if grain != 'all_time'%}\n            calendar_table.date_{{ grain }} as date_{{grain}},\n            {% endif -%}\n\n            calendar_table.date_day as window_filter_date,\n\n            {% if secondary_calculations | length > 0 -%}\n                {%- for period in relevant_periods %}\n            calendar_table.date_{{ period }},\n                {% endfor -%}\n            {%- endif -%}\n\n            {%- for dim in dimensions %}\n                base_model.{{ dim }},\n            {%- endfor %}\n\n            {%- for calendar_dim in calendar_dimensions %}\n                calendar_table.{{ calendar_dim }},\n            {%- endfor %}\n\n            {%- if metric_dictionary.expression and metric_dictionary.expression | replace('*', '') | trim != '' %}\n                ({{ metric_dictionary.expression }}) as property_to_aggregate\n            {%- elif metric_dictionary.calculation_type == 'count' -%}\n            1 as property_to_aggregate /*a specific expression to aggregate wasn't provided, so this effectively creates count(*) */\n            {%- else -%}\n                {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric_dictionary.name ~ \"`\") -%}  \n            {%- endif %}\n\n        from {{ metric_dictionary.metric_model }} base_model \n        left join {{calendar_tbl}} calendar_table\n\n        {% if metric_dictionary.window is not none %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) >= dateadd({{metric_dictionary.window.period}}, -{{metric_dictionary.window.count}}, calendar_table.date_day)\n            and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n        {% else %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n        {% endif %}\n\n        where 1=1\n        \n        {#- metric start/end dates also applied here to limit incoming data -#}\n        {% if start_date or end_date %}\n            and (\n            {% if start_date and end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n                and cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- elif start_date and not end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n            {%- elif end_date and not start_date -%}\n                cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- endif %} \n            )\n        {% endif -%} \n        {#- metric filter clauses... -#}\n        {% if metric_dictionary.filters %}\n            and (\n                {% for filter in metric_dictionary.filters -%}\n                    {%- if not loop.first -%} and {% endif %}{{ filter.field }} {{ filter.operator }} {{ filter.value }}\n                {% endfor -%}\n            )\n        {% endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8353062, "supported_languages": null}, "macro.metrics.bigquery__gen_base_query": {"unique_id": "macro.metrics.bigquery__gen_base_query", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "name": "bigquery__gen_base_query", "macro_sql": "{% macro bigquery__gen_base_query(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n\n    {# This is the \"base\" CTE which selects the fields we need to correctly \n    calculate the metric.  #}\n        select \n\n            {# This section looks at the sql aspect of the metric and ensures that \n            the value input into the macro is accurate -#}\n\n            cast(base_model.{{metric_dictionary.timestamp}} as date) as metric_date_day, -- timestamp field\n            \n            {%- if grain != 'all_time'%}\n            calendar_table.date_{{ grain }} as date_{{grain}},\n            {% endif -%}\n\n            calendar_table.date_day as window_filter_date,\n\n            {% if secondary_calculations | length > 0 -%}\n                {%- for period in relevant_periods %}\n            calendar_table.date_{{ period }},\n                {% endfor -%}\n            {%- endif -%}\n\n            {%- for dim in dimensions %}\n                base_model.{{ dim }},\n            {%- endfor %}\n\n            {%- for calendar_dim in calendar_dimensions %}\n                calendar_table.{{ calendar_dim }},\n            {%- endfor %}\n\n            {%- if metric_dictionary.expression and metric_dictionary.expression | replace('*', '') | trim != '' %}\n                ({{ metric_dictionary.expression }}) as property_to_aggregate\n            {%- elif metric_dictionary.calculation_method == 'count' -%}\n\n            1 as property_to_aggregate /*a specific expression to aggregate wasn't provided, so this effectively creates count(*) */\n            {%- else -%}\n                {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric_dictionary.name ~ \"`\") -%}  \n            {%- endif %}\n\n        from {{ metric_dictionary.metric_model }} base_model \n        left join {{calendar_tbl}} calendar_table\n\n        {% if metric_dictionary.window is not none %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) >= date_sub(calendar_table.date_day, interval {{metric_dictionary.window.count}} {{metric_dictionary.window.period}})\n            and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n        {% else %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n        {% endif %}\n\n        where 1=1\n\n        {#- metric start/end dates also applied here to limit incoming data -#}\n        {% if start_date or end_date %}\n            and (\n            {% if start_date and end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n                and cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- elif start_date and not end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n            {%- elif end_date and not start_date -%}\n                cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- endif %} \n            )\n        {% endif -%} \n        {#- metric filter clauses... -#}\n        {% if metric_dictionary.filters %}\n            and (\n                {% for filter in metric_dictionary.filters -%}\n                    {%- if not loop.first -%} and {% endif %}{{ filter.field }} {{ filter.operator }} {{ filter.value }}\n                {% endfor -%}\n            )\n        {% endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8400555, "supported_languages": null}, "macro.metrics.postgres__gen_base_query": {"unique_id": "macro.metrics.postgres__gen_base_query", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "name": "postgres__gen_base_query", "macro_sql": "{% macro postgres__gen_base_query(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n\n    {# This is the \"base\" CTE which selects the fields we need to correctly \n    calculate the metric.  #}\n        select \n        \n            {# This section looks at the sql aspect of the metric and ensures that \n            the value input into the macro is accurate -#}\n            cast(base_model.{{metric_dictionary.timestamp}} as date) as metric_date_day, -- timestamp field\n            \n            {%- if grain != 'all_time'%}\n            calendar_table.date_{{ grain }} as date_{{grain}},\n            {% endif -%}\n            \n            calendar_table.date_day as window_filter_date,\n\n            {% if secondary_calculations | length > 0 -%}\n                {%- for period in relevant_periods %}\n            calendar_table.date_{{ period }},\n                {% endfor -%}\n            {%- endif -%}\n\n            {%- for dim in dimensions %}\n                base_model.{{ dim }},\n            {%- endfor %}\n\n            {%- for calendar_dim in calendar_dimensions %}\n                calendar_table.{{ calendar_dim }},\n            {%- endfor %}\n            {%- if metric_dictionary.expression and metric_dictionary.expression | replace('*', '') | trim != '' %}\n                ({{ metric_dictionary.expression }}) as property_to_aggregate\n            {%- elif metric_dictionary.calculation_method == 'count' -%}\n            1 as property_to_aggregate /*a specific expression to aggregate wasn't provided, so this effectively creates count(*) */\n            {%- else -%}\n                {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric_dictionary.name ~ \"`\") -%}  \n            {%- endif %}\n\n        from {{ metric_dictionary.metric_model }} base_model \n        left join {{calendar_tbl}} calendar_table\n\n        {% if metric_dictionary.window is not none %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) >=  calendar_table.date_day - interval '{{metric_dictionary.window.count}} {{metric_dictionary.window.period}}'\n            and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n        {% else %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n        {% endif %}\n\n\n        where 1=1\n        \n        {#- metric start/end dates also applied here to limit incoming data -#}\n        {% if start_date or end_date %}\n            and (\n            {% if start_date and end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n                and cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- elif start_date and not end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n            {%- elif end_date and not start_date -%}\n                cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- endif %} \n            )\n        {% endif -%} \n        {#- metric filter clauses... -#}\n        {% if metric_dictionary.filters %}\n            and (\n                {% for filter in metric_dictionary.filters -%}\n                    {%- if not loop.first -%} and {% endif %}{{ filter.field }} {{ filter.operator }} {{ filter.value }}\n                {% endfor -%}\n            )\n        {% endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8448083, "supported_languages": null}, "macro.metrics.redshift__gen_base_query": {"unique_id": "macro.metrics.redshift__gen_base_query", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "name": "redshift__gen_base_query", "macro_sql": "{% macro redshift__gen_base_query(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n\n    {# This is the \"base\" CTE which selects the fields we need to correctly \n    calculate the metric.  #}\n        select \n        \n            cast(base_model.{{metric_dictionary.timestamp}} as date) as metric_date_day, -- timestamp field\n            \n            {%- if grain != 'all_time'%}\n            calendar_table.date_{{ grain }} as date_{{grain}},\n            {% endif -%}\n\n            calendar_table.date_day as window_filter_date,\n\n            {% if secondary_calculations | length > 0 -%}\n                {%- for period in relevant_periods %}\n            calendar_table.date_{{ period }},\n                {% endfor -%}\n            {%- endif -%}\n\n            {%- for dim in dimensions %}\n                base_model.{{ dim }},\n            {%- endfor %}\n\n            {%- for calendar_dim in calendar_dimensions %}\n                calendar_table.{{ calendar_dim }},\n            {%- endfor %}\n\n            {%- if metric_dictionary.expression and metric_dictionary.expression | replace('*', '') | trim != '' %}\n                ({{ metric_dictionary.expression }}) as property_to_aggregate\n            {%- elif metric_dictionary.calculation_type == 'count' -%}\n            1 as property_to_aggregate /*a specific expression to aggregate wasn't provided, so this effectively creates count(*) */\n            {%- else -%}\n                {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric_dictionary.name ~ \"`\") -%}  \n            {%- endif %}\n\n        from {{ metric_dictionary.metric_model }} base_model \n        left join {{calendar_tbl}} calendar_table\n\n        {% if metric_dictionary.window is not none %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) >= dateadd({{metric_dictionary.window.period}}, -{{metric_dictionary.window.count}}, calendar_table.date_day)\n            and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n        {% else %}\n            on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n        {% endif %}\n\n        where 1=1\n        \n        {#- metric start/end dates also applied here to limit incoming data -#}\n        {% if start_date or end_date %}\n            and (\n            {% if start_date and end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n                and cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- elif start_date and not end_date -%}\n                cast({{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n            {%- elif end_date and not start_date -%}\n                cast({{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n            {%- endif %} \n            )\n        {% endif -%} \n        {#- metric filter clauses... -#}\n        {% if metric_dictionary.filters %}\n            and (\n                {% for filter in metric_dictionary.filters -%}\n                    {%- if not loop.first -%} and {% endif %}{{ filter.field }} {{ filter.operator }} {{ filter.value }}\n                {% endfor -%}\n            )\n        {% endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8494964, "supported_languages": null}, "macro.metrics.gen_aggregate_cte": {"unique_id": "macro.metrics.gen_aggregate_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "name": "gen_aggregate_cte", "macro_sql": "{%- macro gen_aggregate_cte(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) -%}\n    {{ return(adapter.dispatch('gen_aggregate_cte', 'metrics')(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_aggregate_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8517733, "supported_languages": null}, "macro.metrics.default__gen_aggregate_cte": {"unique_id": "macro.metrics.default__gen_aggregate_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "name": "default__gen_aggregate_cte", "macro_sql": "{%- macro default__gen_aggregate_cte(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n\n, {{metric_dictionary.name}}__aggregate as (\n    {# This is the most important CTE. Instead of joining all relevant information\n    and THEN aggregating, we are instead aggregating from the beginning and then \n    joining downstream for performance. Additionally, we're using a subquery instead \n    of a CTE, which was significantly more performant during our testing. -#}\n    select\n\n        {%- if grain != 'all_time' %}\n        date_{{grain}},\n\n        {#- All of the other relevant periods that aren't currently selected as the grain\n        are neccesary for downstream secondary calculations. We filter it on whether \n        there are secondary calculations to reduce the need for overhead -#}\n            {%- if secondary_calculations | length > 0 -%}\n                {%- for period in relevant_periods %}\n        date_{{ period }},\n                {% endfor -%}\n            {% endif -%}\n        {% endif -%}\n\n        {#- This is the consistent code you'll find that loops through the list of \n        dimensions. It is used throughout this macro, with slight differences to \n        account for comma syntax around loop last -#}\n        {% for dim in dimensions %}\n        {{ dim }},\n        {%- endfor %}\n\n        {%- for calendar_dim in calendar_dimensions %}\n        {{ calendar_dim }},\n        {% endfor -%}\n\n        {#- This line performs the relevant aggregation by calling the \n        gen_primary_metric_aggregate macro. Take a look at that one if you're curious -#}\n        {{ metrics.gen_primary_metric_aggregate(metric_dictionary.calculation_method, 'property_to_aggregate') }} as {{ metric_dictionary.name }},\n\n        {%- if grain != 'all_time' %}\n        {{ bool_or('metric_date_day is not null') }} as has_data\n        {% else %}\n        min(metric_date_day) as metric_start_date,\n        max(metric_date_day) as metric_end_date\n        {% endif %}\n\n    from ({{ metrics.gen_base_query(\n                metric_dictionary=metric_dictionary,\n                grain=grain, \n                dimensions=dimensions, \n                secondary_calculations=secondary_calculations, \n                start_date=start_date, \n                end_date=end_date, \n                calendar_tbl=calendar_tbl, \n                relevant_periods=relevant_periods, \n                calendar_dimensions=calendar_dimensions) }}\n    ) as base_query\n\n    where 1=1\n\n    {% if metric_dictionary.window is not none %}\n    and date_{{grain}} = window_filter_date\n    {% endif %}\n\n    {{ metrics.gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n)\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.gen_primary_metric_aggregate", "macro.dbt_utils.bool_or", "macro.metrics.gen_base_query", "macro.metrics.gen_group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8548305, "supported_languages": null}, "macro.metrics.gen_primary_metric_aggregate": {"unique_id": "macro.metrics.gen_primary_metric_aggregate", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "gen_primary_metric_aggregate", "macro_sql": " \n{%- macro gen_primary_metric_aggregate(aggregate, expression) -%}\n    {{ return(adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(aggregate, expression)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_primary_metric_aggregate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.85767, "supported_languages": null}, "macro.metrics.default__gen_primary_metric_aggregate": {"unique_id": "macro.metrics.default__gen_primary_metric_aggregate", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__gen_primary_metric_aggregate", "macro_sql": "{%- macro default__gen_primary_metric_aggregate(aggregate, expression) -%}\n\n    {%- if aggregate == 'count' -%}\n        {{ return(adapter.dispatch('metric_count', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'count_distinct' -%}\n        {{ return(adapter.dispatch('metric_count_distinct', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'average' -%}\n        {{ return(adapter.dispatch('metric_average', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'max' -%}\n        {{ return(adapter.dispatch('metric_max', 'metrics')(expression)) }}\n       \n    {%- elif aggregate == 'min' -%}\n        {{ return(adapter.dispatch('metric_min', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'sum' -%}\n        {{ return(adapter.dispatch('metric_sum', 'metrics')(expression)) }}\n\n    {%- elif aggregate == 'derived' -%}\n        {{ return(adapter.dispatch('metric_derived', 'metrics')(expression)) }}\n\n    {%- else -%}\n        {%- do exceptions.raise_compiler_error(\"Unknown aggregation style: \" ~ aggregate) -%}  \n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__metric_count", "macro.metrics.default__metric_count_distinct", "macro.metrics.default__metric_average", "macro.metrics.default__metric_max", "macro.metrics.default__metric_min", "macro.metrics.default__metric_sum", "macro.metrics.default__metric_derived"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.860519, "supported_languages": null}, "macro.metrics.default__metric_count": {"unique_id": "macro.metrics.default__metric_count", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_count", "macro_sql": "{% macro default__metric_count(expression) %}\n        count({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8608239, "supported_languages": null}, "macro.metrics.default__metric_count_distinct": {"unique_id": "macro.metrics.default__metric_count_distinct", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_count_distinct", "macro_sql": "{% macro default__metric_count_distinct(expression) %}\n        count(distinct {{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8610895, "supported_languages": null}, "macro.metrics.default__metric_average": {"unique_id": "macro.metrics.default__metric_average", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_average", "macro_sql": "{% macro default__metric_average(expression) %}\n        avg({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.861352, "supported_languages": null}, "macro.metrics.redshift__metric_average": {"unique_id": "macro.metrics.redshift__metric_average", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "redshift__metric_average", "macro_sql": "{% macro redshift__metric_average(expression) %}\n        avg(cast({{ expression }} as float))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8616142, "supported_languages": null}, "macro.metrics.default__metric_max": {"unique_id": "macro.metrics.default__metric_max", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_max", "macro_sql": "{% macro default__metric_max(expression) %}\n        max({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8618717, "supported_languages": null}, "macro.metrics.default__metric_min": {"unique_id": "macro.metrics.default__metric_min", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_min", "macro_sql": "{% macro default__metric_min(expression) %}\n        min({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8621285, "supported_languages": null}, "macro.metrics.default__metric_sum": {"unique_id": "macro.metrics.default__metric_sum", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_sum", "macro_sql": "{% macro default__metric_sum(expression) %}\n        sum({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.862386, "supported_languages": null}, "macro.metrics.default__metric_derived": {"unique_id": "macro.metrics.default__metric_derived", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_derived", "macro_sql": "{% macro default__metric_derived(expression) %}\n        {{ expression }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8626382, "supported_languages": null}, "macro.metrics.gen_order_by": {"unique_id": "macro.metrics.gen_order_by", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "name": "gen_order_by", "macro_sql": "{%- macro gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n    {{ return(adapter.dispatch('gen_order_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_order_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.863991, "supported_languages": null}, "macro.metrics.default__gen_order_by": {"unique_id": "macro.metrics.default__gen_order_by", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "name": "default__gen_order_by", "macro_sql": "{% macro default__gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) %}\n\n{#- This model exclusively exists because dynamic group by counts based on range \nwere too funky when we hardcoded values for 1+1. So we're getting around it by\nmaking it its own function -#}\n\n{#- The issue arises when we have an initial date column (ie date_month) where month \nis also included in the relevent periods. This causes issues and so we need to\nremove the grain from the list of relevant periods so it isnt double counted -#}\n\n    {%- set dimension_length = dimensions | length -%}\n    {%- set calendar_dimension_length = calendar_dimensions | length -%}\n\n    {%- set cleaned_relevant_periods = [] -%}\n    {%- set period_length = relevant_periods | length -%}\n    {%- set total_length = dimension_length + period_length + calendar_dimension_length -%}\n\n    {% if grain != 'all_time' %}\n        order by\n        {% for number in range(1,total_length+2) -%}\n            {{ number }} desc {%- if not loop.last -%}, {% endif -%}\n        {% endfor -%}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8655248, "supported_languages": null}, "macro.metrics.gen_final_cte": {"unique_id": "macro.metrics.gen_final_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "gen_final_cte", "macro_sql": "{%- macro gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) -%}\n    {{ return(adapter.dispatch('gen_final_cte', 'metrics')(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_final_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8684895, "supported_languages": null}, "macro.metrics.default__gen_final_cte": {"unique_id": "macro.metrics.default__gen_final_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "default__gen_final_cte", "macro_sql": "{% macro default__gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) %}\n\n\n{%- if secondary_calculations | length > 0 -%}\n\n    , final as (\n\n        select\n            *\n        from secondary_calculations\n    )\n\n    select * from final \n\n    {# metric where clauses #}\n    {%- if where %}\n    where {{ where }}\n    {%- endif %}\n    {{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n{% else %}\n\n    {%- if metric_tree.full_set | length > 1 %}\n\n    select * from joined_metrics\n    {#- metric where clauses -#}\n        {%- if where %}\n    where {{ where }}\n        {%- endif -%}\n    {{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n    {% else %}\n\n    select * from {{metric_tree.base_set[0]}}__final \n        {%- if where %}\n    where {{ where }}\n        {%- endif -%}\n    {{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n    \n    {%- endif %}\n\n\n{%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.gen_order_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8705542, "supported_languages": null}, "macro.metrics.redshift__gen_final_cte": {"unique_id": "macro.metrics.redshift__gen_final_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "redshift__gen_final_cte", "macro_sql": "{% macro redshift__gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) %}\n\n\n{%- if secondary_calculations | length > 0 -%}\n\n    , final as (\n\n        select\n            *\n        from secondary_calculations\n    )\n\n    select * from final \n\n    {# metric where clauses #}\n    {%- if where %}\n    where {{ where }}\n    {%- endif %}\n\n{% else %}\n\n    {%- if metric_tree.full_set | length > 1 %}\n\n    select * from joined_metrics\n    {#- metric where clauses -#}\n        {%- if where %}\n    where {{ where }}\n        {%- endif -%}\n\n    {% else %}\n\n    select * from {{metric_tree.base_set[0]}}__final \n        {%- if where %}\n    where {{ where }}\n        {%- endif -%}\n    \n    {%- endif %}\n\n\n{%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8721478, "supported_languages": null}, "macro.metrics.postgres__gen_final_cte": {"unique_id": "macro.metrics.postgres__gen_final_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "postgres__gen_final_cte", "macro_sql": "{% macro postgres__gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) %}\n\n\n{%- if secondary_calculations | length > 0 -%}\n\n    , final as (\n\n        select\n            *\n        from secondary_calculations\n    )\n\n    select * from final \n\n    {# metric where clauses #}\n    {%- if where %}\n    where {{ where }}\n    {%- endif %}\n\n{% else %}\n\n    {%- if metric_tree.full_set | length > 1 %}\n\n    select * from joined_metrics\n    {#- metric where clauses -#}\n        {%- if where %}\n    where {{ where }}\n        {%- endif -%}\n\n    {% else %}\n\n    select * from {{metric_tree.base_set[0]}}__final \n        {%- if where %}\n    where {{ where }}\n        {%- endif -%}\n    \n    {%- endif %}\n\n\n{%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8735728, "supported_languages": null}, "macro.metrics.gen_dimensions_cte": {"unique_id": "macro.metrics.gen_dimensions_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "name": "gen_dimensions_cte", "macro_sql": "{%- macro gen_dimensions_cte(metric_name, dimensions) -%}\n    {{ return(adapter.dispatch('gen_dimensions_cte', 'metrics')(metric_name, dimensions)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_dimensions_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.874641, "supported_languages": null}, "macro.metrics.default__gen_dimensions_cte": {"unique_id": "macro.metrics.default__gen_dimensions_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "name": "default__gen_dimensions_cte", "macro_sql": "{% macro default__gen_dimensions_cte(metric_name, dimensions) %}\n\n, {{metric_name}}__dims as (\n    select distinct\n        {% for dim in dimensions %}\n        {{ dim }}{%- if not loop.last -%},{% endif -%}\n        {%- endfor %}\n        \n    from {{metric_name}}__aggregate\n)\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8753366, "supported_languages": null}, "macro.metrics.build_metric_sql": {"unique_id": "macro.metrics.build_metric_sql", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/build_metric_sql.sql", "original_file_path": "macros/sql_gen/build_metric_sql.sql", "name": "build_metric_sql", "macro_sql": "{%- macro build_metric_sql(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions, dimensions_provided) %}\n    \n    {%- set treat_null_values_as_zero = metric_dictionary.get(\"config\").get(\"treat_null_values_as_zero\", True)  -%}\n    {#- This is the SQL Gen part - we've broken each component out into individual macros -#}\n    {#- We broke this out so it can loop for composite metrics -#}\n    {{ metrics.gen_aggregate_cte(\n        metric_dictionary=metric_dictionary,\n        grain=grain, \n        dimensions=dimensions, \n        secondary_calculations=secondary_calculations,\n        start_date=start_date, \n        end_date=end_date, \n        calendar_tbl=calendar_tbl, \n        relevant_periods=relevant_periods, \n        calendar_dimensions=calendar_dimensions\n    ) }}\n    \n    {#- Adding conditional logic to exclude the unique combinations of dimensions if there are no dimensions -#}\n    {%- if grain != \"all_time\" -%}\n\n        {%- if dimensions_provided == true -%}\n        \n            {{ metrics.gen_dimensions_cte(\n                metric_name=metric_dictionary.name, \n                dimensions=dimensions\n            ) }}\n        \n        {%- endif -%}\n\n\n        {{ metrics.gen_spine_time_cte(\n            metric_name=metric_dictionary.name, \n            grain=grain, \n            dimensions=dimensions, \n            secondary_calculations=secondary_calculations, \n            relevant_periods=relevant_periods, \n            calendar_dimensions=calendar_dimensions, \n            dimensions_provided=dimensions_provided\n        )}}\n\n    {%- endif -%}\n\n    {{ metrics.gen_metric_cte(\n        metric_name=metric_dictionary.name, \n        grain=grain, \n        dimensions=dimensions, \n        secondary_calculations=secondary_calculations, \n        start_date=start_date, \n        end_date=end_date, \n        relevant_periods=relevant_periods, \n        calendar_dimensions=calendar_dimensions,\n        treat_null_values_as_zero=treat_null_values_as_zero\n    )}}\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.gen_aggregate_cte", "macro.metrics.gen_dimensions_cte", "macro.metrics.gen_spine_time_cte", "macro.metrics.gen_metric_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8789568, "supported_languages": null}, "macro.metrics.gen_secondary_calculation_cte": {"unique_id": "macro.metrics.gen_secondary_calculation_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "name": "gen_secondary_calculation_cte", "macro_sql": "{%- macro gen_secondary_calculation_cte(metric_tree, grain, dimensions, secondary_calculations, calendar_dimensions, metric_dictionary\n) -%}\n    {{ return(adapter.dispatch('gen_secondary_calculation_cte', 'metrics')(metric_tree, grain, dimensions, secondary_calculations, calendar_dimensions, metric_dictionary)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_secondary_calculation_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.880843, "supported_languages": null}, "macro.metrics.default__gen_secondary_calculation_cte": {"unique_id": "macro.metrics.default__gen_secondary_calculation_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "name": "default__gen_secondary_calculation_cte", "macro_sql": "{% macro default__gen_secondary_calculation_cte(metric_tree, grain, dimensions, secondary_calculations, calendar_dimensions, metric_dictionary) %}\n\n{%- set metric_config = {} -%}\n{%- for metric_name, data in metric_dictionary.items() -%}\n    {%- do metric_config.update({metric_name: data.config}) -%}\n{%- endfor -%}\n\n{#- The logic for secondary calculations is past the point where having calendar + dim\nin a single list would create issues. So here we join them together. Plus it makes it\neasier for not having to update the working secondary calc logic -#}\n{%- set dimensions = dimensions+calendar_dimensions -%}\n\n, secondary_calculations as (\n\n    select \n        *\n\n        {%- for calc_config in secondary_calculations %}\n\n            {# This step exists to only provide the limited list if that is provided #}\n            {%- if calc_config.metric_list | length > 0 -%}\n\n                {%- for metric_name in calc_config.metric_list %}\n        , {{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config[metric_name]) }} as {{ metrics.generate_secondary_calculation_alias(metric_name,calc_config, grain, true) }}\n                {%- endfor %}  \n\n            {%- else %}\n\n                {%- for metric_name in metric_tree.base_set %}\n        , {{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config[metric_name]) }} as {{ metrics.generate_secondary_calculation_alias(metric_name,calc_config, grain, true) }}\n                {%- endfor %}\n\n            {%- endif %}\n\n        {%- endfor %}\n\n\n    from {% if metric_tree.full_set | length > 1 -%} joined_metrics {%- else -%} {{ metric_tree.base_set[0] }}__final {%- endif %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.perform_secondary_calculation", "macro.metrics.generate_secondary_calculation_alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8838625, "supported_languages": null}, "macro.metrics.gen_metric_cte": {"unique_id": "macro.metrics.gen_metric_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "name": "gen_metric_cte", "macro_sql": "{%- macro gen_metric_cte(metric_name, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, treat_null_values_as_zero) -%}\n    {{ return(adapter.dispatch('gen_metric_cte', 'metrics')(metric_name, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, treat_null_values_as_zero)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_metric_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8896859, "supported_languages": null}, "macro.metrics.default__gen_metric_cte": {"unique_id": "macro.metrics.default__gen_metric_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "name": "default__gen_metric_cte", "macro_sql": "{%- macro default__gen_metric_cte(metric_name, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, treat_null_values_as_zero) %}\n\n, {{metric_name}}__final as (\n\n    {%- if not treat_null_values_as_zero -%}\n        {%- set metric_val = metric_name -%}\n    {%- else -%}\n        {%- set metric_val = \"coalesce(\" ~ metric_name ~ \", 0) as \" ~ metric_name -%}\n    {%- endif %}\n    \n    select\n        {% if grain != 'all_time' %}\n        parent_metric_cte.date_{{grain}},\n            {%- if secondary_calculations | length > 0 -%}\n                {% for period in relevant_periods %}\n        parent_metric_cte.date_{{ period }},\n                {%- endfor -%}\n            {%- endif -%}\n        {%- endif -%}\n        \n        {%- for calendar_dim in calendar_dimensions %}\n        parent_metric_cte.{{ calendar_dim }},\n        {%- endfor %}\n\n        {%- for dim in dimensions %}\n        parent_metric_cte.{{ dim }},\n        {%- endfor %}\n        {{ metric_val }}\n        \n    {%- if grain == 'all_time' %}\n\n        ,metric_start_date\n        ,metric_end_date\n\n    from {{metric_name}}__aggregate as parent_metric_cte\n\n    {% else %}\n\n    from {{metric_name}}__spine_time as parent_metric_cte\n    left outer join {{metric_name}}__aggregate\n        using (\n            date_{{grain}}\n            {%- for calendar_dim in calendar_dimensions %}\n            , {{ calendar_dim }}\n            {%- endfor %}\n            {%- for dim in dimensions %}\n            , {{ dim }}\n            {%- endfor %}\n        )\n\n        {% if not start_date or not end_date -%}\n        where (\n            {% if not start_date and not end_date -%}\n            parent_metric_cte.date_{{grain}} >= (\n                select \n                    min(case when has_data then date_{{grain}} end) \n                from {{metric_name}}__aggregate\n            )\n            and parent_metric_cte.date_{{grain}} <= (\n                select \n                    max(case when has_data then date_{{grain}} end) \n                from {{metric_name}}__aggregate\n            )\n            {% elif not start_date and end_date -%}\n            parent_metric_cte.date_{{grain}} >= (\n                select \n                    min(case when has_data then date_{{grain}} end) \n                from {{metric_name}}__aggregate\n            )\n            {% elif start_date and not end_date -%}\n            parent_metric_cte.date_{{grain}} <= (\n                select \n                    max(case when has_data then date_{{grain}} end) \n                from {{metric_name}}__aggregate\n            )\n            {%- endif %} \n        )      \n        {% endif %} \n    {% endif -%}\n\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8935306, "supported_languages": null}, "macro.metrics.gen_spine_time_cte": {"unique_id": "macro.metrics.gen_spine_time_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "name": "gen_spine_time_cte", "macro_sql": "{%- macro gen_spine_time_cte(metric_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) -%}\n    {{ return(adapter.dispatch('gen_spine_time_cte', 'metrics')(metric_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_spine_time_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8954294, "supported_languages": null}, "macro.metrics.default__gen_spine_time_cte": {"unique_id": "macro.metrics.default__gen_spine_time_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "name": "default__gen_spine_time_cte", "macro_sql": "{% macro default__gen_spine_time_cte(metric_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) %}\n\n, {{metric_name}}__spine_time as (\n\n    select\n        calendar.date_{{grain}}\n\n        {%- if secondary_calculations | length > 0 -%}\n            {% for period in relevant_periods %}\n                {%- if period != grain -%}\n        , calendar.date_{{ period }}\n                {%- endif -%}\n            {% endfor -%}\n        {% endif -%}\n\n        {% for calendar_dim in calendar_dimensions %}\n        , calendar.{{ calendar_dim }}\n        {%- endfor %}\n\n        {%- for dim in dimensions %}\n        , {{metric_name}}__dims.{{ dim }}\n        {%- endfor %}\n\n    from calendar\n    {%- if dimensions_provided %}\n    cross join {{metric_name}}__dims\n    {%- endif %}\n    {{ metrics.gen_group_by(grain,dimensions,calendar_dimensions,relevant_periods) }}\n\n)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.gen_group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.8971837, "supported_languages": null}, "macro.metrics.gen_group_by": {"unique_id": "macro.metrics.gen_group_by", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "name": "gen_group_by", "macro_sql": "{%- macro gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n    {{ return(adapter.dispatch('gen_group_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.89877, "supported_languages": null}, "macro.metrics.default__gen_group_by": {"unique_id": "macro.metrics.default__gen_group_by", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "name": "default__gen_group_by", "macro_sql": "{% macro default__gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) %}\n\n{#- This model exclusively exists because dynamic group by counts based on range \nwere too funky when we hardcoded values for 1+1. So we're getting around it by\nmaking it its own function -#}\n\n{#- The issue arises when we have an initial date column (ie date_month) where month \nis also included in the relevent periods. This causes issues and so we need to\nremove the grain from the list of relevant periods so it isnt double counted -#}\n\n    {%- set dimension_length = dimensions | length -%}\n    {%- set calendar_dimension_length = calendar_dimensions | length -%}\n\n    {%- set cleaned_relevant_periods = [] -%}\n    {%- set period_length = relevant_periods | length -%}\n    {%- set total_length = dimension_length + period_length + calendar_dimension_length -%}\n\n    {% if grain == 'all_time' %}\n        {% if total_length > 0%}\n            group by\n            {% for number in range(1,total_length+1) -%}\n                {{ number }} {%- if not loop.last -%}, {% endif -%}\n            {% endfor -%}\n        {% endif %}\n    {% else %}\n        group by\n        {% for number in range(1,total_length+2) -%}\n            {{ number }} {%- if not loop.last -%}, {% endif -%}\n        {% endfor -%}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.900891, "supported_languages": null}, "macro.metrics.gen_calendar_cte": {"unique_id": "macro.metrics.gen_calendar_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "name": "gen_calendar_cte", "macro_sql": "{%- macro gen_calendar_cte(calendar_tbl, start_date, end_date) -%}\n    {{ return(adapter.dispatch('gen_calendar_cte', 'metrics')(calendar_tbl, start_date, end_date)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_calendar_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.9021378, "supported_languages": null}, "macro.metrics.default__gen_calendar_cte": {"unique_id": "macro.metrics.default__gen_calendar_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "name": "default__gen_calendar_cte", "macro_sql": "{%- macro default__gen_calendar_cte(calendar_tbl, start_date, end_date) %}\n\nwith calendar as (\n\n    {# This CTE creates our base calendar and then limits the date range for the \n    start and end date provided by the macro call -#}\n    select \n        * \n    from {{ calendar_tbl }}\n    {% if start_date or end_date %}\n        {%- if start_date and end_date -%}\n            where date_day >= cast('{{ start_date }}' as date)\n            and date_day <= cast('{{ end_date }}' as date)\n        {%- elif start_date and not end_date -%}\n            where date_day >= cast('{{ start_date }}' as date)\n        {%- elif end_date and not start_date -%}\n            where date_day <= cast('{{ end_date }}' as date)\n        {%- endif -%}       \n    {% endif %} \n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.9032218, "supported_languages": null}, "macro.metrics.gen_joined_metrics_cte": {"unique_id": "macro.metrics.gen_joined_metrics_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "name": "gen_joined_metrics_cte", "macro_sql": "{%- macro gen_joined_metrics_cte(metric_tree, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, metrics_dictionary) -%}\n    {{ return(adapter.dispatch('gen_joined_metrics_cte', 'metrics')(metric_tree, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, metrics_dictionary)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.metrics.default__gen_joined_metrics_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235796.914411, "supported_languages": null}, "macro.metrics.default__gen_joined_metrics_cte": {"unique_id": "macro.metrics.default__gen_joined_metrics_cte", "package_name": "metrics", "root_path": "/github/workspace/transform/dbt_packages/metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "name": "default__gen_joined_metrics_cte", "macro_sql": "{% macro default__gen_joined_metrics_cte(metric_tree, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, metrics_dictionary) %}\n\n{#- This section is a hacky workaround to account for postgres changes -#}\n{%- set cte_numbers = [] -%}\n{%- set unique_cte_numbers = [] -%}\n{#- the cte numbers are more representative of node depth -#}\n{%- if metric_tree.expression_set | length > 0 -%}\n    {%- for metric_name in metric_tree.ordered_expression_set -%}\n        {%- do cte_numbers.append(metric_tree.ordered_expression_set[metric_name]) -%}\n    {%- endfor -%}\n    {%- for cte_num in cte_numbers|unique -%}\n        {%- do unique_cte_numbers.append(cte_num) -%}\n    {%- endfor -%}\n{%- endif -%}\n\n{% set dimension_count = (dimensions | length + calendar_dimensions | length) | int %}\n\n, first_join_metrics as (\n\n    select\n        {% if grain != 'all_time'-%}\n        date_{{grain}}\n        {%- else -%}\n        1 as comma_placeholder\n        {%- endif -%}\n        {%- for calendar_dim in calendar_dimensions %}\n        , coalesce(\n            {%- for metric_name in metric_tree.parent_set %}\n                {{metric_name}}__final.{{ calendar_dim }}{%- if not loop.last -%},{% endif %}\n                {%- if metric_tree.parent_set | length == 1 -%}\n                , NULL\n                {%- endif -%}\n            {% endfor %}\n            ) as {{calendar_dim}}\n        {% endfor %}\n\n    {%- for period in relevant_periods %}\n        , coalesce(\n        {%- for metric_name in metric_tree.parent_set %}\n            {{metric_name}}__final.date_{{ period }} {%- if not loop.last -%},{% endif %}\n            {%- if metric_tree.parent_set | length == 1 %}\n            , NULL\n            {%- endif -%}\n        {% endfor %}\n        ) as date_{{period}}\n    {%- endfor %}\n\n\n    {%- for dim in dimensions %}\n        , coalesce(\n        {%- for metric_name in metric_tree.parent_set %}\n            {{metric_name}}__final.{{ dim }} {%- if not loop.last -%},{% endif %}\n            {%- if metric_tree.parent_set | length == 1 %}\n            , NULL\n            {%- endif -%}\n        {% endfor %}\n        ) as {{dim}}\n    {%- endfor %}\n    {% for metric_name in metric_tree.parent_set %}\n        , {{metric_name}} as {{metric_name}}\n    {%- endfor %}  \n\n    {%- if grain == 'all_time' %}\n    \n        , coalesce(\n            {%- for metric_name in metric_tree.parent_set %}\n            {{metric_name}}__final.metric_start_date {%- if not loop.last -%},{% endif %}\n                {%- if metric_tree.parent_set | length == 1 %}\n            , NULL\n                {%- endif -%}\n            {% endfor %}\n        ) as metric_start_date\n\n        , coalesce(\n            {%- for metric_name in metric_tree.parent_set %}\n            {{metric_name}}__final.metric_end_date {%- if not loop.last -%},{% endif %}\n                {%- if metric_tree.parent_set | length == 1 %}\n            , NULL\n                {%- endif -%}\n            {% endfor %}\n        ) as metric_end_date\n\n    {%- endif %}\n\n    from \n        {#- Loop through leaf metric list -#}\n        {%- for metric_name in metric_tree.parent_set -%}\n            {%- if loop.first %}\n        {{ metric_name }}__final\n            {%- else %}\n                {%- if grain != 'all_time'%}\n        full outer join {{metric_name}}__final\n                using (\n                    date_{{grain}}\n                    {%- for calendar_dim in calendar_dimensions %}\n                    , {{ calendar_dim }}\n                    {% endfor %}\n                    {%- for dim in dimensions %}\n                    , {{ dim }}\n                    {%- endfor %}\n                )\n                {%- else -%}\n                    {% if dimension_count != 0 %}\n        full outer join {{metric_name}}__final\n                    using (\n                        {%- for calendar_dim in calendar_dimensions %}\n                            {%- if not loop.first -%},{%- endif -%} {{ calendar_dim }}\n                        {% endfor -%}\n                        \n                        {%- for dim in dimensions %}\n                            {%- if loop.first and calendar_dimensions | length == 0 -%}\n                        {{ dim }}\n                            {%- elif not loop.first and calendar_dimensions | length == 0 -%}\n                        , {{ dim }}\n                            {%- else -%}\n                        , {{ dim }}\n                            {%- endif -%}\n                        {%- endfor -%}\n                    )\n                    {%- elif dimension_count == 0 %}\n        cross join {{metric_name}}__final\n                    {%- endif %}\n                {%- endif %}\n            {%- endif -%}\n        {%- endfor %} \n)\n\n{%- for cte_number in cte_numbers | unique | sort %}\n    {% set previous_cte_number = cte_number - 1 %}\n, join_metrics__{{cte_number}} as (\n\n    select \n    {% if loop.first %}\n        first_join_metrics.*\n    {%- else %}\n        join_metrics__{{previous_cte_number}}.*\n    {%- endif %}\n    {%- for metric in metric_tree.expression_set %}\n        {%- if metric_tree.ordered_expression_set[metric] == cte_number %}\n            {#- this logic will parse an expression for divisions signs (/) and wrap all divisors in nullif functions to prevent divide by zero -#}\n            {#- \"1 / 2 / 3 / ... / N\" results in \"1 / nullif(2, 0) / nullif(3, 0) / ... / nullif(N, 0)\"  -#}\n            {%- set metric_expression = metrics_dictionary[metric].expression %}\n            {%- if \"/\" in metric_expression -%}\n                {%- set split_division_metric = metric_expression.split('/') -%}\n                {%- set dividend = split_division_metric[0] -%}\n                {%- set divisors = split_division_metric[1:] | list -%}\n                {%- set expression = dividend ~ \" / nullif(\" ~ divisors | join(\", 0) / nullif(\") ~ \", 0)\" -%}\n            {%- else -%}\n                {%- set expression = metric_expression -%}\n            {%- endif %}\n        , ({{ expression | replace(\".metric_value\",\"\") }}) as {{ metrics_dictionary[metric].name }}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {% if loop.first %}\n    from first_join_metrics\n    {%- else %}\n    from join_metrics__{{previous_cte_number}}\n    {%- endif %}\n\n\n)\n    \n{%- endfor %}\n\n, joined_metrics as (\n\n    select \n\n        {%- if grain != 'all_time' %}\n        date_{{grain}}\n        {% else %}\n        metric_start_date\n        , metric_end_date\n        {%- endif -%}\n        {%- for period in relevant_periods %}\n        ,date_{{ period }}\n        {%- endfor %}\n        {%- for calendar_dim in calendar_dimensions %}\n        , {{ calendar_dim }}\n        {%- endfor %}\n        {%- for dim in dimensions %}\n        , {{ dim }}\n        {%- endfor %}\n        {%- for metric_name in metric_tree.parent_set %}\n        , {{metric_name}}\n        {%- endfor %}  \n        {%- for metric in metric_tree.expression_set %}\n        , {{ metric }}\n        {% endfor -%}\n    \n    {% if metric_tree.expression_set | length == 0 %}\n    from first_join_metrics\n    {% else %}\n    from join_metrics__999\n    {% endif %}\n\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0042298, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0083833, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0110574, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.017065, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.023163, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0248277, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0267618, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0289772, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0328233, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.035191, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0390797, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0402966, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.043221, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0442836, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.049439, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.051233, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"unique_id": "macro.dbt_external_tables.recover_partitions", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0517242, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"unique_id": "macro.dbt_external_tables.default__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0521727, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0531788, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0553925, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0618296, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0639124, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0735419, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0772152, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0799897, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0810752, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0815823, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0820267, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0860476, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0885894, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0892475, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.0902362, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1011398, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1020966, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1024504, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1033134, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.103669, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1045163, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1048763, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1056874, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1059935, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1068168, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/github/workspace/transform/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1669235797.1071527, "supported_languages": null}}, "docs": {"balboa.__overview__": {"unique_id": "balboa.__overview__", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "# Datacoves Demo\nThis project is used as a demonstration of an end-to-end data flow utilizing DataOps best practices and automate processes that:\n* Transform data to make it analytics read\n* Enforce governance rules\n* Capture data lineage\n* Capture documentation\n* Perform data testing\n\n![](https://www.dataops.live/hubfs/DataOps-Infinty-Blue-1.png)\n\n## Need Help\nContact: Noel Gomez at gomezn@datacoves.com"}, "balboa.__Analysis__": {"unique_id": "balboa.__Analysis__", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__Analysis__", "block_contents": "# BI Dashboards\nHere you can find information about tools outside of dbt which make use of Snowflake data\n\nOur BI server can be accessed <a href=\"https://analyze-datacoves-balboa.app.datacoves.com/\" target=\"_blank\">here</a>"}, "balboa.__balboa__": {"unique_id": "balboa.__balboa__", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__balboa__", "block_contents": "# Main Project\nThis area describes the models and transformations used in our data warehouse.\n\nMore information can be found on our <a href=\"https://app.datacoves.com\" target=\"_blank\">home page</a>\n\nUseful dbt packages can by found on <a href=\"https://hub.getdbt.com\" target=\"_blank\">dbt hub</a>\n\nUseful dbt libraries can by found on the <a href=\"https://datacoves.com/dbt-libs\" target=\"_blank\">Datacoves dbt libraries</a> page."}, "balboa.__dbt_expectations__": {"unique_id": "balboa.__dbt_expectations__", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__dbt_expectations__", "block_contents": "# Test macros provided by dbt expecations\nWe use this package to add more advanced tests to our models.\nFor more information, visit \n<a href=\"https://github.com/calogica/dbt-expectations\" target=\"_blank\">the dbt-expecations site.</a>"}, "balboa.__dbt_date__": {"unique_id": "balboa.__dbt_date__", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__dbt_date__", "block_contents": "# Utility macros used by dbt_utils\nWe use this suite of utility macros in our transformations."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.balboa.customer_loans": {"fqn": ["balboa", "L4_exposures", "customer_loans"], "unique_id": "exposure.balboa.customer_loans", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L4_exposures/customer_loans.yml", "original_file_path": "models/L4_exposures/customer_loans.yml", "name": "customer_loans", "type": "dashboard", "owner": {"email": "segan@datameer.com", "name": "Steve Egan"}, "resource_type": "exposure", "description": "Loan Performance\n", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://superset-dev123.east-us-a.datacoves.com:443/r/1", "depends_on": {"macros": [], "nodes": ["model.balboa._airbyte_raw_personal_loans", "model.balboa.current_population"]}, "refs": [["_airbyte_raw_personal_loans"], ["current_population"]], "sources": [], "created_at": 1669235798.9997811}}, "metrics": {"metric.balboa.sum_funded_amount": {"fqn": ["balboa", "L3_coves", "loan_analytics", "sum_funded_amount"], "unique_id": "metric.balboa.sum_funded_amount", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/loan_analytics/loan_metrics.yml", "original_file_path": "models/L3_coves/loan_analytics/loan_metrics.yml", "name": "sum_funded_amount", "description": "", "label": "Loan", "calculation_method": "sun", "timestamp": "last_credit_pull_d", "expression": "funded_amount", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": ["home_ownership", "grade", "loan_status"], "window": null, "model": "ref('_airbyte_raw_personal_loans')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.balboa._airbyte_raw_personal_loans"]}, "refs": [["_airbyte_raw_personal_loans"]], "metrics": [], "created_at": 1669235798.8357008}, "metric.balboa.sum_cases": {"fqn": ["balboa", "L3_coves", "covid_analytics", "sum_cases"], "unique_id": "metric.balboa.sum_cases", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/agg_cases_metrics.yml", "original_file_path": "models/L3_coves/covid_analytics/agg_cases_metrics.yml", "name": "sum_cases", "description": "", "label": "Covid Cases", "calculation_method": "sum", "timestamp": "date", "expression": "cases", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": ["state", "county", "country"], "window": null, "model": "ref('covid_cases_state')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.balboa.covid_cases_state"]}, "refs": [["covid_cases_state"]], "metrics": [], "created_at": 1669235798.8530133}, "metric.balboa.sum_deaths": {"fqn": ["balboa", "L3_coves", "covid_analytics", "sum_deaths"], "unique_id": "metric.balboa.sum_deaths", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/agg_cases_metrics.yml", "original_file_path": "models/L3_coves/covid_analytics/agg_cases_metrics.yml", "name": "sum_deaths", "description": "", "label": "Covid Deaths", "calculation_method": "sum", "timestamp": "date", "expression": "deaths", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": ["state", "county", "country"], "window": null, "model": "ref('covid_cases_state')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.balboa.covid_cases_state"]}, "refs": [["covid_cases_state"]], "metrics": [], "created_at": 1669235798.8587396}, "metric.balboa.average_cases": {"fqn": ["balboa", "L3_coves", "covid_analytics", "average_cases"], "unique_id": "metric.balboa.average_cases", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/agg_cases_metrics.yml", "original_file_path": "models/L3_coves/covid_analytics/agg_cases_metrics.yml", "name": "average_cases", "description": "", "label": "Covid Cases", "calculation_method": "average", "timestamp": "date", "expression": "cases", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": ["state", "county", "country"], "window": null, "model": "ref('covid_cases_state')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.balboa.covid_cases_state"]}, "refs": [["covid_cases_state"]], "metrics": [], "created_at": 1669235798.8646235}, "metric.balboa.average_deaths": {"fqn": ["balboa", "L3_coves", "covid_analytics", "average_deaths"], "unique_id": "metric.balboa.average_deaths", "package_name": "balboa", "root_path": "/github/workspace/transform", "path": "L3_coves/covid_analytics/agg_cases_metrics.yml", "original_file_path": "models/L3_coves/covid_analytics/agg_cases_metrics.yml", "name": "average_deaths", "description": "", "label": "Covid Deaths", "calculation_method": "average", "timestamp": "date", "expression": "deaths", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": ["state", "county", "country"], "window": null, "model": "ref('covid_cases_state')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.balboa.covid_cases_state"]}, "refs": [["covid_cases_state"]], "metrics": [], "created_at": 1669235798.8705144}}, "selectors": {}, "disabled": {"model.dbt_artifacts.fct_dbt__exposures_updates": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "fct_dbt__exposures_updates"], "unique_id": "model.dbt_artifacts.fct_dbt__exposures_updates", "raw_code": "with model_executions as (\n\n    select * from {{ ref('fct_dbt__model_executions') }}\n\n),\n\nexposures_record as (\n\n    select * from {{ ref('dim_dbt__exposures') }}\n\n),\n\n\nmodel_updates as (\n\n    select\n        max(query_completed_at) as latest_update,\n        node_id\n    from model_executions\n    group by node_id\n\n),\n\nexposures_latest as (\n\n    select\n        artifact_generated_at as latest_generation,\n        node_id,\n        name,\n        type,\n        owner,\n        maturity,\n        package_name,\n        output_feeds\n    from exposures_record\n    where artifact_generated_at = (select max(artifact_generated_at) from exposures_record)\n\n),\n\nexposures_updates as (\n\n    select\n        exposures_latest.latest_generation,\n        exposures_latest.node_id,\n        exposures_latest.name,\n        exposures_latest.type,\n        exposures_latest.owner,\n        exposures_latest.maturity,\n        exposures_latest.package_name,\n        exposures_latest.output_feeds,\n        model_updates.latest_update as feed_latest_update\n    from exposures_latest\n    left join model_updates\n        on exposures_latest.output_feeds = model_updates.node_id\n\n)\n\nselect * from exposures_updates", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "fct_dbt__exposures_updates.sql", "original_file_path": "models/fct_dbt__exposures_updates.sql", "name": "fct_dbt__exposures_updates", "alias": "fct_dbt__exposures_updates", "checksum": {"name": "sha256", "checksum": "ac4b6addc6f271846b05dd20bc4f20ab0866477af2fdf6888bd2fcc3214a3284"}, "tags": [], "refs": [["fct_dbt__model_executions"], ["fct_dbt__model_executions"], ["fct_dbt__model_executions"], ["dim_dbt__exposures"], ["dim_dbt__exposures"], ["dim_dbt__exposures"]], "sources": [], "metrics": [], "description": "A table of exposures and models feeding them. Latest update time for each models is provided.", "columns": {"latest_generation": {"name": "latest_generation", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "User-defined type of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "User-defined owner of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Source package in which each feed of an exposure was defined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_feeds": {"name": "output_feeds", "description": "Unique id for each feed of an exposure, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feed_latest_update": {"name": "feed_latest_update", "description": "Timestamp of the latest update of each feed of an exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0197687, "config_call_dict": {}}], "model.dbt_artifacts.dim_dbt__current_models": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "dim_dbt__current_models"], "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "raw_code": "with run_results as (\r\n\r\n    select *\r\n    from {{ ref('fct_dbt__run_results') }}\r\n\r\n),\r\n\r\nmodels as (\r\n\r\n    select *\r\n    from {{ ref('dim_dbt__models') }}\r\n\r\n),\r\n\r\nmodel_executions as (\r\n\r\n    select *\r\n    from {{ ref('fct_dbt__model_executions') }}\r\n\r\n),\r\n\r\n-- Get the most recent comile run\r\nlatest_compile as (\r\n\r\n    select artifact_run_id\r\n    from run_results\r\n    where execution_command = 'run'\r\n    order by artifact_generated_at desc\r\n    limit 1\r\n\r\n),\r\n\r\n-- Models present in the most recent compile run\r\nlatest_models as (\r\n\r\n    select models.*\r\n    from models\r\n    -- In a local deploy, the command id is sufficient, but not in cloud - that requires the cloud run id to achieve a match.\r\n    inner join latest_compile\r\n        on models.artifact_run_id = latest_compile.artifact_run_id\r\n\r\n),\r\n\r\nlatest_model_runs as (\r\n\r\n    select\r\n        latest_models.node_id,\r\n        model_executions.query_completed_at,\r\n        model_executions.total_node_runtime,\r\n        model_executions.rows_affected,\r\n        model_executions.was_full_refresh,\r\n        -- Work out indices so we can get the most recent runs, both incremental and full.\r\n        row_number() over (\r\n            partition by latest_models.node_id, model_executions.was_full_refresh\r\n            order by model_executions.query_completed_at desc\r\n        ) as run_idx\r\n    from latest_models\r\n    inner join model_executions\r\n        on latest_models.node_id = model_executions.node_id\r\n    -- Only successful runs\r\n    where model_executions.status = 'success'\r\n\r\n),\r\n\r\nlatest_model_stats as (\r\n    select\r\n        node_id,\r\n        max(iff(not was_full_refresh, query_completed_at, null)) as last_incremental_run_completed_at,\r\n        max(iff(not was_full_refresh, total_node_runtime, null)) as last_incremental_run_total_runtime,\r\n        max(iff(not was_full_refresh, rows_affected, null)) as last_incremental_run_rows_affected,\r\n        max(iff(was_full_refresh, query_completed_at, null)) as last_full_run_completed_at,\r\n        max(iff(was_full_refresh, total_node_runtime, null)) as last_full_run_total_runtime,\r\n        max(iff(was_full_refresh, rows_affected, null)) as last_full_run_rows_affected\r\n    from latest_model_runs\r\n    -- Only most recent runs (of each type)\r\n    where run_idx = 1\r\n    group by node_id\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        latest_models.*,\r\n        latest_model_stats.last_incremental_run_completed_at,\r\n        latest_model_stats.last_incremental_run_total_runtime,\r\n        latest_model_stats.last_incremental_run_rows_affected,\r\n        latest_model_stats.last_full_run_completed_at,\r\n        latest_model_stats.last_full_run_total_runtime,\r\n        latest_model_stats.last_full_run_rows_affected\r\n    from latest_models\r\n    left join latest_model_stats\r\n        on latest_models.node_id = latest_model_stats.node_id\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "name": "dim_dbt__current_models", "alias": "dim_dbt__current_models", "checksum": {"name": "sha256", "checksum": "c16fa2f540481f7ccf5a7bdf10ef598d8a602c9acdfe8030588b1157c1cb6f78"}, "tags": [], "refs": [["fct_dbt__run_results"], ["fct_dbt__run_results"], ["fct_dbt__run_results"], ["dim_dbt__models"], ["dim_dbt__models"], ["dim_dbt__models"], ["fct_dbt__model_executions"], ["fct_dbt__model_executions"], ["fct_dbt__model_executions"]], "sources": [], "metrics": [], "description": "A subset of the models found in `dim_models`, which were present in the manifest of the most recent run. This represents the models which are currently live in the dbt project.", "columns": {"manifest_model_id": {"name": "manifest_model_id", "description": "Primary key generated from the command_invocation_id and checksum.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The model name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_schema": {"name": "model_schema", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "List of node ids the model depends on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_path": {"name": "model_path", "description": "Filepath of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Unique identifier for the model. If a model is unchanged between separate executions this will remain the same.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_incremental_run_completed_at": {"name": "last_incremental_run_completed_at", "description": "The completion time from the last time this model was run during an increment run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_incremental_run_total_runtime": {"name": "last_incremental_run_total_runtime", "description": "The total runtime from the last time this model was run during an increment run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_incremental_run_rows_affected": {"name": "last_incremental_run_rows_affected", "description": "The number of rows affected from the last time this model was run during an increment run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_run_completed_at": {"name": "last_full_run_completed_at", "description": "The completion time from the last time this model was run during a full refresh.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_run_total_runtime": {"name": "last_full_run_total_runtime", "description": "The total runtime from the last time this model was run during a full refresh.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_run_rows_affected": {"name": "last_full_run_rows_affected", "description": "The number of rows affected from the last time this model was run during a full refresh.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0617669, "config_call_dict": {}}], "model.dbt_artifacts.fct_dbt__critical_path": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "fct_dbt__critical_path"], "unique_id": "model.dbt_artifacts.fct_dbt__critical_path", "raw_code": "with models as (\n\n    select *\n    from {{ ref('dim_dbt__models') }}\n\n),\n\nlatest_executions as (\n\n    select *\n    from {{ ref('fct_dbt__latest_full_model_executions') }}\n\n),\n\nlatest_id as (\n    -- Find the latest full, incremental execution\n\n    select any_value(artifact_run_id) as artifact_run_id\n    from latest_executions\n\n),\n\nlatest_models as (\n    -- Get the latest set of models for the above execution\n\n    select\n        models.node_id,\n        models.depends_on_nodes,\n        models.model_materialization\n    from latest_id\n    left join models on\n        latest_id.artifact_run_id = models.artifact_run_id\n\n\n),\n\nnode_dependencies as (\n    -- Create a row for each model and dependency (could be another model, or source)\n\n    select\n        latest_models.node_id,\n        node.value::string as depends_on_node_id,\n        regexp_substr(node.value::string, '^([a-z]+)') as depends_on_node_type\n    from latest_models,\n        lateral flatten(input => latest_models.depends_on_nodes) as node\n\n),\n\nnode_dependencies_deduped as (\n    -- depends_on_nodes is simply a list of all the ref() statements used in a model, so it may contain duplicates\n\n    select distinct\n        node_id,\n        depends_on_node_type,\n        depends_on_node_id\n    from node_dependencies\n\n),\n\nmodel_dependencies_with_total_node_runtime as (\n    -- Model dependencies enriched with execution time\n\n    select distinct\n        node_dependencies_deduped.node_id,\n        latest_executions.total_node_runtime,\n        node_dependencies_deduped.depends_on_node_id\n    from node_dependencies_deduped\n    -- Inner join to accomodate runs which exclude some models\n    inner join latest_executions on node_dependencies_deduped.node_id = latest_executions.node_id\n    where node_dependencies_deduped.depends_on_node_type = 'model'\n\n),\n\nmodels_with_at_least_one_model_dependency as (\n    -- Return a list of model nodes which have at least one model dependency\n\n    select distinct node_id\n    from node_dependencies\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_no_model_dependencies_with_total_node_runtime as (\n    -- Models which have no dependencies enriched with execution time\n    -- These are models at the base of the tree\n\n    select\n        latest_models.node_id,\n        latest_executions.total_node_runtime\n    from latest_models\n    left join models_with_at_least_one_model_dependency\n        on latest_models.node_id = models_with_at_least_one_model_dependency.node_id\n    left join latest_executions on latest_models.node_id = latest_executions.node_id\n    where models_with_at_least_one_model_dependency.node_id is null\n\n),\n\nmodels_with_dependent_models as (\n    -- Get a list of all the models which have dependent models\n\n    select distinct depends_on_node_id as node_id\n    from node_dependencies_deduped\n\n),\n\nmodels_with_no_dependent_models as (\n    -- Models which have no dependents\n    -- These are models at the tips of the tree\n\n    select latest_models.node_id\n    from latest_models\n    left join models_with_dependent_models\n        on latest_models.node_id = models_with_dependent_models.node_id\n    where models_with_dependent_models.node_id is null\n\n),\n\nanchor as (\n    -- The anchor of a recursive CTE is the initial query\n    -- The anchor in this case is models which have no dependents, the tips of the tree\n    -- The dependencies for these models are joined in to build out the paths during recursion\n\n    select\n        models_with_no_dependent_models.node_id,\n        coalesce(node_dependencies_deduped.depends_on_node_id, '') as depends_on_node_id,\n        coalesce(latest_executions.total_node_runtime, 0) as total_node_runtime\n    from models_with_no_dependent_models\n    left join node_dependencies_deduped on models_with_no_dependent_models.node_id = node_dependencies_deduped.node_id\n    left join latest_executions on models_with_no_dependent_models.node_id = latest_executions.node_id\n\n),\n\nall_needed_dependencies as (\n    -- Union all the base models with all other dependencies\n    -- Use an empty string for depends_on_node_id to avoid NULL result in a non-nullable column error\n    -- Nothing will join onto the empty string depends_on_node_id, ending the recursion at the base.\n\n    select\n        node_id,\n        total_node_runtime,\n        '' as depends_on_node_id\n    from models_with_no_model_dependencies_with_total_node_runtime\n    union\n    select\n        node_id,\n        total_node_runtime,\n        depends_on_node_id as depends_on_node_id\n    from model_dependencies_with_total_node_runtime\n\n),\n\nsearch_path (node_ids, total_time\n)\n\nas (\n    -- The recursive part\n    -- This CTE creates an array of node_ids and total_time for every possible path through the DAG\n    -- Starting with the tips of the tree, work backwards through every path until there's a '' depends_on_node_id\n\n    select\n        array_construct(depends_on_node_id, node_id),\n        total_node_runtime\n    from anchor\n    union all\n    select\n        array_cat(to_array(all_needed_dependencies.depends_on_node_id), search_path.node_ids) as node_ids,\n        coalesce(all_needed_dependencies.total_node_runtime, 0) + search_path.total_time\n    from search_path\n    left join all_needed_dependencies\n    where get(search_path.node_ids, 0) = all_needed_dependencies.node_id\n\n),\n\nlongest_path_node_ids as (\n    -- Find the path with the longest total time\n\n    select\n        -- Remove any empty strings from the beginning of the array that were introduced in search_path to prevent infinite recursion\n        case\n            when get(node_ids, 0) = ''\n                -- Ensure we keep the last element of the array by using array_size for the last index\n                then array_slice(node_ids, 1, array_size(node_ids))\n            else node_ids\n        end as node_ids,\n        total_time\n    from search_path\n    order by total_time desc\n    limit 1\n\n),\n\nflattened as (\n    -- Flatten the array of node_ids and keep the index\n\n    select\n        value as node_id,\n        index\n    from longest_path_node_ids,\n        lateral flatten(input => node_ids)\n\n),\n\nlongest_path_with_times as (\n    -- Join the indidivual model execution times back in along with the materializations\n\n    select\n        flattened.node_id::string as node_id,\n        flattened.index,\n        latest_executions.total_node_runtime / 60 as execution_minutes,\n        latest_models.model_materialization\n    from flattened\n    left join latest_executions on flattened.node_id = latest_executions.node_id\n    left join latest_models on flattened.node_id = latest_models.node_id\n\n)\n\nselect * from longest_path_with_times", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "fct_dbt__critical_path.sql", "original_file_path": "models/fct_dbt__critical_path.sql", "name": "fct_dbt__critical_path", "alias": "fct_dbt__critical_path", "checksum": {"name": "sha256", "checksum": "7e6136c2127b41d543b9ee1c8fe11c28c4bc6fbc7ef51a640175c81e5f43a8b0"}, "tags": [], "refs": [["dim_dbt__models"], ["dim_dbt__models"], ["dim_dbt__models"], ["fct_dbt__latest_full_model_executions"], ["fct_dbt__latest_full_model_executions"], ["fct_dbt__latest_full_model_executions"]], "sources": [], "metrics": [], "description": "A table of models and executions times that make up the critical path of a full, incremental run.", "columns": {"node_id": {"name": "node_id", "description": "Primary key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the model in the critical path. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_minutes": {"name": "execution_minutes", "description": "The duration of time in minutes for the model to run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.01538, "config_call_dict": {}}], "model.dbt_artifacts.fct_dbt__latest_full_model_executions": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "fct_dbt__latest_full_model_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__latest_full_model_executions", "raw_code": "with run_results as (\n\n    select *\n    from {{ ref('fct_dbt__run_results') }}\n\n),\n\nmodel_executions as (\n\n    select *\n    from {{ ref('fct_dbt__model_executions') }}\n\n),\n\nmodel_execution_counts as (\n\n    select\n        artifact_run_id,\n        count(*) as executed_models\n    from model_executions\n    group by artifact_run_id\n\n),\n\nlatest_full as (\n\n    select run_results.*\n    from run_results\n    inner join model_execution_counts on\n        run_results.artifact_run_id = model_execution_counts.artifact_run_id\n    where run_results.execution_command in ('run', 'build')\n        and run_results.selected_models is null\n        and run_results.was_full_refresh = false\n        and model_execution_counts.executed_models >= 1\n    order by run_results.artifact_generated_at desc\n    limit 1\n\n),\n\njoined as (\n\n    select\n        model_executions.*\n    from latest_full\n    left join model_executions on\n        model_executions.artifact_run_id = latest_full.artifact_run_id\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        model_execution_id,\n        model_materialization,\n        model_schema,\n        name,\n        node_id,\n        thread_id,\n        rows_affected,\n        status,\n        was_full_refresh\n    from joined\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "fct_dbt__latest_full_model_executions.sql", "original_file_path": "models/fct_dbt__latest_full_model_executions.sql", "name": "fct_dbt__latest_full_model_executions", "alias": "fct_dbt__latest_full_model_executions", "checksum": {"name": "sha256", "checksum": "69220686a3f674a35e245076da69eb04638f17e0f4b952a100fdf6a42fa9af91"}, "tags": [], "refs": [["fct_dbt__run_results"], ["fct_dbt__run_results"], ["fct_dbt__run_results"], ["fct_dbt__model_executions"], ["fct_dbt__model_executions"], ["fct_dbt__model_executions"]], "sources": [], "metrics": [], "description": "A list of all models and executions times from the most recent, incremental run.", "columns": {"node_id": {"name": "node_id", "description": "Primary key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "Foreign key to fct_dbt_run_results. The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp of when a model starts to be compiled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp of when a model's SQL is completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "The duration of time in seconds for the model to run. Note that this is _not_ equal to the delta between `compile_started_at` and `query_completed_at` since it includes extra tasks performed by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "A surrogate key of command_invocation_id and node_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_schema": {"name": "model_schema", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The model name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "The number of rows affected by the model's execution. Always 1 for non-incremental executions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Success/fail status of the model's execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean value for whether this model was executed with a --full-refresh flag.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0261672, "config_call_dict": {}}], "model.dbt_artifacts.dim_dbt__sources": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "manifest_source_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__sources"], "unique_id": "model.dbt_artifacts.dim_dbt__sources", "raw_code": "{{ config( materialized='incremental', unique_key='manifest_source_id' ) }}\n\nwith dbt_nodes as (\n\n    select * from {{ ref('stg_dbt__nodes') }}\n\n),\n\ndbt_sources_incremental as (\n\n    select *\n    from dbt_nodes\n    where resource_type = 'source'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_node_id as manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        node_id,\n        node_database,\n        node_description,\n        name,\n        node_json:source_name::string as source_name,\n        node_json:loader::string as source_loader,\n        node_schema as source_schema,\n        node_json:package_name::string as package_name,\n        node_json:relation_name::string as relation_name,\n        node_json:path::string as source_path\n    from dbt_sources_incremental\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__sources.sql", "original_file_path": "models/incremental/dim_dbt__sources.sql", "name": "dim_dbt__sources", "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "f6a0e101018a99b10904d266556c699e389f8e4d54e5646ad99e7a9e61f21168"}, "tags": [], "refs": [["stg_dbt__nodes"], ["stg_dbt__nodes"], ["stg_dbt__nodes"]], "sources": [], "metrics": [], "description": "All dbt source metadata from every manifest.json.", "columns": {"manifest_source_id": {"name": "manifest_source_id", "description": "Primary key generated from the command_invocation_id and checksum.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_database": {"name": "node_database", "description": "The database of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_description": {"name": "node_description", "description": "The description of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The source node name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "The name of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_loader": {"name": "source_loader", "description": "The loader of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_schema": {"name": "source_schema", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Package source is defined in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relation_name": {"name": "relation_name", "description": "Name of the database entity this source resolved to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_path": {"name": "source_path", "description": "Filepath of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_source_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0539393, "config_call_dict": {"materialized": "incremental", "unique_key": "manifest_source_id"}}], "model.dbt_artifacts.dim_dbt__seeds": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "manifest_seed_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__seeds"], "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "raw_code": "{{ config( materialized='incremental', unique_key='manifest_seed_id' ) }}\n\nwith dbt_nodes as (\n\n    select * from {{ ref('stg_dbt__nodes') }}\n\n),\n\ndbt_seeds_incremental as (\n\n    select *\n    from dbt_nodes\n    where resource_type = 'seed'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_node_id as manifest_seed_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        node_id,\n        node_database as seed_database,\n        node_schema as seed_schema,\n        name,\n        to_array(node_json:depends_on:nodes) as depends_on_nodes,\n        node_json:package_name::string as package_name,\n        node_json:path::string as seed_path,\n        node_json:checksum.checksum::string as checksum\n    from dbt_seeds_incremental\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__seeds.sql", "original_file_path": "models/incremental/dim_dbt__seeds.sql", "name": "dim_dbt__seeds", "alias": "dim_dbt__seeds", "checksum": {"name": "sha256", "checksum": "1c4ff8620db102c346cac382a555eb48bf18572578c3eb064d8f3b7905683ddf"}, "tags": [], "refs": [["stg_dbt__nodes"], ["stg_dbt__nodes"], ["stg_dbt__nodes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_seed_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.4374073, "config_call_dict": {"materialized": "incremental", "unique_key": "manifest_seed_id"}}], "model.dbt_artifacts.dim_dbt__snapshots": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "manifest_snapshot_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__snapshots"], "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "raw_code": "{{ config( materialized='incremental', unique_key='manifest_snapshot_id' ) }}\n\nwith dbt_nodes as (\n\n    select * from {{ ref('stg_dbt__nodes') }}\n\n),\n\ndbt_snapshots_incremental as (\n\n    select *\n    from dbt_nodes\n    where resource_type = 'snapshot'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_node_id as manifest_snapshot_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        node_id,\n        node_database as snapshot_database,\n        node_schema as snapshot_schema,\n        name,\n        to_array(node_json:depends_on:nodes) as depends_on_nodes,\n        node_json:package_name::string as package_name,\n        node_json:path::string as snapshot_path,\n        node_json:checksum.checksum::string as checksum\n    from dbt_snapshots_incremental\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__snapshots.sql", "original_file_path": "models/incremental/dim_dbt__snapshots.sql", "name": "dim_dbt__snapshots", "alias": "dim_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "dfd70a6ad2ffde3d4dcfb84f22dd4eabaea4818b454d3349573ab328fb98c9fa"}, "tags": [], "refs": [["stg_dbt__nodes"], ["stg_dbt__nodes"], ["stg_dbt__nodes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_snapshot_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.4463193, "config_call_dict": {"materialized": "incremental", "unique_key": "manifest_snapshot_id"}}], "model.dbt_artifacts.fct_dbt__seed_executions": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "seed_execution_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__seed_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "raw_code": "{{ config( materialized='incremental', unique_key='seed_execution_id' ) }}\n\nwith seeds as (\n\n    select *\n    from {{ ref('dim_dbt__seeds') }}\n\n),\n\nnode_executions as (\n\n    select *\n    from {{ ref('stg_dbt__node_executions') }}\n\n),\n\nseed_executions_incremental as (\n\n    select *\n    from node_executions\n    where resource_type = 'seed'\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nseed_executions_with_materialization as (\n\n    select\n        seed_executions_incremental.*,\n        seeds.seed_schema,\n        seeds.name\n    from seed_executions_incremental\n    left join seeds on\n        seed_executions_incremental.artifact_run_id = seeds.artifact_run_id\n        and seed_executions_incremental.node_id = seeds.node_id\n\n),\n\nfields as (\n\n    select\n        node_execution_id as seed_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        seed_schema,\n        name\n    from seed_executions_with_materialization\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__seed_executions.sql", "original_file_path": "models/incremental/fct_dbt__seed_executions.sql", "name": "fct_dbt__seed_executions", "alias": "fct_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "4e0e8081135c6fc2621c67209904dea1e6712c4f001b937feb323c7d9b296ab2"}, "tags": [], "refs": [["dim_dbt__seeds"], ["dim_dbt__seeds"], ["dim_dbt__seeds"], ["stg_dbt__node_executions"], ["stg_dbt__node_executions"], ["stg_dbt__node_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "seed_execution_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.454958, "config_call_dict": {"materialized": "incremental", "unique_key": "seed_execution_id"}}], "model.dbt_artifacts.dim_dbt__tests": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "manifest_test_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__tests"], "unique_id": "model.dbt_artifacts.dim_dbt__tests", "raw_code": "{{ config( materialized='incremental', unique_key='manifest_test_id' ) }}\n\nwith dbt_nodes as (\n\n    select * from {{ ref('stg_dbt__nodes') }}\n\n),\n\ndbt_tests_incremental as (\n\n    select *\n    from dbt_nodes\n    where resource_type = 'test'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_node_id as manifest_test_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        to_array(node_json:depends_on:nodes) as depends_on_nodes,\n        node_json:package_name::string as package_name,\n        node_json:path::string as test_path\n    from dbt_tests_incremental\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__tests.sql", "original_file_path": "models/incremental/dim_dbt__tests.sql", "name": "dim_dbt__tests", "alias": "dim_dbt__tests", "checksum": {"name": "sha256", "checksum": "3b16c58865dff93dc14d1662887dffa3602f95721e306145a052bf293c590cfd"}, "tags": [], "refs": [["stg_dbt__nodes"], ["stg_dbt__nodes"], ["stg_dbt__nodes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_test_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.4643161, "config_call_dict": {"materialized": "incremental", "unique_key": "manifest_test_id"}}], "model.dbt_artifacts.fct_dbt__test_executions": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "test_execution_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__test_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "raw_code": "{{ config( materialized='incremental', unique_key='test_execution_id' ) }}\n\nwith node_executions as (\n\n    select *\n    from {{ ref('stg_dbt__node_executions') }}\n\n),\n\ntest_executions_incremental as (\n\n    select *\n    from node_executions\n    where resource_type = 'test'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        node_execution_id as test_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from test_executions_incremental\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__test_executions.sql", "original_file_path": "models/incremental/fct_dbt__test_executions.sql", "name": "fct_dbt__test_executions", "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "ae136a83ec1e0876577afa12052f80b05de16681cf295840aab549be720a8c77"}, "tags": [], "refs": [["stg_dbt__node_executions"], ["stg_dbt__node_executions"], ["stg_dbt__node_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "test_execution_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.4739392, "config_call_dict": {"materialized": "incremental", "unique_key": "test_execution_id"}}], "model.dbt_artifacts.dim_dbt__models": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "manifest_model_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__models"], "unique_id": "model.dbt_artifacts.dim_dbt__models", "raw_code": "{{ config( materialized='incremental', unique_key='manifest_model_id' ) }}\n\nwith dbt_nodes as (\n\n    select * from {{ ref('stg_dbt__nodes') }}\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_nodes\n    where resource_type = 'model'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_node_id as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        node_id,\n        node_database as model_database,\n        node_schema as model_schema,\n        name,\n        to_array(node_json:depends_on:nodes) as depends_on_nodes,\n        node_json:package_name::string as package_name,\n        node_json:path::string as model_path,\n        node_json:checksum.checksum::string as checksum,\n        node_json:config.materialized::string as model_materialization\n    from dbt_models_incremental\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__models.sql", "original_file_path": "models/incremental/dim_dbt__models.sql", "name": "dim_dbt__models", "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "4049918573324bdc2a0b2795ba3b45cdcd00a65519ab9e8a523e7fc9ab904396"}, "tags": [], "refs": [["stg_dbt__nodes"], ["stg_dbt__nodes"], ["stg_dbt__nodes"]], "sources": [], "metrics": [], "description": "All dbt model metadata from every manifest.json.", "columns": {"manifest_model_id": {"name": "manifest_model_id", "description": "Primary key generated from the command_invocation_id and checksum.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The model name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_schema": {"name": "model_schema", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "List of node ids the model depends on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_path": {"name": "model_path", "description": "Filepath of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Unique identifier for the model. If a model is unchanged between separate executions this will remain the same.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_model_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0479488, "config_call_dict": {"materialized": "incremental", "unique_key": "manifest_model_id"}}], "model.dbt_artifacts.dim_dbt__exposures": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "manifest_exposure_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__exposures"], "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "raw_code": "{{\n  config(\n    materialized='incremental',\n    unique_key='manifest_exposure_id'\n    )\n}}\n\nwith dbt_nodes as (\n\n    select * from {{ ref('stg_dbt__nodes') }}\n\n),\n\ndbt_exposures_incremental as (\n\n    select *\n    from dbt_nodes\n    where resource_type = 'exposure'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        t.manifest_node_id as manifest_exposure_id,\n        t.command_invocation_id,\n        t.dbt_cloud_run_id,\n        t.artifact_run_id,\n        t.artifact_generated_at,\n        t.node_id,\n        t.name,\n        t.node_json:type::string as type,\n        t.node_json:owner:name::string as owner,\n        t.node_json:maturity::string as maturity,\n        f.value::string as output_feeds,\n        t.node_json:package_name::string as package_name\n    from dbt_exposures_incremental as t,\n        lateral flatten(input => to_array(t.node_json:depends_on:nodes)) as f\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__exposures.sql", "original_file_path": "models/incremental/dim_dbt__exposures.sql", "name": "dim_dbt__exposures", "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "911772c2cb7b0c959edf48b91cca399fc5f18f0a3c3390612d0e46530ed14ffe"}, "tags": [], "refs": [["stg_dbt__nodes"], ["stg_dbt__nodes"], ["stg_dbt__nodes"]], "sources": [], "metrics": [], "description": "All dbt exposures metadata from every manifest.json.", "columns": {"manifest_exposure_id": {"name": "manifest_exposure_id", "description": "Primary key generated from the command_invocation_id and checksum. Note,\nthis is not unique for a given exposure.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "User-defined type of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "User-defined owner of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_feeds": {"name": "output_feeds", "description": "Models exposed in the exposure, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Source package in which each feed of an exposure was defined.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_exposure_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0425715, "config_call_dict": {"materialized": "incremental", "unique_key": "manifest_exposure_id"}}], "model.dbt_artifacts.int_dbt__model_executions": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "model_execution_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "int_dbt__model_executions"], "unique_id": "model.dbt_artifacts.int_dbt__model_executions", "raw_code": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith node_executions as (\n\n    select *\n    from {{ ref('stg_dbt__node_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from node_executions\n    where resource_type = 'model'\n\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nfields as (\n\n    select\n        node_execution_id as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/int_dbt__model_executions.sql", "original_file_path": "models/incremental/int_dbt__model_executions.sql", "name": "int_dbt__model_executions", "alias": "int_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "a9bc7afd039e804d187c423deaa2df814da9f9ca12eac72e621a320189926781"}, "tags": [], "refs": [["stg_dbt__node_executions"], ["stg_dbt__node_executions"], ["stg_dbt__node_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "model_execution_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.5009646, "config_call_dict": {"materialized": "incremental", "unique_key": "model_execution_id"}}], "model.dbt_artifacts.fct_dbt__model_executions": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "model_execution_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__model_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "raw_code": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith models as (\n\n    select *\n    from {{ ref('dim_dbt__models') }}\n\n),\n\nmodel_executions as (\n\n    select *\n    from {{ ref('int_dbt__model_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    {% if is_incremental() %}\n        -- this filter will only be applied on an incremental run\n        where coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n    {% endif %}\n\n),\n\nmodel_executions_with_materialization as (\n\n    select\n        model_executions_incremental.*,\n        models.model_materialization,\n        models.model_schema,\n        models.name\n    from model_executions_incremental\n    left join models on\n        model_executions_incremental.artifact_run_id = models.artifact_run_id\n        and model_executions_incremental.node_id = models.node_id\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        model_materialization,\n        model_schema,\n        name\n    from model_executions_with_materialization\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__model_executions.sql", "original_file_path": "models/incremental/fct_dbt__model_executions.sql", "name": "fct_dbt__model_executions", "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "4f11a1dee7cb4bce456314f070c5434efa16e7ddf1e50de4b3ef78f6bd8871c1"}, "tags": [], "refs": [["dim_dbt__models"], ["dim_dbt__models"], ["dim_dbt__models"], ["int_dbt__model_executions"], ["int_dbt__model_executions"], ["int_dbt__model_executions"]], "sources": [], "metrics": [], "description": "All historic dbt model executions.", "columns": {"model_execution_id": {"name": "model_execution_id", "description": "Primary key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_schema": {"name": "model_schema", "description": "The schema containing the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean value for whether this model was executed with a --full-refresh flag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "The configured materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp of when a model starts to be compiled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp of when a model's SQL is completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "The duration of time in seconds for the model to run. Note that this is _not_ equal to the delta between `compile_started_at` and `query_completed_at` since it includes extra tasks performed by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Success/fail status of the model's execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "Foreign key to fct_dbt_run_results. The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "The number of rows affected by the model's execution. Always 1 for non-incremental executions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "model_execution_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0332258, "config_call_dict": {"materialized": "incremental", "unique_key": "model_execution_id"}}], "model.dbt_artifacts.fct_dbt__run_results": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_utils.get_column_values", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "command_invocation_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__run_results"], "unique_id": "model.dbt_artifacts.fct_dbt__run_results", "raw_code": "{{ config( materialized='incremental', unique_key='command_invocation_id' ) }}\n\n{% set env_keys = dbt_utils.get_column_values(table=ref('stg_dbt__run_results_env_keys'), column='key', default=[]) %}\n\nwith run_results as (\n\n    select *\n    from {{ ref('stg_dbt__run_results') }}\n\n),\n\nincremental_run_results as (\n\n    select *\n    from run_results\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        dbt_version,\n        elapsed_time,\n        execution_command,\n        selected_models,\n        target,\n        was_full_refresh\n\n        {% if env_keys %}\n        -- Environment keys are sorted for determinism.\n        {% for key in env_keys|sort %}\n        ,env:{{ key }} as env_{{ key }}\n        {% endfor %}\n        {% endif %}\n    from incremental_run_results\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__run_results.sql", "original_file_path": "models/incremental/fct_dbt__run_results.sql", "name": "fct_dbt__run_results", "alias": "fct_dbt__run_results", "checksum": {"name": "sha256", "checksum": "dc792ae07e76d545f8d3af6e7fa831d9a06cb614bf88537ca4e1b1a36ae54422"}, "tags": [], "refs": [["stg_dbt__run_results_env_keys"], ["stg_dbt__run_results_env_keys"], ["stg_dbt__run_results_env_keys"], ["stg_dbt__run_results"], ["stg_dbt__run_results"], ["stg_dbt__run_results"]], "sources": [], "metrics": [], "description": "Metadata for dbt run commands. This model is also the point of reference for others in the build process to enforce consistency. Most other models depend on this one to dictate which results have been received. By having this model upstream of the others it is forced to go first and therefore anything picked up by it, can then safely be assumed to exist in the downstream models. Anything which arrives after the materialisation of this model is prevented from appearing in the others using an inner join within the definition of all of them to prevent them showing any facts which arrive during a rebuild.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "The version of dbt used to generate the source artifact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "elapsed_time": {"name": "elapsed_time", "description": "The total run time of the command.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_command": {"name": "execution_command", "description": "The actual command used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "selected_models": {"name": "selected_models", "description": "A list of model selectors used in the command.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target": {"name": "target", "description": "The configured target for the command.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Was the run executed with a --full-refresh flag?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_*": {"name": "env_*", "description": "Columns for the environment variables set when the command was executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "command_invocation_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235799.0375793, "config_call_dict": {"materialized": "incremental", "unique_key": "command_invocation_id"}}], "model.dbt_artifacts.fct_dbt__snapshot_executions": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt.is_incremental", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "snapshot_execution_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__snapshot_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "raw_code": "{{ config( materialized='incremental', unique_key='snapshot_execution_id' ) }}\n\nwith snapshots as (\n\n    select *\n    from {{ ref('dim_dbt__snapshots') }}\n\n),\n\nnode_executions as (\n\n    select *\n    from {{ ref('stg_dbt__node_executions') }}\n\n),\n\nsnapshot_executions_incremental as (\n\n    select *\n    from node_executions\n    where resource_type = 'snapshot'\n        {% if is_incremental() %}\n            -- this filter will only be applied on an incremental run\n            and coalesce(artifact_generated_at > (select max(artifact_generated_at) from {{ this }}), true)\n        {% endif %}\n\n),\n\nsnapshot_executions_with_materialization as (\n\n    select\n        snapshot_executions_incremental.*,\n        snapshots.snapshot_schema,\n        snapshots.name\n    from snapshot_executions_incremental\n    left join snapshots on\n        snapshot_executions_incremental.artifact_run_id = snapshots.artifact_run_id\n        and snapshot_executions_incremental.node_id = snapshots.node_id\n\n),\n\nfields as (\n\n    select\n        node_execution_id as snapshot_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        snapshot_schema,\n        name\n    from snapshot_executions_with_materialization\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__snapshot_executions.sql", "original_file_path": "models/incremental/fct_dbt__snapshot_executions.sql", "name": "fct_dbt__snapshot_executions", "alias": "fct_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "c410f9ad568bf8d9bf0c40026e6da55195efb8c97ac04137b17b22c8cb7e4113"}, "tags": [], "refs": [["dim_dbt__snapshots"], ["dim_dbt__snapshots"], ["dim_dbt__snapshots"], ["stg_dbt__node_executions"], ["stg_dbt__node_executions"], ["stg_dbt__node_executions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "snapshot_execution_id", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.6224003, "config_call_dict": {"materialized": "incremental", "unique_key": "snapshot_execution_id"}}], "model.dbt_artifacts.stg_dbt__run_results": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__run_results"], "unique_id": "model.dbt_artifacts.stg_dbt__run_results", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nbase_v2 as (\n\n    select *\n    from {{ source('dbt_artifacts', 'dbt_run_results') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\nfields as (\n\n    -- V1\n    select\n        generated_at::timestamp_tz as artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        data:metadata:dbt_version::string as dbt_version,\n        data:metadata:env as env,\n        data:elapsed_time::float as elapsed_time,\n        data:args:which::string as execution_command,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        coalesce(data:args:models, data:args:select) as selected_models,\n        data:args:target::string as target\n    from run_results\n\n    union all\n\n    -- V2\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        dbt_version,\n        env,\n        elapsed_time,\n        execution_command,\n        was_full_refresh,\n        selected_models,\n        target\n    from base_v2\n\n)\n\nselect * from fields", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__run_results.sql", "original_file_path": "models/staging/stg_dbt__run_results.sql", "name": "stg_dbt__run_results", "alias": "stg_dbt__run_results", "checksum": {"name": "sha256", "checksum": "eef0a2afbe25633caa2ccb27463e49f405e1cecb614444be74674732f0c05373"}, "tags": [], "refs": [["stg_dbt__artifacts"], ["stg_dbt__artifacts"], ["stg_dbt__artifacts"]], "sources": [["dbt_artifacts", "dbt_run_results"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.6320655, "config_call_dict": {}}], "model.dbt_artifacts.stg_dbt__nodes": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_artifacts.flatten_manifest", "macro.dbt_utils.surrogate_key", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__nodes"], "unique_id": "model.dbt_artifacts.stg_dbt__nodes", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nbase_v2 as (\n\n    select *\n    from {{ source('dbt_artifacts', 'dbt_manifest_nodes') }}\n\n),\n\nmanifests_v1 as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflattened_v1 as (\n\n    {{ flatten_manifest(\"manifests_v1\") }}\n\n),\n\ndeduped_v1 as (\n\n    select *\n    from flattened_v1\n    -- Deduplicate the V1 issue of potential multiple manifest files.\n    -- This is a very likely occurance if using dbt-cloud as each artifact upload\n    -- will generate a new manifest.\n    qualify row_number() over (partition by artifact_run_id, node_id order by artifact_generated_at asc) = 1\n\n),\n\nunioned as (\n\n    -- V1 uploads\n    select * from deduped_v1\n\n    union all\n\n    -- V2 uploads\n    -- NB: We can safely select * because we know the schemas are the same\n    -- as they're made by the same macro.\n    select * from base_v2\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as manifest_node_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_run_id,\n        artifact_generated_at,\n        node_id,\n        resource_type,\n        node_database,\n        node_schema,\n        node_json:description::string as node_description,\n        name,\n        node_json\n    from unioned\n\n)\n\nselect * from surrogate_key", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__nodes.sql", "original_file_path": "models/staging/stg_dbt__nodes.sql", "name": "stg_dbt__nodes", "alias": "stg_dbt__nodes", "checksum": {"name": "sha256", "checksum": "bbaa27fc12d2852ff10ae7eb9408fc98283be9825118cb161b6d593cdca5f6fe"}, "tags": [], "refs": [["stg_dbt__artifacts"], ["stg_dbt__artifacts"], ["stg_dbt__artifacts"]], "sources": [["dbt_artifacts", "dbt_manifest_nodes"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.6406605, "config_call_dict": {}}], "model.dbt_artifacts.stg_dbt__artifacts": [{"resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.make_artifact_run_id", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__artifacts"], "unique_id": "model.dbt_artifacts.stg_dbt__artifacts", "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'artifacts') }}\n\n),\n\nfields as (\n\n    select\n        data:metadata:invocation_id::string as command_invocation_id,\n        data:metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from base\n\n),\n\nartifacts as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        {{ make_artifact_run_id() }} as artifact_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from fields\n\n)\n\nselect * from artifacts", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__artifacts.sql", "original_file_path": "models/staging/stg_dbt__artifacts.sql", "name": "stg_dbt__artifacts", "alias": "stg_dbt__artifacts", "checksum": {"name": "sha256", "checksum": "ffe3e2130640392537f1ffdae9dc10113cad84307a297b1087d07f6ad0a39f49"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "artifacts"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.6523097, "config_call_dict": {}}], "model.dbt_artifacts.stg_dbt__run_results_env_keys": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__run_results_env_keys"], "unique_id": "model.dbt_artifacts.stg_dbt__run_results_env_keys", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__run_results') }}\n\n),\n\ndbt_run as (\n\n    select *\n    from base\n    where execution_command = 'run'\n\n),\n\nenv_keys as (\n\n    select distinct env_key.key\n    from dbt_run,\n        lateral flatten(input => env) as env_key\n    -- Sort results to ensure things are deterministic\n    order by 1\n\n)\n\nselect * from env_keys", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__run_results_env_keys.sql", "original_file_path": "models/staging/stg_dbt__run_results_env_keys.sql", "name": "stg_dbt__run_results_env_keys", "alias": "stg_dbt__run_results_env_keys", "checksum": {"name": "sha256", "checksum": "231f27ddc1a2a5169f26ba7d2192ea3732049aad66fc4529438fcb5eb4f9db4a"}, "tags": [], "refs": [["stg_dbt__run_results"], ["stg_dbt__run_results"], ["stg_dbt__run_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.6626158, "config_call_dict": {}}], "model.dbt_artifacts.stg_dbt__node_executions": [{"resource_type": "model", "depends_on": {"macros": ["macro.balboa.ref", "macro.dbt_artifacts.flatten_results", "macro.dbt_utils.surrogate_key", "macro.dbt_snow_mask.apply_masking_policy"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "inlet_dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": "true", "copy_grants": true, "post-hook": [{"sql": "{{ dbt_snow_mask.apply_masking_policy() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "BALBOA", "schema": "inlet_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__node_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__node_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nbase_nodes as (\n\n    select *\n    from {{ ref('stg_dbt__nodes') }}\n\n),\n\nbase_v2 as (\n\n    select *\n    from {{ source('dbt_artifacts', 'dbt_run_results_nodes') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\nfields as (\n\n    -- V1 uploads\n    {{ flatten_results(\"run_results\") }}\n\n    union all\n\n    -- V2 uploads\n    -- NB: We can safely select * because we know the schemas are the same\n    -- as they're made by the same macro.\n    select * from base_v2\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['fields.command_invocation_id', 'fields.node_id']) }} as node_execution_id,\n        fields.command_invocation_id,\n        fields.dbt_cloud_run_id,\n        fields.artifact_run_id,\n        fields.artifact_generated_at,\n        fields.was_full_refresh,\n        fields.node_id,\n        base_nodes.resource_type,\n        split(fields.result_json:thread_id::string, '-')[1]::integer as thread_id,\n        fields.status,\n        fields.result_json:message::string as message,\n        fields.compile_started_at,\n        fields.query_completed_at,\n        fields.total_node_runtime,\n        fields.result_json:adapter_response:rows_affected::int as rows_affected,\n        fields.result_json\n    from fields\n    -- Inner join so that we only represent results for nodes which definitely have a manifest\n    -- and visa versa.\n    inner join base_nodes on (\n        fields.artifact_run_id = base_nodes.artifact_run_id\n        and fields.node_id = base_nodes.node_id)\n\n)\n\nselect * from surrogate_key", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/github/workspace/transform/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__node_executions.sql", "original_file_path": "models/staging/stg_dbt__node_executions.sql", "name": "stg_dbt__node_executions", "alias": "stg_dbt__node_executions", "checksum": {"name": "sha256", "checksum": "3154dbc7a2c19216bc61b0a295521dde3704ca835fef421e900a116cf995e600"}, "tags": [], "refs": [["stg_dbt__artifacts"], ["stg_dbt__artifacts"], ["stg_dbt__artifacts"], ["stg_dbt__nodes"], ["stg_dbt__nodes"], ["stg_dbt__nodes"]], "sources": [["dbt_artifacts", "dbt_run_results_nodes"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ dbt_snow_mask.apply_masking_policy() }}"], "transient": "{{ 'false' if target.name == 'prod' else 'true' }}", "copy_grants": true, "enabled": "{{ true if target.name == 'prod' else false }}", "schema": "inlet_dbt_artifacts"}, "created_at": 1669235798.670556, "config_call_dict": {}}]}, "parent_map": {"model.balboa.base_cases": ["source.balboa.starschema_covid19.jhu_covid_19"], "model.balboa.total_covid_cases": ["model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases"], "model.balboa.covid_location": ["model.balboa.jhu_covid_19", "model.balboa.jhu_covid_19", "model.balboa.jhu_covid_19"], "model.balboa.dim_test__ng_test": ["model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases", "model.balboa.base_cases"], "model.balboa.credits_total": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"], "model.balboa.credits_by_warehouse": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"], "model.balboa.storage_usage_m": ["model.balboa.int_storage_usage", "model.balboa.int_storage_usage", "model.balboa.int_storage_usage"], "model.balboa.credits_variance": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"], "model.balboa.query_utilization": ["model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history"], "model.balboa.credits_mtd": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"], "model.balboa.credits_by_month": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"], "model.balboa.int_query_history": ["model.balboa.query_history", "model.balboa.query_history", "model.balboa.query_history"], "model.balboa.int_storage_usage": ["model.balboa.storage_usage", "model.balboa.storage_usage", "model.balboa.storage_usage"], "model.balboa.int_pipe_usage_history": ["model.balboa.pipe_usage_history", "model.balboa.pipe_usage_history", "model.balboa.pipe_usage_history"], "model.balboa.int_warehouse_metering_history": ["model.balboa.warehouse_metering_history", "model.balboa.warehouse_metering_history", "model.balboa.warehouse_metering_history"], "model.balboa.current_population": ["model.balboa._airbyte_raw_country_populations", "model.balboa._airbyte_raw_country_populations", "model.balboa._airbyte_raw_country_populations"], "model.balboa.covid_cases_country": ["model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases"], "model.balboa.covid_cases_county": ["model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases"], "model.balboa.agg_cases_by_month": ["metric.balboa.sum_cases", "model.metrics.dbt_metrics_default_calendar", "model.metrics.dbt_metrics_default_calendar", "model.metrics.dbt_metrics_default_calendar"], "model.balboa.covid_cases_state": ["model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases"], "model.balboa.jhu_covid_19": ["source.balboa.starschema_covid19.jhu_covid_19"], "model.balboa._airbyte_raw_personal_loans": ["source.balboa.loans._airbyte_raw_personal_loans"], "model.balboa.warehouse_metering_history": ["source.balboa.account_usage.warehouse_metering_history"], "model.balboa.query_history": ["source.balboa.account_usage.query_history"], "model.balboa.pipe_usage_history": ["source.balboa.account_usage.pipe_usage_history"], "model.balboa.storage_usage": ["source.balboa.account_usage.storage_usage"], "model.balboa._airbyte_raw_country_populations": ["source.balboa.raw._airbyte_raw_country_populations"], "snapshot.balboa.snp_jhu_dashboard_covid_19_global": ["source.balboa.starschema_covid19.jhu_dashboard_covid_19_global"], "seed.balboa.state_codes": [], "seed.balboa.covid_cases_expected_values": [], "model.metrics.dbt_metrics_default_calendar": [], "test.balboa.not_null_base_cases_cases.a7292b3eca": ["model.balboa.base_cases"], "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": [], "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": [], "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": [], "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": [], "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": [], "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": [], "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": [], "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": [], "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_exposure_id.368be81b8d": [], "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_exposure_id_output_feeds.9ff988c63a": [], "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": [], "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": [], "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": [], "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": [], "test.dbt_artifacts.unique_dim_dbt__current_models_manifest_model_id.bbc3c5dbea": [], "test.dbt_artifacts.not_null_dim_dbt__current_models_manifest_model_id.95b21ba2fb": [], "source.balboa.starschema_covid19.jhu_dashboard_covid_19_global": [], "source.balboa.starschema_covid19.jhu_covid_19": [], "source.balboa.loans._airbyte_raw_personal_loans": [], "source.balboa.account_usage.query_history": [], "source.balboa.account_usage.storage_usage": [], "source.balboa.account_usage.pipe_usage_history": [], "source.balboa.account_usage.warehouse_metering_history": [], "source.balboa.raw._airbyte_raw_country_populations": [], "source.balboa.lineage.lineage_processing": [], "source.dbt_artifacts.dbt_artifacts.artifacts": [], "source.dbt_artifacts.dbt_artifacts.dbt_run_results": [], "source.dbt_artifacts.dbt_artifacts.dbt_run_results_nodes": [], "source.dbt_artifacts.dbt_artifacts.dbt_manifest_nodes": [], "exposure.balboa.customer_loans": ["model.balboa._airbyte_raw_personal_loans", "model.balboa.current_population"], "metric.balboa.sum_funded_amount": ["model.balboa._airbyte_raw_personal_loans"], "metric.balboa.sum_cases": ["model.balboa.covid_cases_state"], "metric.balboa.sum_deaths": ["model.balboa.covid_cases_state"], "metric.balboa.average_cases": ["model.balboa.covid_cases_state"], "metric.balboa.average_deaths": ["model.balboa.covid_cases_state"]}, "child_map": {"model.balboa.base_cases": ["model.balboa.dim_test__ng_test", "model.balboa.dim_test__ng_test", "model.balboa.dim_test__ng_test", "model.balboa.dim_test__ng_test", "model.balboa.dim_test__ng_test", "model.balboa.dim_test__ng_test", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "model.balboa.total_covid_cases", "test.balboa.not_null_base_cases_cases.a7292b3eca"], "model.balboa.total_covid_cases": ["model.balboa.covid_cases_country", "model.balboa.covid_cases_country", "model.balboa.covid_cases_country", "model.balboa.covid_cases_county", "model.balboa.covid_cases_county", "model.balboa.covid_cases_county", "model.balboa.covid_cases_state", "model.balboa.covid_cases_state", "model.balboa.covid_cases_state"], "model.balboa.covid_location": ["model.balboa.covid_cases_country", "model.balboa.covid_cases_country", "model.balboa.covid_cases_country", "model.balboa.covid_cases_county", "model.balboa.covid_cases_county", "model.balboa.covid_cases_county", "model.balboa.covid_cases_state", "model.balboa.covid_cases_state", "model.balboa.covid_cases_state"], "model.balboa.dim_test__ng_test": [], "model.balboa.credits_total": [], "model.balboa.credits_by_warehouse": [], "model.balboa.storage_usage_m": [], "model.balboa.credits_variance": [], "model.balboa.query_utilization": [], "model.balboa.credits_mtd": [], "model.balboa.credits_by_month": [], "model.balboa.int_query_history": ["model.balboa.query_utilization", "model.balboa.query_utilization", "model.balboa.query_utilization", "model.balboa.query_utilization", "model.balboa.query_utilization", "model.balboa.query_utilization", "model.balboa.query_utilization", "model.balboa.query_utilization", "model.balboa.query_utilization"], "model.balboa.int_storage_usage": ["model.balboa.storage_usage_m", "model.balboa.storage_usage_m", "model.balboa.storage_usage_m"], "model.balboa.int_pipe_usage_history": [], "model.balboa.int_warehouse_metering_history": ["model.balboa.credits_by_month", "model.balboa.credits_by_month", "model.balboa.credits_by_month", "model.balboa.credits_by_warehouse", "model.balboa.credits_by_warehouse", "model.balboa.credits_by_warehouse", "model.balboa.credits_mtd", "model.balboa.credits_mtd", "model.balboa.credits_mtd", "model.balboa.credits_mtd", "model.balboa.credits_mtd", "model.balboa.credits_mtd", "model.balboa.credits_total", "model.balboa.credits_total", "model.balboa.credits_total", "model.balboa.credits_variance", "model.balboa.credits_variance", "model.balboa.credits_variance", "model.balboa.credits_variance", "model.balboa.credits_variance", "model.balboa.credits_variance"], "model.balboa.current_population": ["exposure.balboa.customer_loans"], "model.balboa.covid_cases_country": [], "model.balboa.covid_cases_county": [], "model.balboa.agg_cases_by_month": [], "model.balboa.covid_cases_state": ["metric.balboa.average_cases", "metric.balboa.average_deaths", "metric.balboa.sum_cases", "metric.balboa.sum_deaths"], "model.balboa.jhu_covid_19": ["model.balboa.covid_location", "model.balboa.covid_location", "model.balboa.covid_location"], "model.balboa._airbyte_raw_personal_loans": ["exposure.balboa.customer_loans", "metric.balboa.sum_funded_amount"], "model.balboa.warehouse_metering_history": ["model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history", "model.balboa.int_warehouse_metering_history"], "model.balboa.query_history": ["model.balboa.int_query_history", "model.balboa.int_query_history", "model.balboa.int_query_history"], "model.balboa.pipe_usage_history": ["model.balboa.int_pipe_usage_history", "model.balboa.int_pipe_usage_history", "model.balboa.int_pipe_usage_history"], "model.balboa.storage_usage": ["model.balboa.int_storage_usage", "model.balboa.int_storage_usage", "model.balboa.int_storage_usage"], "model.balboa._airbyte_raw_country_populations": ["model.balboa.current_population", "model.balboa.current_population", "model.balboa.current_population"], "snapshot.balboa.snp_jhu_dashboard_covid_19_global": [], "seed.balboa.state_codes": [], "seed.balboa.covid_cases_expected_values": [], "model.metrics.dbt_metrics_default_calendar": ["model.balboa.agg_cases_by_month", "model.balboa.agg_cases_by_month", "model.balboa.agg_cases_by_month"], "test.balboa.not_null_base_cases_cases.a7292b3eca": [], "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": [], "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": [], "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": [], "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": [], "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": [], "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": [], "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": [], "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": [], "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_exposure_id.368be81b8d": [], "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_exposure_id_output_feeds.9ff988c63a": [], "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": [], "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": [], "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": [], "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": [], "test.dbt_artifacts.unique_dim_dbt__current_models_manifest_model_id.bbc3c5dbea": [], "test.dbt_artifacts.not_null_dim_dbt__current_models_manifest_model_id.95b21ba2fb": [], "source.balboa.starschema_covid19.jhu_dashboard_covid_19_global": ["snapshot.balboa.snp_jhu_dashboard_covid_19_global"], "source.balboa.starschema_covid19.jhu_covid_19": ["model.balboa.base_cases", "model.balboa.jhu_covid_19"], "source.balboa.loans._airbyte_raw_personal_loans": ["model.balboa._airbyte_raw_personal_loans"], "source.balboa.account_usage.query_history": ["model.balboa.query_history"], "source.balboa.account_usage.storage_usage": ["model.balboa.storage_usage"], "source.balboa.account_usage.pipe_usage_history": ["model.balboa.pipe_usage_history"], "source.balboa.account_usage.warehouse_metering_history": ["model.balboa.warehouse_metering_history"], "source.balboa.raw._airbyte_raw_country_populations": ["model.balboa._airbyte_raw_country_populations"], "source.balboa.lineage.lineage_processing": [], "source.dbt_artifacts.dbt_artifacts.artifacts": [], "source.dbt_artifacts.dbt_artifacts.dbt_run_results": [], "source.dbt_artifacts.dbt_artifacts.dbt_run_results_nodes": [], "source.dbt_artifacts.dbt_artifacts.dbt_manifest_nodes": [], "exposure.balboa.customer_loans": [], "metric.balboa.sum_funded_amount": [], "metric.balboa.sum_cases": ["model.balboa.agg_cases_by_month"], "metric.balboa.sum_deaths": [], "metric.balboa.average_cases": [], "metric.balboa.average_deaths": []}}